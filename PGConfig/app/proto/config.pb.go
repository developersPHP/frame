// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config.proto

/*
	Package config is a generated protocol buffer package.

	It is generated from these files:
		config.proto

	It has these top-level messages:
		ConfigRequest
		RegionItem
		RegionResp
		BpidItem
		BpidResp
		ConfigItem
		ConfigResponse
*/
package config

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ConfigRequest struct {
	S1               int32  `protobuf:"varint,1,req,name=s1" json:"s1"`
	S2               int32  `protobuf:"varint,2,req,name=s2" json:"s2"`
	Mid              int64  `protobuf:"varint,3,req,name=mid" json:"mid"`
	ApkVer           string `protobuf:"bytes,4,req,name=apk_ver,json=apkVer" json:"apk_ver"`
	HallVer          int64  `protobuf:"varint,5,req,name=hall_ver,json=hallVer" json:"hall_ver"`
	Appid            int32  `protobuf:"varint,6,req,name=appid" json:"appid"`
	Region           int32  `protobuf:"varint,7,req,name=region" json:"region"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func (m *ConfigRequest) GetS1() int32 {
	if m != nil {
		return m.S1
	}
	return 0
}

func (m *ConfigRequest) GetS2() int32 {
	if m != nil {
		return m.S2
	}
	return 0
}

func (m *ConfigRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ConfigRequest) GetApkVer() string {
	if m != nil {
		return m.ApkVer
	}
	return ""
}

func (m *ConfigRequest) GetHallVer() int64 {
	if m != nil {
		return m.HallVer
	}
	return 0
}

func (m *ConfigRequest) GetAppid() int32 {
	if m != nil {
		return m.Appid
	}
	return 0
}

func (m *ConfigRequest) GetRegion() int32 {
	if m != nil {
		return m.Region
	}
	return 0
}

type RegionItem struct {
	Id               int32  `protobuf:"varint,1,req,name=id" json:"id"`
	Content          string `protobuf:"bytes,2,req,name=content" json:"content"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RegionItem) Reset()                    { *m = RegionItem{} }
func (*RegionItem) ProtoMessage()               {}
func (*RegionItem) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{1} }

func (m *RegionItem) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RegionItem) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type RegionResp struct {
	Status           int32      `protobuf:"varint,1,req,name=status" json:"status"`
	Data             RegionItem `protobuf:"bytes,2,req,name=data" json:"data"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *RegionResp) Reset()                    { *m = RegionResp{} }
func (*RegionResp) ProtoMessage()               {}
func (*RegionResp) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{2} }

func (m *RegionResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RegionResp) GetData() RegionItem {
	if m != nil {
		return m.Data
	}
	return RegionItem{}
}

type BpidItem struct {
	Bid              int32  `protobuf:"varint,1,req,name=bid" json:"bid"`
	Content          string `protobuf:"bytes,2,req,name=content" json:"content"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BpidItem) Reset()                    { *m = BpidItem{} }
func (*BpidItem) ProtoMessage()               {}
func (*BpidItem) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{3} }

func (m *BpidItem) GetBid() int32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *BpidItem) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type BpidResp struct {
	Status           int32    `protobuf:"varint,1,req,name=status" json:"status"`
	Data             BpidItem `protobuf:"bytes,2,req,name=data" json:"data"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BpidResp) Reset()                    { *m = BpidResp{} }
func (*BpidResp) ProtoMessage()               {}
func (*BpidResp) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{4} }

func (m *BpidResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BpidResp) GetData() BpidItem {
	if m != nil {
		return m.Data
	}
	return BpidItem{}
}

type ConfigItem struct {
	Cmd1             RegionResp `protobuf:"bytes,1,req,name=cmd1" json:"cmd1"`
	Cmd2             BpidResp   `protobuf:"bytes,2,req,name=cmd2" json:"cmd2"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ConfigItem) Reset()                    { *m = ConfigItem{} }
func (*ConfigItem) ProtoMessage()               {}
func (*ConfigItem) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{5} }

func (m *ConfigItem) GetCmd1() RegionResp {
	if m != nil {
		return m.Cmd1
	}
	return RegionResp{}
}

func (m *ConfigItem) GetCmd2() BpidResp {
	if m != nil {
		return m.Cmd2
	}
	return BpidResp{}
}

type ConfigResponse struct {
	S1               ConfigItem `protobuf:"bytes,1,req,name=s1" json:"s1"`
	S2               ConfigItem `protobuf:"bytes,2,req,name=s2" json:"s2"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{6} }

func (m *ConfigResponse) GetS1() ConfigItem {
	if m != nil {
		return m.S1
	}
	return ConfigItem{}
}

func (m *ConfigResponse) GetS2() ConfigItem {
	if m != nil {
		return m.S2
	}
	return ConfigItem{}
}

func init() {
	proto.RegisterType((*ConfigRequest)(nil), "config.ConfigRequest")
	proto.RegisterType((*RegionItem)(nil), "config.RegionItem")
	proto.RegisterType((*RegionResp)(nil), "config.RegionResp")
	proto.RegisterType((*BpidItem)(nil), "config.BpidItem")
	proto.RegisterType((*BpidResp)(nil), "config.BpidResp")
	proto.RegisterType((*ConfigItem)(nil), "config.ConfigItem")
	proto.RegisterType((*ConfigResponse)(nil), "config.ConfigResponse")
}
func (this *ConfigRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConfigRequest)
	if !ok {
		that2, ok := that.(ConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConfigRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConfigRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConfigRequest but is not nil && this == nil")
	}
	if this.S1 != that1.S1 {
		return fmt.Errorf("S1 this(%v) Not Equal that(%v)", this.S1, that1.S1)
	}
	if this.S2 != that1.S2 {
		return fmt.Errorf("S2 this(%v) Not Equal that(%v)", this.S2, that1.S2)
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.ApkVer != that1.ApkVer {
		return fmt.Errorf("ApkVer this(%v) Not Equal that(%v)", this.ApkVer, that1.ApkVer)
	}
	if this.HallVer != that1.HallVer {
		return fmt.Errorf("HallVer this(%v) Not Equal that(%v)", this.HallVer, that1.HallVer)
	}
	if this.Appid != that1.Appid {
		return fmt.Errorf("Appid this(%v) Not Equal that(%v)", this.Appid, that1.Appid)
	}
	if this.Region != that1.Region {
		return fmt.Errorf("Region this(%v) Not Equal that(%v)", this.Region, that1.Region)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigRequest)
	if !ok {
		that2, ok := that.(ConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.S1 != that1.S1 {
		return false
	}
	if this.S2 != that1.S2 {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.ApkVer != that1.ApkVer {
		return false
	}
	if this.HallVer != that1.HallVer {
		return false
	}
	if this.Appid != that1.Appid {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RegionItem) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RegionItem)
	if !ok {
		that2, ok := that.(RegionItem)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RegionItem")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RegionItem but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RegionItem but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Content != that1.Content {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RegionItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionItem)
	if !ok {
		that2, ok := that.(RegionItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RegionResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RegionResp)
	if !ok {
		that2, ok := that.(RegionResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RegionResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RegionResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RegionResp but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RegionResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionResp)
	if !ok {
		that2, ok := that.(RegionResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BpidItem) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BpidItem)
	if !ok {
		that2, ok := that.(BpidItem)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BpidItem")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BpidItem but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BpidItem but is not nil && this == nil")
	}
	if this.Bid != that1.Bid {
		return fmt.Errorf("Bid this(%v) Not Equal that(%v)", this.Bid, that1.Bid)
	}
	if this.Content != that1.Content {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BpidItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BpidItem)
	if !ok {
		that2, ok := that.(BpidItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Bid != that1.Bid {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BpidResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BpidResp)
	if !ok {
		that2, ok := that.(BpidResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BpidResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BpidResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BpidResp but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BpidResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BpidResp)
	if !ok {
		that2, ok := that.(BpidResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConfigItem) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConfigItem)
	if !ok {
		that2, ok := that.(ConfigItem)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConfigItem")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConfigItem but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConfigItem but is not nil && this == nil")
	}
	if !this.Cmd1.Equal(&that1.Cmd1) {
		return fmt.Errorf("Cmd1 this(%v) Not Equal that(%v)", this.Cmd1, that1.Cmd1)
	}
	if !this.Cmd2.Equal(&that1.Cmd2) {
		return fmt.Errorf("Cmd2 this(%v) Not Equal that(%v)", this.Cmd2, that1.Cmd2)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ConfigItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigItem)
	if !ok {
		that2, ok := that.(ConfigItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cmd1.Equal(&that1.Cmd1) {
		return false
	}
	if !this.Cmd2.Equal(&that1.Cmd2) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConfigResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConfigResponse)
	if !ok {
		that2, ok := that.(ConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConfigResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConfigResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConfigResponse but is not nil && this == nil")
	}
	if !this.S1.Equal(&that1.S1) {
		return fmt.Errorf("S1 this(%v) Not Equal that(%v)", this.S1, that1.S1)
	}
	if !this.S2.Equal(&that1.S2) {
		return fmt.Errorf("S2 this(%v) Not Equal that(%v)", this.S2, that1.S2)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigResponse)
	if !ok {
		that2, ok := that.(ConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.S1.Equal(&that1.S1) {
		return false
	}
	if !this.S2.Equal(&that1.S2) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&config.ConfigRequest{")
	s = append(s, "S1: "+fmt.Sprintf("%#v", this.S1)+",\n")
	s = append(s, "S2: "+fmt.Sprintf("%#v", this.S2)+",\n")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "ApkVer: "+fmt.Sprintf("%#v", this.ApkVer)+",\n")
	s = append(s, "HallVer: "+fmt.Sprintf("%#v", this.HallVer)+",\n")
	s = append(s, "Appid: "+fmt.Sprintf("%#v", this.Appid)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegionItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&config.RegionItem{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegionResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&config.RegionResp{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BpidItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&config.BpidItem{")
	s = append(s, "Bid: "+fmt.Sprintf("%#v", this.Bid)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BpidResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&config.BpidResp{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&config.ConfigItem{")
	s = append(s, "Cmd1: "+strings.Replace(this.Cmd1.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Cmd2: "+strings.Replace(this.Cmd2.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&config.ConfigResponse{")
	s = append(s, "S1: "+strings.Replace(this.S1.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "S2: "+strings.Replace(this.S2.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringConfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.S1))
	dAtA[i] = 0x10
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.S2))
	dAtA[i] = 0x18
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x22
	i++
	i = encodeVarintConfig(dAtA, i, uint64(len(m.ApkVer)))
	i += copy(dAtA[i:], m.ApkVer)
	dAtA[i] = 0x28
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.HallVer))
	dAtA[i] = 0x30
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.Appid))
	dAtA[i] = 0x38
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.Region))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegionItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintConfig(dAtA, i, uint64(len(m.Content)))
	i += copy(dAtA[i:], m.Content)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.Data.Size()))
	n1, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BpidItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BpidItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.Bid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintConfig(dAtA, i, uint64(len(m.Content)))
	i += copy(dAtA[i:], m.Content)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BpidResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BpidResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.Data.Size()))
	n2, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConfigItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.Cmd1.Size()))
	n3, err := m.Cmd1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.Cmd2.Size()))
	n4, err := m.Cmd2.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.S1.Size()))
	n5, err := m.S1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintConfig(dAtA, i, uint64(m.S2.Size()))
	n6, err := m.S2.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedConfigRequest(r randyConfig, easy bool) *ConfigRequest {
	this := &ConfigRequest{}
	this.S1 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.S1 *= -1
	}
	this.S2 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.S2 *= -1
	}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.ApkVer = string(randStringConfig(r))
	this.HallVer = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.HallVer *= -1
	}
	this.Appid = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Appid *= -1
	}
	this.Region = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Region *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedConfig(r, 8)
	}
	return this
}

func NewPopulatedRegionItem(r randyConfig, easy bool) *RegionItem {
	this := &RegionItem{}
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Content = string(randStringConfig(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedConfig(r, 3)
	}
	return this
}

func NewPopulatedRegionResp(r randyConfig, easy bool) *RegionResp {
	this := &RegionResp{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	v1 := NewPopulatedRegionItem(r, easy)
	this.Data = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedConfig(r, 3)
	}
	return this
}

func NewPopulatedBpidItem(r randyConfig, easy bool) *BpidItem {
	this := &BpidItem{}
	this.Bid = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Bid *= -1
	}
	this.Content = string(randStringConfig(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedConfig(r, 3)
	}
	return this
}

func NewPopulatedBpidResp(r randyConfig, easy bool) *BpidResp {
	this := &BpidResp{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	v2 := NewPopulatedBpidItem(r, easy)
	this.Data = *v2
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedConfig(r, 3)
	}
	return this
}

func NewPopulatedConfigItem(r randyConfig, easy bool) *ConfigItem {
	this := &ConfigItem{}
	v3 := NewPopulatedRegionResp(r, easy)
	this.Cmd1 = *v3
	v4 := NewPopulatedBpidResp(r, easy)
	this.Cmd2 = *v4
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedConfig(r, 3)
	}
	return this
}

func NewPopulatedConfigResponse(r randyConfig, easy bool) *ConfigResponse {
	this := &ConfigResponse{}
	v5 := NewPopulatedConfigItem(r, easy)
	this.S1 = *v5
	v6 := NewPopulatedConfigItem(r, easy)
	this.S2 = *v6
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedConfig(r, 3)
	}
	return this
}

type randyConfig interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneConfig(r randyConfig) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringConfig(r randyConfig) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneConfig(r)
	}
	return string(tmps)
}
func randUnrecognizedConfig(r randyConfig, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldConfig(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldConfig(dAtA []byte, r randyConfig, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateConfig(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateConfig(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ConfigRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovConfig(uint64(m.S1))
	n += 1 + sovConfig(uint64(m.S2))
	n += 1 + sovConfig(uint64(m.Mid))
	l = len(m.ApkVer)
	n += 1 + l + sovConfig(uint64(l))
	n += 1 + sovConfig(uint64(m.HallVer))
	n += 1 + sovConfig(uint64(m.Appid))
	n += 1 + sovConfig(uint64(m.Region))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovConfig(uint64(m.Id))
	l = len(m.Content)
	n += 1 + l + sovConfig(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionResp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovConfig(uint64(m.Status))
	l = m.Data.Size()
	n += 1 + l + sovConfig(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BpidItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovConfig(uint64(m.Bid))
	l = len(m.Content)
	n += 1 + l + sovConfig(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BpidResp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovConfig(uint64(m.Status))
	l = m.Data.Size()
	n += 1 + l + sovConfig(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigItem) Size() (n int) {
	var l int
	_ = l
	l = m.Cmd1.Size()
	n += 1 + l + sovConfig(uint64(l))
	l = m.Cmd2.Size()
	n += 1 + l + sovConfig(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigResponse) Size() (n int) {
	var l int
	_ = l
	l = m.S1.Size()
	n += 1 + l + sovConfig(uint64(l))
	l = m.S2.Size()
	n += 1 + l + sovConfig(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigRequest{`,
		`S1:` + fmt.Sprintf("%v", this.S1) + `,`,
		`S2:` + fmt.Sprintf("%v", this.S2) + `,`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`ApkVer:` + fmt.Sprintf("%v", this.ApkVer) + `,`,
		`HallVer:` + fmt.Sprintf("%v", this.HallVer) + `,`,
		`Appid:` + fmt.Sprintf("%v", this.Appid) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegionItem{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegionResp{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "RegionItem", "RegionItem", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BpidItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BpidItem{`,
		`Bid:` + fmt.Sprintf("%v", this.Bid) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BpidResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BpidResp{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "BpidItem", "BpidItem", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigItem{`,
		`Cmd1:` + strings.Replace(strings.Replace(this.Cmd1.String(), "RegionResp", "RegionResp", 1), `&`, ``, 1) + `,`,
		`Cmd2:` + strings.Replace(strings.Replace(this.Cmd2.String(), "BpidResp", "BpidResp", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigResponse{`,
		`S1:` + strings.Replace(strings.Replace(this.S1.String(), "ConfigItem", "ConfigItem", 1), `&`, ``, 1) + `,`,
		`S2:` + strings.Replace(strings.Replace(this.S2.String(), "ConfigItem", "ConfigItem", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ConfigRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S1", wireType)
			}
			m.S1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.S1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2", wireType)
			}
			m.S2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.S2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApkVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApkVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallVer", wireType)
			}
			m.HallVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HallVer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			m.Appid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Appid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			m.Region = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Region |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("s1")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("s2")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("apk_ver")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("hall_ver")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("appid")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("region")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionItem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("content")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BpidItem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BpidItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BpidItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("bid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("content")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BpidResp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BpidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BpidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigItem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cmd1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cmd2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("cmd1")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("cmd2")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.S1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.S2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("s1")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("s2")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6f, 0x94, 0x40,
	0x18, 0xc6, 0x3b, 0x2c, 0x0b, 0xf5, 0xf5, 0x4f, 0xcc, 0xc4, 0x34, 0xa4, 0xd1, 0xe9, 0x86, 0x13,
	0x31, 0xeb, 0x36, 0xe5, 0x23, 0xe0, 0xc9, 0x2b, 0x31, 0xc6, 0x9b, 0x61, 0x99, 0x59, 0x3a, 0x69,
	0x61, 0x46, 0x66, 0xf0, 0xec, 0xc7, 0xf1, 0x23, 0x78, 0xf4, 0xd8, 0x8b, 0x89, 0x47, 0x4f, 0xa6,
	0xf0, 0x09, 0x3c, 0x7a, 0x34, 0x33, 0x40, 0x0b, 0xab, 0xd1, 0xde, 0x98, 0xe7, 0xfd, 0xf3, 0xfc,
	0xde, 0xf0, 0xc0, 0x83, 0x5c, 0x54, 0x3b, 0x5e, 0x6c, 0x64, 0x2d, 0xb4, 0xc0, 0x5e, 0xff, 0x3a,
	0x7e, 0x51, 0x70, 0x7d, 0xde, 0x6c, 0x37, 0xb9, 0x28, 0x4f, 0x0b, 0x51, 0x88, 0x53, 0x5b, 0xde,
	0x36, 0x3b, 0xfb, 0xb2, 0x0f, 0xfb, 0xd5, 0x8f, 0x85, 0x5f, 0x11, 0x3c, 0x7c, 0x69, 0x27, 0x53,
	0xf6, 0xbe, 0x61, 0x4a, 0xe3, 0x27, 0xe0, 0xa8, 0xb3, 0x00, 0xad, 0x9c, 0x68, 0x99, 0xb8, 0x57,
	0x3f, 0x4e, 0x0e, 0x52, 0x47, 0x9d, 0x59, 0x35, 0x0e, 0x9c, 0x99, 0x1a, 0xe3, 0x23, 0x58, 0x94,
	0x9c, 0x06, 0x8b, 0x95, 0x13, 0x2d, 0x06, 0xd9, 0x08, 0xf8, 0x19, 0xf8, 0x99, 0xbc, 0x78, 0xf7,
	0x81, 0xd5, 0x81, 0xbb, 0x72, 0xa2, 0x7b, 0x43, 0xcd, 0xcb, 0xe4, 0xc5, 0x1b, 0x56, 0xe3, 0x13,
	0x38, 0x3c, 0xcf, 0x2e, 0x2f, 0x6d, 0x7d, 0x39, 0x99, 0xf5, 0x8d, 0x6a, 0x1a, 0x8e, 0x61, 0x99,
	0x49, 0xc9, 0x69, 0xe0, 0x4d, 0x0c, 0x7b, 0x09, 0x3f, 0x05, 0xaf, 0x66, 0x05, 0x17, 0x55, 0xe0,
	0x4f, 0x8a, 0x83, 0x16, 0x26, 0x00, 0xa9, 0xfd, 0x7a, 0xa5, 0x59, 0x69, 0xa8, 0x39, 0x9d, 0xdf,
	0xc2, 0x29, 0x26, 0xe0, 0xe7, 0xa2, 0xd2, 0xac, 0xd2, 0xf6, 0xa0, 0x91, 0x6e, 0x14, 0xc3, 0xb7,
	0xe3, 0x8e, 0x94, 0x29, 0x69, 0xfc, 0x94, 0xce, 0x74, 0xa3, 0x66, 0x7b, 0x06, 0x0d, 0xaf, 0xc1,
	0xa5, 0x99, 0xce, 0xec, 0xa2, 0xfb, 0x31, 0xde, 0x0c, 0xff, 0xe4, 0x96, 0x61, 0xe8, 0xb7, 0x5d,
	0x61, 0x02, 0x87, 0x89, 0xe4, 0xd4, 0xb2, 0x1d, 0xc1, 0x62, 0xbb, 0x07, 0x67, 0x84, 0xff, 0xd2,
	0xbd, 0xee, 0x77, 0xdc, 0x81, 0xed, 0xf9, 0x8c, 0xed, 0xf1, 0xc8, 0x36, 0x12, 0xcc, 0xc8, 0x76,
	0x00, 0x7d, 0x0c, 0x2c, 0xdb, 0x1a, 0xdc, 0xbc, 0xa4, 0x7d, 0x0a, 0xfe, 0xb8, 0xca, 0x38, 0x8f,
	0xb3, 0xa6, 0xcb, 0xf8, 0xe4, 0x25, 0x8d, 0xff, 0xe6, 0xb3, 0xd7, 0x1b, 0x87, 0x14, 0x1e, 0x8d,
	0x71, 0x53, 0x52, 0x54, 0x8a, 0xe1, 0xe8, 0x26, 0x6f, 0x13, 0xa7, 0x5b, 0x96, 0x49, 0x06, 0xa3,
	0x9b, 0x0c, 0xfe, 0xbb, 0x33, 0x4e, 0xd6, 0xdf, 0x5b, 0x72, 0x70, 0xdd, 0x12, 0xf4, 0xb3, 0x25,
	0xe8, 0x57, 0x4b, 0xd0, 0xc7, 0x8e, 0xa0, 0x4f, 0x1d, 0x41, 0x9f, 0x3b, 0x82, 0xbe, 0x74, 0x04,
	0x5d, 0x75, 0x04, 0x7d, 0xeb, 0x08, 0xba, 0xee, 0x08, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xba,
	0xba, 0xba, 0x70, 0x49, 0x03, 0x00, 0x00,
}
