// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: login.proto

/*
	Package pgLogin is a generated protocol buffer package.

	It is generated from these files:
		login.proto

	It has these top-level messages:
		LoginRequest
		LoginRespData
		LoginResponse
*/
package pgLogin

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest struct {
	AppId            int32  `protobuf:"varint,1,req,name=app_id,json=appId" json:"app_id"`
	ApkVer           string `protobuf:"bytes,2,req,name=apk_ver,json=apkVer" json:"apk_ver"`
	HallVer          int64  `protobuf:"varint,3,req,name=hall_ver,json=hallVer" json:"hall_ver"`
	LoginType        int32  `protobuf:"varint,4,req,name=login_type,json=loginType" json:"login_type"`
	Guid             string `protobuf:"bytes,5,req,name=guid" json:"guid"`
	Code             int32  `protobuf:"varint,6,opt,name=code" json:"code"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{0} }

func (m *LoginRequest) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *LoginRequest) GetApkVer() string {
	if m != nil {
		return m.ApkVer
	}
	return ""
}

func (m *LoginRequest) GetHallVer() int64 {
	if m != nil {
		return m.HallVer
	}
	return 0
}

func (m *LoginRequest) GetLoginType() int32 {
	if m != nil {
		return m.LoginType
	}
	return 0
}

func (m *LoginRequest) GetGuid() string {
	if m != nil {
		return m.Guid
	}
	return ""
}

func (m *LoginRequest) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type LoginRespData struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	Nick             string `protobuf:"bytes,2,req,name=nick" json:"nick"`
	Sex              int32  `protobuf:"varint,3,req,name=sex" json:"sex"`
	Icon             string `protobuf:"bytes,4,req,name=icon" json:"icon"`
	Ssid             string `protobuf:"bytes,5,req,name=ssid" json:"ssid"`
	Money            int64  `protobuf:"varint,6,req,name=money" json:"money"`
	LoginType        int32  `protobuf:"varint,7,req,name=login_type,json=loginType" json:"login_type"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LoginRespData) Reset()                    { *m = LoginRespData{} }
func (*LoginRespData) ProtoMessage()               {}
func (*LoginRespData) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{1} }

func (m *LoginRespData) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *LoginRespData) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *LoginRespData) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *LoginRespData) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *LoginRespData) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *LoginRespData) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *LoginRespData) GetLoginType() int32 {
	if m != nil {
		return m.LoginType
	}
	return 0
}

type LoginResponse struct {
	Status           int32         `protobuf:"varint,1,req,name=status" json:"status"`
	Msg              string        `protobuf:"bytes,2,req,name=msg" json:"msg"`
	Data             LoginRespData `protobuf:"bytes,3,req,name=data" json:"data"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{2} }

func (m *LoginResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *LoginResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *LoginResponse) GetData() LoginRespData {
	if m != nil {
		return m.Data
	}
	return LoginRespData{}
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "pgLogin.LoginRequest")
	proto.RegisterType((*LoginRespData)(nil), "pgLogin.LoginRespData")
	proto.RegisterType((*LoginResponse)(nil), "pgLogin.LoginResponse")
}
func (this *LoginRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*LoginRequest)
	if !ok {
		that2, ok := that.(LoginRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *LoginRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *LoginRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *LoginRequest but is not nil && this == nil")
	}
	if this.AppId != that1.AppId {
		return fmt.Errorf("AppId this(%v) Not Equal that(%v)", this.AppId, that1.AppId)
	}
	if this.ApkVer != that1.ApkVer {
		return fmt.Errorf("ApkVer this(%v) Not Equal that(%v)", this.ApkVer, that1.ApkVer)
	}
	if this.HallVer != that1.HallVer {
		return fmt.Errorf("HallVer this(%v) Not Equal that(%v)", this.HallVer, that1.HallVer)
	}
	if this.LoginType != that1.LoginType {
		return fmt.Errorf("LoginType this(%v) Not Equal that(%v)", this.LoginType, that1.LoginType)
	}
	if this.Guid != that1.Guid {
		return fmt.Errorf("Guid this(%v) Not Equal that(%v)", this.Guid, that1.Guid)
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *LoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginRequest)
	if !ok {
		that2, ok := that.(LoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApkVer != that1.ApkVer {
		return false
	}
	if this.HallVer != that1.HallVer {
		return false
	}
	if this.LoginType != that1.LoginType {
		return false
	}
	if this.Guid != that1.Guid {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LoginRespData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*LoginRespData)
	if !ok {
		that2, ok := that.(LoginRespData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *LoginRespData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *LoginRespData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *LoginRespData but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.Nick != that1.Nick {
		return fmt.Errorf("Nick this(%v) Not Equal that(%v)", this.Nick, that1.Nick)
	}
	if this.Sex != that1.Sex {
		return fmt.Errorf("Sex this(%v) Not Equal that(%v)", this.Sex, that1.Sex)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if this.Ssid != that1.Ssid {
		return fmt.Errorf("Ssid this(%v) Not Equal that(%v)", this.Ssid, that1.Ssid)
	}
	if this.Money != that1.Money {
		return fmt.Errorf("Money this(%v) Not Equal that(%v)", this.Money, that1.Money)
	}
	if this.LoginType != that1.LoginType {
		return fmt.Errorf("LoginType this(%v) Not Equal that(%v)", this.LoginType, that1.LoginType)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *LoginRespData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginRespData)
	if !ok {
		that2, ok := that.(LoginRespData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.Nick != that1.Nick {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.Ssid != that1.Ssid {
		return false
	}
	if this.Money != that1.Money {
		return false
	}
	if this.LoginType != that1.LoginType {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LoginResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*LoginResponse)
	if !ok {
		that2, ok := that.(LoginResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *LoginResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *LoginResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *LoginResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *LoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginResponse)
	if !ok {
		that2, ok := that.(LoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LoginRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pgLogin.LoginRequest{")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApkVer: "+fmt.Sprintf("%#v", this.ApkVer)+",\n")
	s = append(s, "HallVer: "+fmt.Sprintf("%#v", this.HallVer)+",\n")
	s = append(s, "LoginType: "+fmt.Sprintf("%#v", this.LoginType)+",\n")
	s = append(s, "Guid: "+fmt.Sprintf("%#v", this.Guid)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginRespData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pgLogin.LoginRespData{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "Nick: "+fmt.Sprintf("%#v", this.Nick)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "Ssid: "+fmt.Sprintf("%#v", this.Ssid)+",\n")
	s = append(s, "Money: "+fmt.Sprintf("%#v", this.Money)+",\n")
	s = append(s, "LoginType: "+fmt.Sprintf("%#v", this.LoginType)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgLogin.LoginResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLogin(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintLogin(dAtA, i, uint64(m.AppId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintLogin(dAtA, i, uint64(len(m.ApkVer)))
	i += copy(dAtA[i:], m.ApkVer)
	dAtA[i] = 0x18
	i++
	i = encodeVarintLogin(dAtA, i, uint64(m.HallVer))
	dAtA[i] = 0x20
	i++
	i = encodeVarintLogin(dAtA, i, uint64(m.LoginType))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintLogin(dAtA, i, uint64(len(m.Guid)))
	i += copy(dAtA[i:], m.Guid)
	dAtA[i] = 0x30
	i++
	i = encodeVarintLogin(dAtA, i, uint64(m.Code))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoginRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintLogin(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintLogin(dAtA, i, uint64(len(m.Nick)))
	i += copy(dAtA[i:], m.Nick)
	dAtA[i] = 0x18
	i++
	i = encodeVarintLogin(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x22
	i++
	i = encodeVarintLogin(dAtA, i, uint64(len(m.Icon)))
	i += copy(dAtA[i:], m.Icon)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintLogin(dAtA, i, uint64(len(m.Ssid)))
	i += copy(dAtA[i:], m.Ssid)
	dAtA[i] = 0x30
	i++
	i = encodeVarintLogin(dAtA, i, uint64(m.Money))
	dAtA[i] = 0x38
	i++
	i = encodeVarintLogin(dAtA, i, uint64(m.LoginType))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintLogin(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintLogin(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLogin(dAtA, i, uint64(m.Data.Size()))
	n1, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintLogin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedLoginRequest(r randyLogin, easy bool) *LoginRequest {
	this := &LoginRequest{}
	this.AppId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.AppId *= -1
	}
	this.ApkVer = string(randStringLogin(r))
	this.HallVer = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.HallVer *= -1
	}
	this.LoginType = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.LoginType *= -1
	}
	this.Guid = string(randStringLogin(r))
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedLogin(r, 7)
	}
	return this
}

func NewPopulatedLoginRespData(r randyLogin, easy bool) *LoginRespData {
	this := &LoginRespData{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.Nick = string(randStringLogin(r))
	this.Sex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sex *= -1
	}
	this.Icon = string(randStringLogin(r))
	this.Ssid = string(randStringLogin(r))
	this.Money = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Money *= -1
	}
	this.LoginType = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.LoginType *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedLogin(r, 8)
	}
	return this
}

func NewPopulatedLoginResponse(r randyLogin, easy bool) *LoginResponse {
	this := &LoginResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringLogin(r))
	v1 := NewPopulatedLoginRespData(r, easy)
	this.Data = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedLogin(r, 4)
	}
	return this
}

type randyLogin interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneLogin(r randyLogin) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringLogin(r randyLogin) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneLogin(r)
	}
	return string(tmps)
}
func randUnrecognizedLogin(r randyLogin, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldLogin(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldLogin(dAtA []byte, r randyLogin, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateLogin(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateLogin(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateLogin(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateLogin(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateLogin(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateLogin(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateLogin(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *LoginRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovLogin(uint64(m.AppId))
	l = len(m.ApkVer)
	n += 1 + l + sovLogin(uint64(l))
	n += 1 + sovLogin(uint64(m.HallVer))
	n += 1 + sovLogin(uint64(m.LoginType))
	l = len(m.Guid)
	n += 1 + l + sovLogin(uint64(l))
	n += 1 + sovLogin(uint64(m.Code))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginRespData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovLogin(uint64(m.Mid))
	l = len(m.Nick)
	n += 1 + l + sovLogin(uint64(l))
	n += 1 + sovLogin(uint64(m.Sex))
	l = len(m.Icon)
	n += 1 + l + sovLogin(uint64(l))
	l = len(m.Ssid)
	n += 1 + l + sovLogin(uint64(l))
	n += 1 + sovLogin(uint64(m.Money))
	n += 1 + sovLogin(uint64(m.LoginType))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovLogin(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovLogin(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovLogin(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLogin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLogin(x uint64) (n int) {
	return sovLogin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginRequest{`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApkVer:` + fmt.Sprintf("%v", this.ApkVer) + `,`,
		`HallVer:` + fmt.Sprintf("%v", this.HallVer) + `,`,
		`LoginType:` + fmt.Sprintf("%v", this.LoginType) + `,`,
		`Guid:` + fmt.Sprintf("%v", this.Guid) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginRespData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginRespData{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`Nick:` + fmt.Sprintf("%v", this.Nick) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`Ssid:` + fmt.Sprintf("%v", this.Ssid) + `,`,
		`Money:` + fmt.Sprintf("%v", this.Money) + `,`,
		`LoginType:` + fmt.Sprintf("%v", this.LoginType) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "LoginRespData", "LoginRespData", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLogin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LoginRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApkVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApkVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallVer", wireType)
			}
			m.HallVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HallVer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginType", wireType)
			}
			m.LoginType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("app_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("apk_ver")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("hall_ver")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("login_type")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("guid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRespData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ssid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ssid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginType", wireType)
			}
			m.LoginType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("nick")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("sex")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("icon")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("ssid")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("money")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("login_type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("msg")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLogin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("login.proto", fileDescriptorLogin) }

var fileDescriptorLogin = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbf, 0x4e, 0xeb, 0x30,
	0x18, 0xc5, 0xeb, 0x34, 0x7f, 0x6e, 0xdd, 0x7b, 0x17, 0x0f, 0x55, 0xd4, 0x0b, 0x6e, 0x54, 0x96,
	0x0e, 0x90, 0x22, 0x1e, 0xa1, 0x62, 0x41, 0x62, 0xaa, 0x10, 0x6b, 0xe5, 0x26, 0x26, 0x8d, 0xda,
	0xc6, 0xa6, 0x76, 0x80, 0x6e, 0x3c, 0x0e, 0x8f, 0xc0, 0xc8, 0xc0, 0xd0, 0x09, 0x31, 0x32, 0xa1,
	0x26, 0x4f, 0xc0, 0xc8, 0x88, 0xec, 0xa6, 0x55, 0x52, 0xb1, 0xd5, 0xbf, 0xe3, 0xe3, 0xef, 0x9c,
	0xaf, 0x81, 0xcd, 0x19, 0x8b, 0xe2, 0xc4, 0xe7, 0x0b, 0x26, 0x19, 0x72, 0x78, 0x74, 0xa9, 0x8e,
	0xed, 0x93, 0x28, 0x96, 0x93, 0x74, 0xec, 0x07, 0x6c, 0xde, 0x8f, 0x58, 0xc4, 0xfa, 0x5a, 0x1f,
	0xa7, 0x37, 0xfa, 0xa4, 0x0f, 0xfa, 0xd7, 0xc6, 0xd7, 0x7d, 0x05, 0xf0, 0xaf, 0x36, 0x0e, 0xe9,
	0x6d, 0x4a, 0x85, 0x44, 0xff, 0xa1, 0x4d, 0x38, 0x1f, 0xc5, 0xa1, 0x0b, 0x3c, 0xa3, 0x67, 0x0d,
	0xcc, 0xd5, 0x67, 0xa7, 0x36, 0xb4, 0x08, 0xe7, 0x17, 0x21, 0x3a, 0x84, 0x0e, 0xe1, 0xd3, 0xd1,
	0x1d, 0x5d, 0xb8, 0x86, 0x67, 0xf4, 0x1a, 0x85, 0x6a, 0x13, 0x3e, 0xbd, 0xa6, 0x0b, 0xd4, 0x81,
	0x7f, 0x26, 0x64, 0x36, 0xd3, 0x7a, 0xdd, 0x33, 0x7a, 0xf5, 0x42, 0x77, 0x14, 0x55, 0x17, 0x8e,
	0x20, 0xd4, 0xa1, 0x47, 0x72, 0xc9, 0xa9, 0x6b, 0x96, 0x06, 0x34, 0x34, 0xbf, 0x5a, 0x72, 0x8a,
	0x5c, 0x68, 0x46, 0x69, 0x1c, 0xba, 0x56, 0x69, 0x82, 0x26, 0x4a, 0x09, 0x58, 0x48, 0x5d, 0xdb,
	0x03, 0x3b, 0xa3, 0x26, 0xdd, 0x37, 0x00, 0xff, 0x15, 0x35, 0x04, 0x3f, 0x27, 0x92, 0xa0, 0x16,
	0xac, 0xcf, 0x8b, 0x12, 0xdb, 0x18, 0x0a, 0xa8, 0x37, 0x92, 0x38, 0x98, 0x56, 0xf2, 0x6b, 0xa2,
	0x1c, 0x82, 0x3e, 0xe8, 0xe0, 0xdb, 0xc7, 0x15, 0x50, 0x8e, 0x38, 0x60, 0x89, 0x8e, 0xbb, 0x73,
	0x28, 0xa2, 0x14, 0x21, 0xf6, 0x93, 0x2a, 0x82, 0xda, 0xd0, 0x9a, 0xb3, 0x84, 0x2e, 0x5d, 0xbb,
	0x34, 0x7f, 0x83, 0xf6, 0x96, 0xe0, 0xfc, 0xba, 0x84, 0xee, 0x7d, 0xa9, 0x0f, 0x4b, 0x04, 0x45,
	0x07, 0xd0, 0x16, 0x92, 0xc8, 0x54, 0x54, 0xfe, 0x97, 0x82, 0xe9, 0xb6, 0x22, 0xaa, 0x94, 0x52,
	0x00, 0x9d, 0x42, 0x33, 0x24, 0x92, 0xe8, 0x52, 0xcd, 0xb3, 0x96, 0x5f, 0x7c, 0x25, 0x7e, 0x65,
	0x57, 0xdb, 0xe4, 0xea, 0xe6, 0xe0, 0xf8, 0x23, 0xc3, 0xb5, 0x75, 0x86, 0xc1, 0x57, 0x86, 0xc1,
	0x77, 0x86, 0xc1, 0x63, 0x8e, 0xc1, 0x53, 0x8e, 0xc1, 0x73, 0x8e, 0xc1, 0x4b, 0x8e, 0xc1, 0x2a,
	0xc7, 0xe0, 0x3d, 0xc7, 0x60, 0x9d, 0x63, 0xf0, 0x13, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x6e, 0x53,
	0x76, 0x84, 0x02, 0x00, 0x00,
}
