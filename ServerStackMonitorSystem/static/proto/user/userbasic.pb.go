// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user/userbasic.proto

/*
	Package pgUser is a generated protocol buffer package.

	It is generated from these files:
		user/userbasic.proto

	It has these top-level messages:
		InsertUserInfoRequest
		InsertUserInfoResponse
		ModifyUserInfoRequest
		ModifyUserInfoResponse
		GetUserInfoRequest
		GetUserInfoRespData
		GetUserInfoResponse
*/
package pgUser

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 写入用户基本信息
type InsertUserInfoRequest struct {
	Cid              int64  `protobuf:"varint,1,opt,name=cid" json:"cid"`
	Nick             string `protobuf:"bytes,2,opt,name=nick" json:"nick"`
	City             string `protobuf:"bytes,3,opt,name=city" json:"city"`
	Sex              int32  `protobuf:"varint,4,opt,name=sex" json:"sex"`
	Sign             string `protobuf:"bytes,5,opt,name=sign" json:"sign"`
	Icon             string `protobuf:"bytes,6,opt,name=icon" json:"icon"`
	IconBig          string `protobuf:"bytes,7,opt,name=iconBig" json:"iconBig"`
	Phone            string `protobuf:"bytes,8,opt,name=phone" json:"phone"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *InsertUserInfoRequest) Reset()                    { *m = InsertUserInfoRequest{} }
func (*InsertUserInfoRequest) ProtoMessage()               {}
func (*InsertUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserbasic, []int{0} }

func (m *InsertUserInfoRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *InsertUserInfoRequest) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *InsertUserInfoRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *InsertUserInfoRequest) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *InsertUserInfoRequest) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *InsertUserInfoRequest) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *InsertUserInfoRequest) GetIconBig() string {
	if m != nil {
		return m.IconBig
	}
	return ""
}

func (m *InsertUserInfoRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type InsertUserInfoResponse struct {
	Status           int32  `protobuf:"varint,1,opt,name=status" json:"status"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *InsertUserInfoResponse) Reset()                    { *m = InsertUserInfoResponse{} }
func (*InsertUserInfoResponse) ProtoMessage()               {}
func (*InsertUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorUserbasic, []int{1} }

func (m *InsertUserInfoResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// 修改用户基本信息
type ModifyUserInfoRequest struct {
	Mid              int64  `protobuf:"varint,1,opt,name=mid" json:"mid"`
	Nick             string `protobuf:"bytes,2,opt,name=nick" json:"nick"`
	City             string `protobuf:"bytes,3,opt,name=city" json:"city"`
	Sex              int32  `protobuf:"varint,4,opt,name=sex" json:"sex"`
	Sign             string `protobuf:"bytes,5,opt,name=sign" json:"sign"`
	Icon             string `protobuf:"bytes,6,opt,name=icon" json:"icon"`
	IconBig          string `protobuf:"bytes,7,opt,name=iconBig" json:"iconBig"`
	Phone            string `protobuf:"bytes,8,opt,name=phone" json:"phone"`
	IconId           string `protobuf:"bytes,9,opt,name=iconId" json:"iconId"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ModifyUserInfoRequest) Reset()                    { *m = ModifyUserInfoRequest{} }
func (*ModifyUserInfoRequest) ProtoMessage()               {}
func (*ModifyUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserbasic, []int{2} }

func (m *ModifyUserInfoRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ModifyUserInfoRequest) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *ModifyUserInfoRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *ModifyUserInfoRequest) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *ModifyUserInfoRequest) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *ModifyUserInfoRequest) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ModifyUserInfoRequest) GetIconBig() string {
	if m != nil {
		return m.IconBig
	}
	return ""
}

func (m *ModifyUserInfoRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ModifyUserInfoRequest) GetIconId() string {
	if m != nil {
		return m.IconId
	}
	return ""
}

type ModifyUserInfoResponse struct {
	Status           int32  `protobuf:"varint,1,opt,name=status" json:"status"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ModifyUserInfoResponse) Reset()                    { *m = ModifyUserInfoResponse{} }
func (*ModifyUserInfoResponse) ProtoMessage()               {}
func (*ModifyUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorUserbasic, []int{3} }

func (m *ModifyUserInfoResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// 获取用户基本信息
type GetUserInfoRequest struct {
	Mid              int64  `protobuf:"varint,1,opt,name=mid" json:"mid"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetUserInfoRequest) Reset()                    { *m = GetUserInfoRequest{} }
func (*GetUserInfoRequest) ProtoMessage()               {}
func (*GetUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserbasic, []int{4} }

func (m *GetUserInfoRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type GetUserInfoRespData struct {
	Nick             string `protobuf:"bytes,1,opt,name=nick" json:"nick"`
	Sex              int32  `protobuf:"varint,2,opt,name=sex" json:"sex"`
	Icon             string `protobuf:"bytes,3,opt,name=icon" json:"icon"`
	IconBig          string `protobuf:"bytes,4,opt,name=icon_big,json=iconBig" json:"icon_big"`
	City             string `protobuf:"bytes,5,opt,name=city" json:"city"`
	Sign             string `protobuf:"bytes,6,opt,name=sign" json:"sign"`
	Status           int32  `protobuf:"varint,7,opt,name=status" json:"status"`
	IconId           string `protobuf:"bytes,8,opt,name=iconId" json:"iconId"`
	Phone            string `protobuf:"bytes,9,opt,name=phone" json:"phone"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetUserInfoRespData) Reset()                    { *m = GetUserInfoRespData{} }
func (*GetUserInfoRespData) ProtoMessage()               {}
func (*GetUserInfoRespData) Descriptor() ([]byte, []int) { return fileDescriptorUserbasic, []int{5} }

func (m *GetUserInfoRespData) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *GetUserInfoRespData) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *GetUserInfoRespData) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *GetUserInfoRespData) GetIconBig() string {
	if m != nil {
		return m.IconBig
	}
	return ""
}

func (m *GetUserInfoRespData) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *GetUserInfoRespData) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *GetUserInfoRespData) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetUserInfoRespData) GetIconId() string {
	if m != nil {
		return m.IconId
	}
	return ""
}

func (m *GetUserInfoRespData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type GetUserInfoResponse struct {
	Status           int32               `protobuf:"varint,1,opt,name=status" json:"status"`
	Msg              string              `protobuf:"bytes,2,opt,name=msg" json:"msg"`
	Data             GetUserInfoRespData `protobuf:"bytes,3,opt,name=data" json:"data"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *GetUserInfoResponse) Reset()                    { *m = GetUserInfoResponse{} }
func (*GetUserInfoResponse) ProtoMessage()               {}
func (*GetUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorUserbasic, []int{6} }

func (m *GetUserInfoResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetUserInfoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetUserInfoResponse) GetData() GetUserInfoRespData {
	if m != nil {
		return m.Data
	}
	return GetUserInfoRespData{}
}

func init() {
	proto.RegisterType((*InsertUserInfoRequest)(nil), "pgUser.InsertUserInfoRequest")
	proto.RegisterType((*InsertUserInfoResponse)(nil), "pgUser.InsertUserInfoResponse")
	proto.RegisterType((*ModifyUserInfoRequest)(nil), "pgUser.ModifyUserInfoRequest")
	proto.RegisterType((*ModifyUserInfoResponse)(nil), "pgUser.ModifyUserInfoResponse")
	proto.RegisterType((*GetUserInfoRequest)(nil), "pgUser.GetUserInfoRequest")
	proto.RegisterType((*GetUserInfoRespData)(nil), "pgUser.GetUserInfoRespData")
	proto.RegisterType((*GetUserInfoResponse)(nil), "pgUser.GetUserInfoResponse")
}
func (this *InsertUserInfoRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*InsertUserInfoRequest)
	if !ok {
		that2, ok := that.(InsertUserInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *InsertUserInfoRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *InsertUserInfoRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *InsertUserInfoRequest but is not nil && this == nil")
	}
	if this.Cid != that1.Cid {
		return fmt.Errorf("Cid this(%v) Not Equal that(%v)", this.Cid, that1.Cid)
	}
	if this.Nick != that1.Nick {
		return fmt.Errorf("Nick this(%v) Not Equal that(%v)", this.Nick, that1.Nick)
	}
	if this.City != that1.City {
		return fmt.Errorf("City this(%v) Not Equal that(%v)", this.City, that1.City)
	}
	if this.Sex != that1.Sex {
		return fmt.Errorf("Sex this(%v) Not Equal that(%v)", this.Sex, that1.Sex)
	}
	if this.Sign != that1.Sign {
		return fmt.Errorf("Sign this(%v) Not Equal that(%v)", this.Sign, that1.Sign)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if this.IconBig != that1.IconBig {
		return fmt.Errorf("IconBig this(%v) Not Equal that(%v)", this.IconBig, that1.IconBig)
	}
	if this.Phone != that1.Phone {
		return fmt.Errorf("Phone this(%v) Not Equal that(%v)", this.Phone, that1.Phone)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *InsertUserInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertUserInfoRequest)
	if !ok {
		that2, ok := that.(InsertUserInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cid != that1.Cid {
		return false
	}
	if this.Nick != that1.Nick {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Sign != that1.Sign {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.IconBig != that1.IconBig {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InsertUserInfoResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*InsertUserInfoResponse)
	if !ok {
		that2, ok := that.(InsertUserInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *InsertUserInfoResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *InsertUserInfoResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *InsertUserInfoResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *InsertUserInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertUserInfoResponse)
	if !ok {
		that2, ok := that.(InsertUserInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ModifyUserInfoRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModifyUserInfoRequest)
	if !ok {
		that2, ok := that.(ModifyUserInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModifyUserInfoRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModifyUserInfoRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModifyUserInfoRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.Nick != that1.Nick {
		return fmt.Errorf("Nick this(%v) Not Equal that(%v)", this.Nick, that1.Nick)
	}
	if this.City != that1.City {
		return fmt.Errorf("City this(%v) Not Equal that(%v)", this.City, that1.City)
	}
	if this.Sex != that1.Sex {
		return fmt.Errorf("Sex this(%v) Not Equal that(%v)", this.Sex, that1.Sex)
	}
	if this.Sign != that1.Sign {
		return fmt.Errorf("Sign this(%v) Not Equal that(%v)", this.Sign, that1.Sign)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if this.IconBig != that1.IconBig {
		return fmt.Errorf("IconBig this(%v) Not Equal that(%v)", this.IconBig, that1.IconBig)
	}
	if this.Phone != that1.Phone {
		return fmt.Errorf("Phone this(%v) Not Equal that(%v)", this.Phone, that1.Phone)
	}
	if this.IconId != that1.IconId {
		return fmt.Errorf("IconId this(%v) Not Equal that(%v)", this.IconId, that1.IconId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ModifyUserInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModifyUserInfoRequest)
	if !ok {
		that2, ok := that.(ModifyUserInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.Nick != that1.Nick {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Sign != that1.Sign {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.IconBig != that1.IconBig {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.IconId != that1.IconId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ModifyUserInfoResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ModifyUserInfoResponse)
	if !ok {
		that2, ok := that.(ModifyUserInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ModifyUserInfoResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ModifyUserInfoResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ModifyUserInfoResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ModifyUserInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModifyUserInfoResponse)
	if !ok {
		that2, ok := that.(ModifyUserInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetUserInfoRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetUserInfoRequest)
	if !ok {
		that2, ok := that.(GetUserInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetUserInfoRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetUserInfoRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetUserInfoRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetUserInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserInfoRequest)
	if !ok {
		that2, ok := that.(GetUserInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetUserInfoRespData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetUserInfoRespData)
	if !ok {
		that2, ok := that.(GetUserInfoRespData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetUserInfoRespData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetUserInfoRespData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetUserInfoRespData but is not nil && this == nil")
	}
	if this.Nick != that1.Nick {
		return fmt.Errorf("Nick this(%v) Not Equal that(%v)", this.Nick, that1.Nick)
	}
	if this.Sex != that1.Sex {
		return fmt.Errorf("Sex this(%v) Not Equal that(%v)", this.Sex, that1.Sex)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if this.IconBig != that1.IconBig {
		return fmt.Errorf("IconBig this(%v) Not Equal that(%v)", this.IconBig, that1.IconBig)
	}
	if this.City != that1.City {
		return fmt.Errorf("City this(%v) Not Equal that(%v)", this.City, that1.City)
	}
	if this.Sign != that1.Sign {
		return fmt.Errorf("Sign this(%v) Not Equal that(%v)", this.Sign, that1.Sign)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.IconId != that1.IconId {
		return fmt.Errorf("IconId this(%v) Not Equal that(%v)", this.IconId, that1.IconId)
	}
	if this.Phone != that1.Phone {
		return fmt.Errorf("Phone this(%v) Not Equal that(%v)", this.Phone, that1.Phone)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetUserInfoRespData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserInfoRespData)
	if !ok {
		that2, ok := that.(GetUserInfoRespData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nick != that1.Nick {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.IconBig != that1.IconBig {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.Sign != that1.Sign {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.IconId != that1.IconId {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetUserInfoResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetUserInfoResponse)
	if !ok {
		that2, ok := that.(GetUserInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetUserInfoResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetUserInfoResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetUserInfoResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetUserInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserInfoResponse)
	if !ok {
		that2, ok := that.(GetUserInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InsertUserInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pgUser.InsertUserInfoRequest{")
	s = append(s, "Cid: "+fmt.Sprintf("%#v", this.Cid)+",\n")
	s = append(s, "Nick: "+fmt.Sprintf("%#v", this.Nick)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Sign: "+fmt.Sprintf("%#v", this.Sign)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "IconBig: "+fmt.Sprintf("%#v", this.IconBig)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InsertUserInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgUser.InsertUserInfoResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModifyUserInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pgUser.ModifyUserInfoRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "Nick: "+fmt.Sprintf("%#v", this.Nick)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Sign: "+fmt.Sprintf("%#v", this.Sign)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "IconBig: "+fmt.Sprintf("%#v", this.IconBig)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "IconId: "+fmt.Sprintf("%#v", this.IconId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModifyUserInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgUser.ModifyUserInfoResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgUser.GetUserInfoRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserInfoRespData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pgUser.GetUserInfoRespData{")
	s = append(s, "Nick: "+fmt.Sprintf("%#v", this.Nick)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "IconBig: "+fmt.Sprintf("%#v", this.IconBig)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "Sign: "+fmt.Sprintf("%#v", this.Sign)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "IconId: "+fmt.Sprintf("%#v", this.IconId)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgUser.GetUserInfoResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUserbasic(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *InsertUserInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertUserInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(m.Cid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Nick)))
	i += copy(dAtA[i:], m.Nick)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.City)))
	i += copy(dAtA[i:], m.City)
	dAtA[i] = 0x20
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Sign)))
	i += copy(dAtA[i:], m.Sign)
	dAtA[i] = 0x32
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Icon)))
	i += copy(dAtA[i:], m.Icon)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.IconBig)))
	i += copy(dAtA[i:], m.IconBig)
	dAtA[i] = 0x42
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Phone)))
	i += copy(dAtA[i:], m.Phone)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InsertUserInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertUserInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(m.Status))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ModifyUserInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyUserInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Nick)))
	i += copy(dAtA[i:], m.Nick)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.City)))
	i += copy(dAtA[i:], m.City)
	dAtA[i] = 0x20
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Sign)))
	i += copy(dAtA[i:], m.Sign)
	dAtA[i] = 0x32
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Icon)))
	i += copy(dAtA[i:], m.Icon)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.IconBig)))
	i += copy(dAtA[i:], m.IconBig)
	dAtA[i] = 0x42
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Phone)))
	i += copy(dAtA[i:], m.Phone)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.IconId)))
	i += copy(dAtA[i:], m.IconId)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ModifyUserInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyUserInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(m.Status))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUserInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(m.Mid))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUserInfoRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Nick)))
	i += copy(dAtA[i:], m.Nick)
	dAtA[i] = 0x10
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Icon)))
	i += copy(dAtA[i:], m.Icon)
	dAtA[i] = 0x22
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.IconBig)))
	i += copy(dAtA[i:], m.IconBig)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.City)))
	i += copy(dAtA[i:], m.City)
	dAtA[i] = 0x32
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Sign)))
	i += copy(dAtA[i:], m.Sign)
	dAtA[i] = 0x38
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x42
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.IconId)))
	i += copy(dAtA[i:], m.IconId)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Phone)))
	i += copy(dAtA[i:], m.Phone)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUserInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintUserbasic(dAtA, i, uint64(m.Data.Size()))
	n1, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintUserbasic(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedInsertUserInfoRequest(r randyUserbasic, easy bool) *InsertUserInfoRequest {
	this := &InsertUserInfoRequest{}
	this.Cid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Cid *= -1
	}
	this.Nick = string(randStringUserbasic(r))
	this.City = string(randStringUserbasic(r))
	this.Sex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sex *= -1
	}
	this.Sign = string(randStringUserbasic(r))
	this.Icon = string(randStringUserbasic(r))
	this.IconBig = string(randStringUserbasic(r))
	this.Phone = string(randStringUserbasic(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserbasic(r, 9)
	}
	return this
}

func NewPopulatedInsertUserInfoResponse(r randyUserbasic, easy bool) *InsertUserInfoResponse {
	this := &InsertUserInfoResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserbasic(r, 2)
	}
	return this
}

func NewPopulatedModifyUserInfoRequest(r randyUserbasic, easy bool) *ModifyUserInfoRequest {
	this := &ModifyUserInfoRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.Nick = string(randStringUserbasic(r))
	this.City = string(randStringUserbasic(r))
	this.Sex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sex *= -1
	}
	this.Sign = string(randStringUserbasic(r))
	this.Icon = string(randStringUserbasic(r))
	this.IconBig = string(randStringUserbasic(r))
	this.Phone = string(randStringUserbasic(r))
	this.IconId = string(randStringUserbasic(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserbasic(r, 10)
	}
	return this
}

func NewPopulatedModifyUserInfoResponse(r randyUserbasic, easy bool) *ModifyUserInfoResponse {
	this := &ModifyUserInfoResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserbasic(r, 2)
	}
	return this
}

func NewPopulatedGetUserInfoRequest(r randyUserbasic, easy bool) *GetUserInfoRequest {
	this := &GetUserInfoRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserbasic(r, 2)
	}
	return this
}

func NewPopulatedGetUserInfoRespData(r randyUserbasic, easy bool) *GetUserInfoRespData {
	this := &GetUserInfoRespData{}
	this.Nick = string(randStringUserbasic(r))
	this.Sex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sex *= -1
	}
	this.Icon = string(randStringUserbasic(r))
	this.IconBig = string(randStringUserbasic(r))
	this.City = string(randStringUserbasic(r))
	this.Sign = string(randStringUserbasic(r))
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.IconId = string(randStringUserbasic(r))
	this.Phone = string(randStringUserbasic(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserbasic(r, 10)
	}
	return this
}

func NewPopulatedGetUserInfoResponse(r randyUserbasic, easy bool) *GetUserInfoResponse {
	this := &GetUserInfoResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringUserbasic(r))
	v1 := NewPopulatedGetUserInfoRespData(r, easy)
	this.Data = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserbasic(r, 4)
	}
	return this
}

type randyUserbasic interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUserbasic(r randyUserbasic) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUserbasic(r randyUserbasic) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneUserbasic(r)
	}
	return string(tmps)
}
func randUnrecognizedUserbasic(r randyUserbasic, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldUserbasic(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldUserbasic(dAtA []byte, r randyUserbasic, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateUserbasic(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateUserbasic(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateUserbasic(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateUserbasic(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateUserbasic(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateUserbasic(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateUserbasic(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *InsertUserInfoRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUserbasic(uint64(m.Cid))
	l = len(m.Nick)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.City)
	n += 1 + l + sovUserbasic(uint64(l))
	n += 1 + sovUserbasic(uint64(m.Sex))
	l = len(m.Sign)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.Icon)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.IconBig)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.Phone)
	n += 1 + l + sovUserbasic(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InsertUserInfoResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUserbasic(uint64(m.Status))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModifyUserInfoRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUserbasic(uint64(m.Mid))
	l = len(m.Nick)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.City)
	n += 1 + l + sovUserbasic(uint64(l))
	n += 1 + sovUserbasic(uint64(m.Sex))
	l = len(m.Sign)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.Icon)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.IconBig)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.Phone)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.IconId)
	n += 1 + l + sovUserbasic(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModifyUserInfoResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUserbasic(uint64(m.Status))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserInfoRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUserbasic(uint64(m.Mid))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserInfoRespData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nick)
	n += 1 + l + sovUserbasic(uint64(l))
	n += 1 + sovUserbasic(uint64(m.Sex))
	l = len(m.Icon)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.IconBig)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.City)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.Sign)
	n += 1 + l + sovUserbasic(uint64(l))
	n += 1 + sovUserbasic(uint64(m.Status))
	l = len(m.IconId)
	n += 1 + l + sovUserbasic(uint64(l))
	l = len(m.Phone)
	n += 1 + l + sovUserbasic(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserInfoResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUserbasic(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovUserbasic(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovUserbasic(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUserbasic(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUserbasic(x uint64) (n int) {
	return sovUserbasic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InsertUserInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InsertUserInfoRequest{`,
		`Cid:` + fmt.Sprintf("%v", this.Cid) + `,`,
		`Nick:` + fmt.Sprintf("%v", this.Nick) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Sign:` + fmt.Sprintf("%v", this.Sign) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`IconBig:` + fmt.Sprintf("%v", this.IconBig) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InsertUserInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InsertUserInfoResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModifyUserInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModifyUserInfoRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`Nick:` + fmt.Sprintf("%v", this.Nick) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Sign:` + fmt.Sprintf("%v", this.Sign) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`IconBig:` + fmt.Sprintf("%v", this.IconBig) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`IconId:` + fmt.Sprintf("%v", this.IconId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModifyUserInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModifyUserInfoResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserInfoRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserInfoRespData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserInfoRespData{`,
		`Nick:` + fmt.Sprintf("%v", this.Nick) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`IconBig:` + fmt.Sprintf("%v", this.IconBig) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`Sign:` + fmt.Sprintf("%v", this.Sign) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`IconId:` + fmt.Sprintf("%v", this.IconId) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserInfoResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "GetUserInfoRespData", "GetUserInfoRespData", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUserbasic(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InsertUserInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserbasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertUserInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertUserInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconBig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconBig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserbasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserbasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertUserInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserbasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertUserInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertUserInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserbasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserbasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyUserInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserbasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyUserInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyUserInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconBig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconBig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserbasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserbasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyUserInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserbasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyUserInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyUserInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserbasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserbasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserbasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserbasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserbasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserbasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconBig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconBig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserbasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserbasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserbasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserbasic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserbasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserbasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserbasic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserbasic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserbasic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUserbasic
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUserbasic
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUserbasic(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUserbasic = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserbasic   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("user/userbasic.proto", fileDescriptorUserbasic) }

var fileDescriptorUserbasic = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x94, 0x3f, 0x6f, 0x13, 0x31,
	0x18, 0xc6, 0xfb, 0xe6, 0x7f, 0xcc, 0x66, 0x68, 0x65, 0x15, 0xe4, 0x46, 0x99, 0x32, 0x54, 0x89,
	0x84, 0x80, 0x0f, 0x10, 0x21, 0xa1, 0x0c, 0x2c, 0x95, 0x98, 0xd1, 0xfd, 0x71, 0x5c, 0x0b, 0xc5,
	0x3e, 0xce, 0x3e, 0xd4, 0x6e, 0x88, 0x8d, 0x85, 0xcf, 0xc1, 0x47, 0x60, 0x64, 0xec, 0xc8, 0xc8,
	0x84, 0x7a, 0xb7, 0xb2, 0x30, 0x32, 0xa2, 0xd7, 0xb9, 0xa3, 0xd7, 0x38, 0x12, 0x5d, 0x59, 0xce,
	0xe7, 0xe7, 0x79, 0xfd, 0xea, 0xde, 0xdf, 0x63, 0x1d, 0x79, 0x50, 0x58, 0x91, 0x2f, 0xf0, 0x11,
	0x47, 0x56, 0x25, 0xf3, 0x2c, 0x37, 0xce, 0xd0, 0x41, 0x26, 0x5f, 0x59, 0x91, 0x1f, 0x3f, 0x79,
	0x27, 0x74, 0x6a, 0xf2, 0x85, 0x54, 0xee, 0xbc, 0x88, 0xe7, 0x89, 0xd9, 0x2c, 0xa4, 0x91, 0x66,
	0xe1, 0xab, 0xe2, 0x62, 0xed, 0x77, 0x7e, 0xe3, 0xdf, 0xb6, 0xa7, 0xa7, 0x3f, 0x81, 0x1c, 0xae,
	0xb4, 0x15, 0xb9, 0xc3, 0x26, 0x2b, 0xbd, 0x36, 0x67, 0xe2, 0x6d, 0x21, 0xac, 0xa3, 0x47, 0xa4,
	0x9b, 0xa8, 0x94, 0xc1, 0x04, 0x66, 0xdd, 0x65, 0xef, 0xea, 0xc7, 0xc9, 0xc1, 0x19, 0x0a, 0x94,
	0x91, 0x9e, 0x56, 0xc9, 0x1b, 0xd6, 0x99, 0xc0, 0x6c, 0x5c, 0x1b, 0x5e, 0x41, 0x27, 0x51, 0xee,
	0x92, 0x75, 0xdb, 0x0e, 0x2a, 0xd8, 0xcb, 0x8a, 0x0b, 0xd6, 0x9b, 0xc0, 0xac, 0xdf, 0xf4, 0xb2,
	0xe2, 0x02, 0x4f, 0x58, 0x25, 0x35, 0xeb, 0xb7, 0x4f, 0xa0, 0x82, 0x8e, 0x4a, 0x8c, 0x66, 0x83,
	0xb6, 0x83, 0x0a, 0xe5, 0x64, 0x88, 0xeb, 0x52, 0x49, 0x36, 0x6c, 0x99, 0x8d, 0x48, 0x8f, 0x49,
	0x3f, 0x3b, 0x37, 0x5a, 0xb0, 0x51, 0xcb, 0xdd, 0x4a, 0xd3, 0x67, 0xe4, 0x68, 0x77, 0x58, 0x9b,
	0x19, 0x6d, 0x05, 0x7d, 0x44, 0x06, 0xd6, 0x45, 0xae, 0xb0, 0x7e, 0xe0, 0xe6, 0x23, 0x6b, 0x6d,
	0xfa, 0xb1, 0x43, 0x0e, 0x5f, 0x9a, 0x54, 0xad, 0x2f, 0xf7, 0x50, 0xda, 0xec, 0x52, 0xda, 0xfc,
	0xdf, 0x94, 0x90, 0x05, 0x96, 0xad, 0x52, 0x36, 0x6e, 0x99, 0xb5, 0x86, 0x0c, 0x77, 0x51, 0xdc,
	0x89, 0xe1, 0x29, 0xa1, 0x2f, 0x84, 0xbb, 0x23, 0xbf, 0xe9, 0xa7, 0x0e, 0xb9, 0x7f, 0xab, 0xdc,
	0x66, 0xcf, 0x23, 0x17, 0xfd, 0xe5, 0x0a, 0x01, 0xd7, 0x9a, 0x5e, 0x67, 0x0f, 0x3d, 0xcf, 0xa8,
	0x1b, 0x30, 0x3a, 0x21, 0x23, 0x5c, 0x5f, 0xc7, 0x4a, 0x7a, 0xe8, 0x01, 0xa4, 0x26, 0xaa, 0x7e,
	0x10, 0x55, 0x13, 0xc9, 0x20, 0x88, 0xe4, 0x06, 0xc2, 0x30, 0x84, 0xd0, 0x42, 0x3b, 0x0a, 0xd1,
	0xde, 0x84, 0x32, 0x0e, 0xaf, 0xee, 0x07, 0x08, 0x80, 0xfc, 0x1b, 0xba, 0xc7, 0x6b, 0xe5, 0xad,
	0x5b, 0x88, 0x02, 0x7d, 0x4a, 0x7a, 0x69, 0xe4, 0x22, 0x0f, 0xe5, 0xde, 0xe3, 0x87, 0xf3, 0xed,
	0x3f, 0x64, 0xbe, 0x87, 0x78, 0x33, 0x1c, 0x96, 0x2f, 0x4f, 0xbf, 0x97, 0xfc, 0xe0, 0xba, 0xe4,
	0xf0, 0xab, 0xe4, 0xf0, 0xbb, 0xe4, 0xf0, 0xbe, 0xe2, 0xf0, 0xb9, 0xe2, 0xf0, 0xa5, 0xe2, 0xf0,
	0xb5, 0xe2, 0x70, 0x55, 0x71, 0xf8, 0x56, 0x71, 0xb8, 0xae, 0x38, 0xfc, 0x09, 0x00, 0x00, 0xff,
	0xff, 0x53, 0xa1, 0x76, 0xbe, 0xb0, 0x04, 0x00, 0x00,
}
