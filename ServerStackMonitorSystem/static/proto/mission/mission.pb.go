// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mission.proto

/*
	Package pgMission is a generated protocol buffer package.

	It is generated from these files:
		mission.proto

	It has these top-level messages:
		MissionListRequest
		MissionListResData
		MissionListResponse
*/
package pgMission

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MissionListRequest struct {
	App              int32  `protobuf:"varint,1,req,name=app" json:"app"`
	AreaId           int32  `protobuf:"varint,2,req,name=area_id,json=areaId" json:"area_id"`
	Mid              int64  `protobuf:"varint,3,req,name=mid" json:"mid"`
	ApiVer           string `protobuf:"bytes,4,req,name=api_ver,json=apiVer" json:"api_ver"`
	HallVer          int64  `protobuf:"varint,5,req,name=hall_ver,json=hallVer" json:"hall_ver"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MissionListRequest) Reset()                    { *m = MissionListRequest{} }
func (*MissionListRequest) ProtoMessage()               {}
func (*MissionListRequest) Descriptor() ([]byte, []int) { return fileDescriptorMission, []int{0} }

func (m *MissionListRequest) GetApp() int32 {
	if m != nil {
		return m.App
	}
	return 0
}

func (m *MissionListRequest) GetAreaId() int32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *MissionListRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *MissionListRequest) GetApiVer() string {
	if m != nil {
		return m.ApiVer
	}
	return ""
}

func (m *MissionListRequest) GetHallVer() int64 {
	if m != nil {
		return m.HallVer
	}
	return 0
}

type MissionListResData struct {
	Id               int32  `protobuf:"varint,1,req,name=id" json:"id"`
	Name             string `protobuf:"bytes,2,req,name=name" json:"name"`
	Desc             string `protobuf:"bytes,3,req,name=desc" json:"desc"`
	Icon             string `protobuf:"bytes,4,req,name=icon" json:"icon"`
	Reward           int32  `protobuf:"varint,5,req,name=reward" json:"reward"`
	RewardTyppe      int32  `protobuf:"varint,6,req,name=reward_typpe,json=rewardTyppe" json:"reward_typpe"`
	SortOrder        int32  `protobuf:"varint,7,req,name=sort_order,json=sortOrder" json:"sort_order"`
	Progress         string `protobuf:"bytes,8,req,name=progress" json:"progress"`
	JumpCode         string `protobuf:"bytes,9,req,name=jump_code,json=jumpCode" json:"jump_code"`
	Status           int32  `protobuf:"varint,10,req,name=status" json:"status"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MissionListResData) Reset()                    { *m = MissionListResData{} }
func (*MissionListResData) ProtoMessage()               {}
func (*MissionListResData) Descriptor() ([]byte, []int) { return fileDescriptorMission, []int{1} }

func (m *MissionListResData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MissionListResData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MissionListResData) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MissionListResData) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *MissionListResData) GetReward() int32 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (m *MissionListResData) GetRewardTyppe() int32 {
	if m != nil {
		return m.RewardTyppe
	}
	return 0
}

func (m *MissionListResData) GetSortOrder() int32 {
	if m != nil {
		return m.SortOrder
	}
	return 0
}

func (m *MissionListResData) GetProgress() string {
	if m != nil {
		return m.Progress
	}
	return ""
}

func (m *MissionListResData) GetJumpCode() string {
	if m != nil {
		return m.JumpCode
	}
	return ""
}

func (m *MissionListResData) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type MissionListResponse struct {
	Status           int32              `protobuf:"varint,1,req,name=status" json:"status"`
	Msg              string             `protobuf:"bytes,2,req,name=msg" json:"msg"`
	Data             MissionListResData `protobuf:"bytes,3,req,name=data" json:"data"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *MissionListResponse) Reset()                    { *m = MissionListResponse{} }
func (*MissionListResponse) ProtoMessage()               {}
func (*MissionListResponse) Descriptor() ([]byte, []int) { return fileDescriptorMission, []int{2} }

func (m *MissionListResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MissionListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MissionListResponse) GetData() MissionListResData {
	if m != nil {
		return m.Data
	}
	return MissionListResData{}
}

func init() {
	proto.RegisterType((*MissionListRequest)(nil), "pgMission.MissionListRequest")
	proto.RegisterType((*MissionListResData)(nil), "pgMission.MissionListResData")
	proto.RegisterType((*MissionListResponse)(nil), "pgMission.MissionListResponse")
}
func (this *MissionListRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MissionListRequest)
	if !ok {
		that2, ok := that.(MissionListRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MissionListRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MissionListRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MissionListRequest but is not nil && this == nil")
	}
	if this.App != that1.App {
		return fmt.Errorf("App this(%v) Not Equal that(%v)", this.App, that1.App)
	}
	if this.AreaId != that1.AreaId {
		return fmt.Errorf("AreaId this(%v) Not Equal that(%v)", this.AreaId, that1.AreaId)
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.ApiVer != that1.ApiVer {
		return fmt.Errorf("ApiVer this(%v) Not Equal that(%v)", this.ApiVer, that1.ApiVer)
	}
	if this.HallVer != that1.HallVer {
		return fmt.Errorf("HallVer this(%v) Not Equal that(%v)", this.HallVer, that1.HallVer)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *MissionListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MissionListRequest)
	if !ok {
		that2, ok := that.(MissionListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.App != that1.App {
		return false
	}
	if this.AreaId != that1.AreaId {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.ApiVer != that1.ApiVer {
		return false
	}
	if this.HallVer != that1.HallVer {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MissionListResData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MissionListResData)
	if !ok {
		that2, ok := that.(MissionListResData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MissionListResData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MissionListResData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MissionListResData but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Desc != that1.Desc {
		return fmt.Errorf("Desc this(%v) Not Equal that(%v)", this.Desc, that1.Desc)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if this.Reward != that1.Reward {
		return fmt.Errorf("Reward this(%v) Not Equal that(%v)", this.Reward, that1.Reward)
	}
	if this.RewardTyppe != that1.RewardTyppe {
		return fmt.Errorf("RewardTyppe this(%v) Not Equal that(%v)", this.RewardTyppe, that1.RewardTyppe)
	}
	if this.SortOrder != that1.SortOrder {
		return fmt.Errorf("SortOrder this(%v) Not Equal that(%v)", this.SortOrder, that1.SortOrder)
	}
	if this.Progress != that1.Progress {
		return fmt.Errorf("Progress this(%v) Not Equal that(%v)", this.Progress, that1.Progress)
	}
	if this.JumpCode != that1.JumpCode {
		return fmt.Errorf("JumpCode this(%v) Not Equal that(%v)", this.JumpCode, that1.JumpCode)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *MissionListResData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MissionListResData)
	if !ok {
		that2, ok := that.(MissionListResData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.Reward != that1.Reward {
		return false
	}
	if this.RewardTyppe != that1.RewardTyppe {
		return false
	}
	if this.SortOrder != that1.SortOrder {
		return false
	}
	if this.Progress != that1.Progress {
		return false
	}
	if this.JumpCode != that1.JumpCode {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MissionListResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MissionListResponse)
	if !ok {
		that2, ok := that.(MissionListResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MissionListResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MissionListResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MissionListResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *MissionListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MissionListResponse)
	if !ok {
		that2, ok := that.(MissionListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MissionListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pgMission.MissionListRequest{")
	s = append(s, "App: "+fmt.Sprintf("%#v", this.App)+",\n")
	s = append(s, "AreaId: "+fmt.Sprintf("%#v", this.AreaId)+",\n")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "ApiVer: "+fmt.Sprintf("%#v", this.ApiVer)+",\n")
	s = append(s, "HallVer: "+fmt.Sprintf("%#v", this.HallVer)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MissionListResData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pgMission.MissionListResData{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Desc: "+fmt.Sprintf("%#v", this.Desc)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "Reward: "+fmt.Sprintf("%#v", this.Reward)+",\n")
	s = append(s, "RewardTyppe: "+fmt.Sprintf("%#v", this.RewardTyppe)+",\n")
	s = append(s, "SortOrder: "+fmt.Sprintf("%#v", this.SortOrder)+",\n")
	s = append(s, "Progress: "+fmt.Sprintf("%#v", this.Progress)+",\n")
	s = append(s, "JumpCode: "+fmt.Sprintf("%#v", this.JumpCode)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MissionListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgMission.MissionListResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMission(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MissionListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMission(dAtA, i, uint64(m.App))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMission(dAtA, i, uint64(m.AreaId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMission(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x22
	i++
	i = encodeVarintMission(dAtA, i, uint64(len(m.ApiVer)))
	i += copy(dAtA[i:], m.ApiVer)
	dAtA[i] = 0x28
	i++
	i = encodeVarintMission(dAtA, i, uint64(m.HallVer))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MissionListResData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionListResData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMission(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMission(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMission(dAtA, i, uint64(len(m.Desc)))
	i += copy(dAtA[i:], m.Desc)
	dAtA[i] = 0x22
	i++
	i = encodeVarintMission(dAtA, i, uint64(len(m.Icon)))
	i += copy(dAtA[i:], m.Icon)
	dAtA[i] = 0x28
	i++
	i = encodeVarintMission(dAtA, i, uint64(m.Reward))
	dAtA[i] = 0x30
	i++
	i = encodeVarintMission(dAtA, i, uint64(m.RewardTyppe))
	dAtA[i] = 0x38
	i++
	i = encodeVarintMission(dAtA, i, uint64(m.SortOrder))
	dAtA[i] = 0x42
	i++
	i = encodeVarintMission(dAtA, i, uint64(len(m.Progress)))
	i += copy(dAtA[i:], m.Progress)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintMission(dAtA, i, uint64(len(m.JumpCode)))
	i += copy(dAtA[i:], m.JumpCode)
	dAtA[i] = 0x50
	i++
	i = encodeVarintMission(dAtA, i, uint64(m.Status))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MissionListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMission(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintMission(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMission(dAtA, i, uint64(m.Data.Size()))
	n1, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMission(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMissionListRequest(r randyMission, easy bool) *MissionListRequest {
	this := &MissionListRequest{}
	this.App = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.App *= -1
	}
	this.AreaId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.AreaId *= -1
	}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.ApiVer = string(randStringMission(r))
	this.HallVer = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.HallVer *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMission(r, 6)
	}
	return this
}

func NewPopulatedMissionListResData(r randyMission, easy bool) *MissionListResData {
	this := &MissionListResData{}
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Name = string(randStringMission(r))
	this.Desc = string(randStringMission(r))
	this.Icon = string(randStringMission(r))
	this.Reward = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Reward *= -1
	}
	this.RewardTyppe = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.RewardTyppe *= -1
	}
	this.SortOrder = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.SortOrder *= -1
	}
	this.Progress = string(randStringMission(r))
	this.JumpCode = string(randStringMission(r))
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMission(r, 11)
	}
	return this
}

func NewPopulatedMissionListResponse(r randyMission, easy bool) *MissionListResponse {
	this := &MissionListResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringMission(r))
	v1 := NewPopulatedMissionListResData(r, easy)
	this.Data = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMission(r, 4)
	}
	return this
}

type randyMission interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMission(r randyMission) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMission(r randyMission) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneMission(r)
	}
	return string(tmps)
}
func randUnrecognizedMission(r randyMission, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMission(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMission(dAtA []byte, r randyMission, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMission(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateMission(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateMission(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMission(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMission(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMission(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMission(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *MissionListRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMission(uint64(m.App))
	n += 1 + sovMission(uint64(m.AreaId))
	n += 1 + sovMission(uint64(m.Mid))
	l = len(m.ApiVer)
	n += 1 + l + sovMission(uint64(l))
	n += 1 + sovMission(uint64(m.HallVer))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MissionListResData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMission(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovMission(uint64(l))
	l = len(m.Desc)
	n += 1 + l + sovMission(uint64(l))
	l = len(m.Icon)
	n += 1 + l + sovMission(uint64(l))
	n += 1 + sovMission(uint64(m.Reward))
	n += 1 + sovMission(uint64(m.RewardTyppe))
	n += 1 + sovMission(uint64(m.SortOrder))
	l = len(m.Progress)
	n += 1 + l + sovMission(uint64(l))
	l = len(m.JumpCode)
	n += 1 + l + sovMission(uint64(l))
	n += 1 + sovMission(uint64(m.Status))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MissionListResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMission(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovMission(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovMission(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMission(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMission(x uint64) (n int) {
	return sovMission(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MissionListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MissionListRequest{`,
		`App:` + fmt.Sprintf("%v", this.App) + `,`,
		`AreaId:` + fmt.Sprintf("%v", this.AreaId) + `,`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`ApiVer:` + fmt.Sprintf("%v", this.ApiVer) + `,`,
		`HallVer:` + fmt.Sprintf("%v", this.HallVer) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MissionListResData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MissionListResData{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`Reward:` + fmt.Sprintf("%v", this.Reward) + `,`,
		`RewardTyppe:` + fmt.Sprintf("%v", this.RewardTyppe) + `,`,
		`SortOrder:` + fmt.Sprintf("%v", this.SortOrder) + `,`,
		`Progress:` + fmt.Sprintf("%v", this.Progress) + `,`,
		`JumpCode:` + fmt.Sprintf("%v", this.JumpCode) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MissionListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MissionListResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "MissionListResData", "MissionListResData", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMission(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MissionListRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			m.App = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.App |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			m.AreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallVer", wireType)
			}
			m.HallVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HallVer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("app")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("area_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("api_ver")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("hall_ver")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissionListResData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionListResData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionListResData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			m.Reward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reward |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardTyppe", wireType)
			}
			m.RewardTyppe = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardTyppe |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			m.SortOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortOrder |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000200)
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("desc")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("icon")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("reward")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("reward_typpe")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("sort_order")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return proto.NewRequiredNotSetError("progress")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return proto.NewRequiredNotSetError("jump_code")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return proto.NewRequiredNotSetError("status")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissionListResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMission
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMission
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMission
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipMission(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMission
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("msg")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMission(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMission
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMission
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMission
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMission
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMission
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMission(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMission = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMission   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mission.proto", fileDescriptorMission) }

var fileDescriptorMission = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x31, 0x6f, 0xd4, 0x30,
	0x1c, 0xc5, 0xeb, 0xdc, 0xf5, 0xee, 0xf2, 0x2f, 0x2c, 0x06, 0x21, 0x0b, 0x51, 0x37, 0x1c, 0x03,
	0x37, 0x40, 0x2a, 0xb1, 0xb0, 0x03, 0x0b, 0x12, 0x08, 0xa9, 0x42, 0x5d, 0x23, 0x37, 0x36, 0xa9,
	0x51, 0x13, 0x1b, 0xdb, 0x01, 0xb1, 0x31, 0xf0, 0x4d, 0x58, 0xf8, 0x08, 0x8c, 0x6c, 0x74, 0x64,
	0x64, 0x42, 0x4d, 0x3e, 0x01, 0x23, 0x23, 0xb2, 0x43, 0x23, 0xa7, 0xb7, 0xfd, 0xfd, 0x7b, 0xff,
	0xa7, 0xbc, 0x3c, 0x1b, 0xae, 0xd7, 0xd2, 0x5a, 0xa9, 0x9a, 0x5c, 0x1b, 0xe5, 0x14, 0x4e, 0x75,
	0xf5, 0x72, 0x00, 0xb7, 0x1f, 0x56, 0xd2, 0x9d, 0xb6, 0x27, 0x79, 0xa9, 0xea, 0xc3, 0x4a, 0x55,
	0xea, 0x30, 0x6c, 0x9c, 0xb4, 0x6f, 0xc2, 0x29, 0x1c, 0xc2, 0x34, 0x38, 0xd7, 0x5f, 0x10, 0xe0,
	0xff, 0xd6, 0x17, 0xd2, 0xba, 0x23, 0xf1, 0xae, 0x15, 0xd6, 0xe1, 0x5b, 0x30, 0x63, 0x5a, 0x13,
	0x94, 0x25, 0x9b, 0xdd, 0x27, 0xf3, 0xf3, 0xdf, 0x07, 0x3b, 0x47, 0x1e, 0xe0, 0x7d, 0x58, 0x32,
	0x23, 0x58, 0x21, 0x39, 0x49, 0x22, 0x6d, 0xe1, 0xe1, 0x73, 0xee, 0x6d, 0xb5, 0xe4, 0x64, 0x96,
	0x25, 0x9b, 0xd9, 0xa5, 0xad, 0x96, 0x3c, 0xd8, 0xb4, 0x2c, 0xde, 0x0b, 0x43, 0xe6, 0x59, 0xb2,
	0x49, 0x47, 0x9b, 0x96, 0xc7, 0xc2, 0xe0, 0x03, 0x58, 0x9d, 0xb2, 0xb3, 0xb3, 0xa0, 0xef, 0x46,
	0xde, 0xa5, 0xa7, 0xc7, 0xc2, 0xac, 0x7f, 0x24, 0x57, 0x52, 0xda, 0x67, 0xcc, 0x31, 0x7c, 0x13,
	0x12, 0xc9, 0x27, 0x21, 0x13, 0xc9, 0x31, 0x81, 0x79, 0xc3, 0x6a, 0x11, 0x02, 0x5e, 0x7e, 0x29,
	0x10, 0xaf, 0x70, 0x61, 0xcb, 0x90, 0x6f, 0x54, 0x3c, 0xf1, 0x8a, 0x2c, 0x55, 0x33, 0x49, 0x17,
	0x08, 0xbe, 0x03, 0x0b, 0x23, 0x3e, 0x30, 0xc3, 0x43, 0xb2, 0xf1, 0x87, 0x07, 0x86, 0xef, 0xc3,
	0xb5, 0x61, 0x2a, 0xdc, 0x47, 0xad, 0x05, 0x59, 0x44, 0x3b, 0x7b, 0x83, 0xf2, 0xda, 0x0b, 0xf8,
	0x1e, 0x80, 0x55, 0xc6, 0x15, 0xca, 0x70, 0x61, 0xc8, 0x32, 0x5a, 0x4b, 0x3d, 0x7f, 0xe5, 0x31,
	0xce, 0x60, 0xa5, 0x8d, 0xaa, 0x8c, 0xb0, 0x96, 0xac, 0xa2, 0x24, 0x23, 0xc5, 0x77, 0x21, 0x7d,
	0xdb, 0xd6, 0xba, 0x28, 0x15, 0x17, 0x24, 0x8d, 0x57, 0x3c, 0x7e, 0xaa, 0xb8, 0xf0, 0x81, 0xad,
	0x63, 0xae, 0xb5, 0x04, 0xe2, 0xc0, 0x03, 0x5b, 0x7f, 0x46, 0x70, 0x63, 0xda, 0xa4, 0x56, 0x8d,
	0x8d, 0x5d, 0x68, 0xdb, 0x15, 0xee, 0xd5, 0x56, 0x93, 0x46, 0x3d, 0xc0, 0x8f, 0x61, 0xce, 0x99,
	0x63, 0xa1, 0xd0, 0xbd, 0x47, 0xfb, 0xf9, 0xf8, 0x0c, 0xf3, 0xed, 0xdb, 0x1a, 0xfb, 0xf6, 0xf3,
	0x83, 0x5f, 0x1d, 0xdd, 0xb9, 0xe8, 0x28, 0xfa, 0xd3, 0x51, 0xf4, 0xb7, 0xa3, 0xe8, 0x53, 0x4f,
	0xd1, 0xd7, 0x9e, 0xa2, 0x6f, 0x3d, 0x45, 0xdf, 0x7b, 0x8a, 0xce, 0x7b, 0x8a, 0x7e, 0xf6, 0x14,
	0x5d, 0xf4, 0x14, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x95, 0x7c, 0x44, 0xbc, 0xee, 0x02, 0x00,
	0x00,
}
