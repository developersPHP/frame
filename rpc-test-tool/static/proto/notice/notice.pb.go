// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: notice/notice.proto

/*
	Package pgNotice is a generated protocol buffer package.

	It is generated from these files:
		notice/notice.proto

	It has these top-level messages:
		GetListRequest
		GetListResData
		GetListConditions
		GetListPertime
		GetListResponse
*/
package pgNotice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetListRequest struct {
	App              int32  `protobuf:"varint,1,req,name=app" json:"app"`
	Mid              int64  `protobuf:"varint,2,req,name=mid" json:"mid"`
	Version          string `protobuf:"bytes,3,opt,name=version" json:"version"`
	HallVersion      int64  `protobuf:"varint,4,opt,name=hall_version,json=hallVersion" json:"hall_version"`
	CliVer           int64  `protobuf:"varint,5,opt,name=cli_ver,json=cliVer" json:"cli_ver"`
	AreaId           int32  `protobuf:"varint,6,opt,name=area_id,json=areaId" json:"area_id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetListRequest) Reset()                    { *m = GetListRequest{} }
func (*GetListRequest) ProtoMessage()               {}
func (*GetListRequest) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{0} }

func (m *GetListRequest) GetApp() int32 {
	if m != nil {
		return m.App
	}
	return 0
}

func (m *GetListRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *GetListRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetListRequest) GetHallVersion() int64 {
	if m != nil {
		return m.HallVersion
	}
	return 0
}

func (m *GetListRequest) GetCliVer() int64 {
	if m != nil {
		return m.CliVer
	}
	return 0
}

func (m *GetListRequest) GetAreaId() int32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

type GetListResData struct {
	NoticeId         int32             `protobuf:"varint,1,req,name=notice_id,json=noticeId" json:"notice_id"`
	NoticeType       int32             `protobuf:"varint,2,req,name=notice_type,json=noticeType" json:"notice_type"`
	AppId            int32             `protobuf:"varint,3,req,name=app_id,json=appId" json:"app_id"`
	Weight           int32             `protobuf:"varint,4,req,name=weight" json:"weight"`
	Title            string            `protobuf:"bytes,5,req,name=title" json:"title"`
	Content          string            `protobuf:"bytes,6,req,name=content" json:"content"`
	StartTime        string            `protobuf:"bytes,7,req,name=start_time,json=startTime" json:"start_time"`
	EndTime          string            `protobuf:"bytes,8,req,name=end_time,json=endTime" json:"end_time"`
	Conditions       GetListConditions `protobuf:"bytes,9,opt,name=conditions" json:"conditions"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GetListResData) Reset()                    { *m = GetListResData{} }
func (*GetListResData) ProtoMessage()               {}
func (*GetListResData) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{1} }

func (m *GetListResData) GetNoticeId() int32 {
	if m != nil {
		return m.NoticeId
	}
	return 0
}

func (m *GetListResData) GetNoticeType() int32 {
	if m != nil {
		return m.NoticeType
	}
	return 0
}

func (m *GetListResData) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *GetListResData) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *GetListResData) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetListResData) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *GetListResData) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *GetListResData) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *GetListResData) GetConditions() GetListConditions {
	if m != nil {
		return m.Conditions
	}
	return GetListConditions{}
}

type GetListConditions struct {
	Sendtype         int32          `protobuf:"varint,1,req,name=sendtype" json:"sendtype"`
	Poptype          int32          `protobuf:"varint,2,req,name=poptype" json:"poptype"`
	Islogined        int32          `protobuf:"varint,3,req,name=islogined" json:"islogined"`
	Week             int32          `protobuf:"varint,4,req,name=week" json:"week"`
	Pertime          GetListPertime `protobuf:"bytes,5,req,name=pertime" json:"pertime"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *GetListConditions) Reset()                    { *m = GetListConditions{} }
func (*GetListConditions) ProtoMessage()               {}
func (*GetListConditions) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{2} }

func (m *GetListConditions) GetSendtype() int32 {
	if m != nil {
		return m.Sendtype
	}
	return 0
}

func (m *GetListConditions) GetPoptype() int32 {
	if m != nil {
		return m.Poptype
	}
	return 0
}

func (m *GetListConditions) GetIslogined() int32 {
	if m != nil {
		return m.Islogined
	}
	return 0
}

func (m *GetListConditions) GetWeek() int32 {
	if m != nil {
		return m.Week
	}
	return 0
}

func (m *GetListConditions) GetPertime() GetListPertime {
	if m != nil {
		return m.Pertime
	}
	return GetListPertime{}
}

type GetListPertime struct {
	Stime            string `protobuf:"bytes,1,req,name=stime" json:"stime"`
	Etime            string `protobuf:"bytes,2,req,name=etime" json:"etime"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetListPertime) Reset()                    { *m = GetListPertime{} }
func (*GetListPertime) ProtoMessage()               {}
func (*GetListPertime) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{3} }

func (m *GetListPertime) GetStime() string {
	if m != nil {
		return m.Stime
	}
	return ""
}

func (m *GetListPertime) GetEtime() string {
	if m != nil {
		return m.Etime
	}
	return ""
}

type GetListResponse struct {
	Isrefresh        int32          `protobuf:"varint,1,req,name=isrefresh" json:"isrefresh"`
	Idlist           int32          `protobuf:"varint,2,req,name=idlist" json:"idlist"`
	SvrVer           int64          `protobuf:"varint,3,req,name=svr_ver,json=svrVer" json:"svr_ver"`
	Svrtime          int64          `protobuf:"varint,4,req,name=svrtime" json:"svrtime"`
	Data             GetListResData `protobuf:"bytes,5,req,name=Data" json:"Data"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *GetListResponse) Reset()                    { *m = GetListResponse{} }
func (*GetListResponse) ProtoMessage()               {}
func (*GetListResponse) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{4} }

func (m *GetListResponse) GetIsrefresh() int32 {
	if m != nil {
		return m.Isrefresh
	}
	return 0
}

func (m *GetListResponse) GetIdlist() int32 {
	if m != nil {
		return m.Idlist
	}
	return 0
}

func (m *GetListResponse) GetSvrVer() int64 {
	if m != nil {
		return m.SvrVer
	}
	return 0
}

func (m *GetListResponse) GetSvrtime() int64 {
	if m != nil {
		return m.Svrtime
	}
	return 0
}

func (m *GetListResponse) GetData() GetListResData {
	if m != nil {
		return m.Data
	}
	return GetListResData{}
}

func init() {
	proto.RegisterType((*GetListRequest)(nil), "pgNotice.GetListRequest")
	proto.RegisterType((*GetListResData)(nil), "pgNotice.GetListResData")
	proto.RegisterType((*GetListConditions)(nil), "pgNotice.GetListConditions")
	proto.RegisterType((*GetListPertime)(nil), "pgNotice.GetListPertime")
	proto.RegisterType((*GetListResponse)(nil), "pgNotice.GetListResponse")
}
func (this *GetListRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetListRequest)
	if !ok {
		that2, ok := that.(GetListRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetListRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetListRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetListRequest but is not nil && this == nil")
	}
	if this.App != that1.App {
		return fmt.Errorf("App this(%v) Not Equal that(%v)", this.App, that1.App)
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if this.HallVersion != that1.HallVersion {
		return fmt.Errorf("HallVersion this(%v) Not Equal that(%v)", this.HallVersion, that1.HallVersion)
	}
	if this.CliVer != that1.CliVer {
		return fmt.Errorf("CliVer this(%v) Not Equal that(%v)", this.CliVer, that1.CliVer)
	}
	if this.AreaId != that1.AreaId {
		return fmt.Errorf("AreaId this(%v) Not Equal that(%v)", this.AreaId, that1.AreaId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetListRequest)
	if !ok {
		that2, ok := that.(GetListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.App != that1.App {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.HallVersion != that1.HallVersion {
		return false
	}
	if this.CliVer != that1.CliVer {
		return false
	}
	if this.AreaId != that1.AreaId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetListResData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetListResData)
	if !ok {
		that2, ok := that.(GetListResData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetListResData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetListResData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetListResData but is not nil && this == nil")
	}
	if this.NoticeId != that1.NoticeId {
		return fmt.Errorf("NoticeId this(%v) Not Equal that(%v)", this.NoticeId, that1.NoticeId)
	}
	if this.NoticeType != that1.NoticeType {
		return fmt.Errorf("NoticeType this(%v) Not Equal that(%v)", this.NoticeType, that1.NoticeType)
	}
	if this.AppId != that1.AppId {
		return fmt.Errorf("AppId this(%v) Not Equal that(%v)", this.AppId, that1.AppId)
	}
	if this.Weight != that1.Weight {
		return fmt.Errorf("Weight this(%v) Not Equal that(%v)", this.Weight, that1.Weight)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Content != that1.Content {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	if this.StartTime != that1.StartTime {
		return fmt.Errorf("StartTime this(%v) Not Equal that(%v)", this.StartTime, that1.StartTime)
	}
	if this.EndTime != that1.EndTime {
		return fmt.Errorf("EndTime this(%v) Not Equal that(%v)", this.EndTime, that1.EndTime)
	}
	if !this.Conditions.Equal(&that1.Conditions) {
		return fmt.Errorf("Conditions this(%v) Not Equal that(%v)", this.Conditions, that1.Conditions)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetListResData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetListResData)
	if !ok {
		that2, ok := that.(GetListResData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NoticeId != that1.NoticeId {
		return false
	}
	if this.NoticeType != that1.NoticeType {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if !this.Conditions.Equal(&that1.Conditions) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetListConditions) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetListConditions)
	if !ok {
		that2, ok := that.(GetListConditions)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetListConditions")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetListConditions but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetListConditions but is not nil && this == nil")
	}
	if this.Sendtype != that1.Sendtype {
		return fmt.Errorf("Sendtype this(%v) Not Equal that(%v)", this.Sendtype, that1.Sendtype)
	}
	if this.Poptype != that1.Poptype {
		return fmt.Errorf("Poptype this(%v) Not Equal that(%v)", this.Poptype, that1.Poptype)
	}
	if this.Islogined != that1.Islogined {
		return fmt.Errorf("Islogined this(%v) Not Equal that(%v)", this.Islogined, that1.Islogined)
	}
	if this.Week != that1.Week {
		return fmt.Errorf("Week this(%v) Not Equal that(%v)", this.Week, that1.Week)
	}
	if !this.Pertime.Equal(&that1.Pertime) {
		return fmt.Errorf("Pertime this(%v) Not Equal that(%v)", this.Pertime, that1.Pertime)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetListConditions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetListConditions)
	if !ok {
		that2, ok := that.(GetListConditions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sendtype != that1.Sendtype {
		return false
	}
	if this.Poptype != that1.Poptype {
		return false
	}
	if this.Islogined != that1.Islogined {
		return false
	}
	if this.Week != that1.Week {
		return false
	}
	if !this.Pertime.Equal(&that1.Pertime) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetListPertime) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetListPertime)
	if !ok {
		that2, ok := that.(GetListPertime)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetListPertime")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetListPertime but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetListPertime but is not nil && this == nil")
	}
	if this.Stime != that1.Stime {
		return fmt.Errorf("Stime this(%v) Not Equal that(%v)", this.Stime, that1.Stime)
	}
	if this.Etime != that1.Etime {
		return fmt.Errorf("Etime this(%v) Not Equal that(%v)", this.Etime, that1.Etime)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetListPertime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetListPertime)
	if !ok {
		that2, ok := that.(GetListPertime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Stime != that1.Stime {
		return false
	}
	if this.Etime != that1.Etime {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetListResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetListResponse)
	if !ok {
		that2, ok := that.(GetListResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetListResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetListResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetListResponse but is not nil && this == nil")
	}
	if this.Isrefresh != that1.Isrefresh {
		return fmt.Errorf("Isrefresh this(%v) Not Equal that(%v)", this.Isrefresh, that1.Isrefresh)
	}
	if this.Idlist != that1.Idlist {
		return fmt.Errorf("Idlist this(%v) Not Equal that(%v)", this.Idlist, that1.Idlist)
	}
	if this.SvrVer != that1.SvrVer {
		return fmt.Errorf("SvrVer this(%v) Not Equal that(%v)", this.SvrVer, that1.SvrVer)
	}
	if this.Svrtime != that1.Svrtime {
		return fmt.Errorf("Svrtime this(%v) Not Equal that(%v)", this.Svrtime, that1.Svrtime)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetListResponse)
	if !ok {
		that2, ok := that.(GetListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Isrefresh != that1.Isrefresh {
		return false
	}
	if this.Idlist != that1.Idlist {
		return false
	}
	if this.SvrVer != that1.SvrVer {
		return false
	}
	if this.Svrtime != that1.Svrtime {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pgNotice.GetListRequest{")
	s = append(s, "App: "+fmt.Sprintf("%#v", this.App)+",\n")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "HallVersion: "+fmt.Sprintf("%#v", this.HallVersion)+",\n")
	s = append(s, "CliVer: "+fmt.Sprintf("%#v", this.CliVer)+",\n")
	s = append(s, "AreaId: "+fmt.Sprintf("%#v", this.AreaId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetListResData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pgNotice.GetListResData{")
	s = append(s, "NoticeId: "+fmt.Sprintf("%#v", this.NoticeId)+",\n")
	s = append(s, "NoticeType: "+fmt.Sprintf("%#v", this.NoticeType)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "Weight: "+fmt.Sprintf("%#v", this.Weight)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Conditions: "+strings.Replace(this.Conditions.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetListConditions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pgNotice.GetListConditions{")
	s = append(s, "Sendtype: "+fmt.Sprintf("%#v", this.Sendtype)+",\n")
	s = append(s, "Poptype: "+fmt.Sprintf("%#v", this.Poptype)+",\n")
	s = append(s, "Islogined: "+fmt.Sprintf("%#v", this.Islogined)+",\n")
	s = append(s, "Week: "+fmt.Sprintf("%#v", this.Week)+",\n")
	s = append(s, "Pertime: "+strings.Replace(this.Pertime.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetListPertime) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgNotice.GetListPertime{")
	s = append(s, "Stime: "+fmt.Sprintf("%#v", this.Stime)+",\n")
	s = append(s, "Etime: "+fmt.Sprintf("%#v", this.Etime)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pgNotice.GetListResponse{")
	s = append(s, "Isrefresh: "+fmt.Sprintf("%#v", this.Isrefresh)+",\n")
	s = append(s, "Idlist: "+fmt.Sprintf("%#v", this.Idlist)+",\n")
	s = append(s, "SvrVer: "+fmt.Sprintf("%#v", this.SvrVer)+",\n")
	s = append(s, "Svrtime: "+fmt.Sprintf("%#v", this.Svrtime)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNotice(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GetListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.App))
	dAtA[i] = 0x10
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNotice(dAtA, i, uint64(len(m.Version)))
	i += copy(dAtA[i:], m.Version)
	dAtA[i] = 0x20
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.HallVersion))
	dAtA[i] = 0x28
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.CliVer))
	dAtA[i] = 0x30
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.AreaId))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetListResData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetListResData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.NoticeId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.NoticeType))
	dAtA[i] = 0x18
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.AppId))
	dAtA[i] = 0x20
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Weight))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintNotice(dAtA, i, uint64(len(m.Title)))
	i += copy(dAtA[i:], m.Title)
	dAtA[i] = 0x32
	i++
	i = encodeVarintNotice(dAtA, i, uint64(len(m.Content)))
	i += copy(dAtA[i:], m.Content)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintNotice(dAtA, i, uint64(len(m.StartTime)))
	i += copy(dAtA[i:], m.StartTime)
	dAtA[i] = 0x42
	i++
	i = encodeVarintNotice(dAtA, i, uint64(len(m.EndTime)))
	i += copy(dAtA[i:], m.EndTime)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Conditions.Size()))
	n1, err := m.Conditions.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetListConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetListConditions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Sendtype))
	dAtA[i] = 0x10
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Poptype))
	dAtA[i] = 0x18
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Islogined))
	dAtA[i] = 0x20
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Week))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Pertime.Size()))
	n2, err := m.Pertime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetListPertime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetListPertime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNotice(dAtA, i, uint64(len(m.Stime)))
	i += copy(dAtA[i:], m.Stime)
	dAtA[i] = 0x12
	i++
	i = encodeVarintNotice(dAtA, i, uint64(len(m.Etime)))
	i += copy(dAtA[i:], m.Etime)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Isrefresh))
	dAtA[i] = 0x10
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Idlist))
	dAtA[i] = 0x18
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.SvrVer))
	dAtA[i] = 0x20
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Svrtime))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintNotice(dAtA, i, uint64(m.Data.Size()))
	n3, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintNotice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGetListRequest(r randyNotice, easy bool) *GetListRequest {
	this := &GetListRequest{}
	this.App = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.App *= -1
	}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.Version = string(randStringNotice(r))
	this.HallVersion = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.HallVersion *= -1
	}
	this.CliVer = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CliVer *= -1
	}
	this.AreaId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.AreaId *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNotice(r, 7)
	}
	return this
}

func NewPopulatedGetListResData(r randyNotice, easy bool) *GetListResData {
	this := &GetListResData{}
	this.NoticeId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.NoticeId *= -1
	}
	this.NoticeType = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.NoticeType *= -1
	}
	this.AppId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.AppId *= -1
	}
	this.Weight = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Weight *= -1
	}
	this.Title = string(randStringNotice(r))
	this.Content = string(randStringNotice(r))
	this.StartTime = string(randStringNotice(r))
	this.EndTime = string(randStringNotice(r))
	v1 := NewPopulatedGetListConditions(r, easy)
	this.Conditions = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNotice(r, 10)
	}
	return this
}

func NewPopulatedGetListConditions(r randyNotice, easy bool) *GetListConditions {
	this := &GetListConditions{}
	this.Sendtype = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sendtype *= -1
	}
	this.Poptype = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Poptype *= -1
	}
	this.Islogined = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Islogined *= -1
	}
	this.Week = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Week *= -1
	}
	v2 := NewPopulatedGetListPertime(r, easy)
	this.Pertime = *v2
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNotice(r, 6)
	}
	return this
}

func NewPopulatedGetListPertime(r randyNotice, easy bool) *GetListPertime {
	this := &GetListPertime{}
	this.Stime = string(randStringNotice(r))
	this.Etime = string(randStringNotice(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNotice(r, 3)
	}
	return this
}

func NewPopulatedGetListResponse(r randyNotice, easy bool) *GetListResponse {
	this := &GetListResponse{}
	this.Isrefresh = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Isrefresh *= -1
	}
	this.Idlist = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Idlist *= -1
	}
	this.SvrVer = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SvrVer *= -1
	}
	this.Svrtime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Svrtime *= -1
	}
	v3 := NewPopulatedGetListResData(r, easy)
	this.Data = *v3
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedNotice(r, 6)
	}
	return this
}

type randyNotice interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneNotice(r randyNotice) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringNotice(r randyNotice) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneNotice(r)
	}
	return string(tmps)
}
func randUnrecognizedNotice(r randyNotice, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldNotice(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldNotice(dAtA []byte, r randyNotice, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateNotice(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateNotice(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateNotice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateNotice(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateNotice(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateNotice(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateNotice(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetListRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovNotice(uint64(m.App))
	n += 1 + sovNotice(uint64(m.Mid))
	l = len(m.Version)
	n += 1 + l + sovNotice(uint64(l))
	n += 1 + sovNotice(uint64(m.HallVersion))
	n += 1 + sovNotice(uint64(m.CliVer))
	n += 1 + sovNotice(uint64(m.AreaId))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetListResData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovNotice(uint64(m.NoticeId))
	n += 1 + sovNotice(uint64(m.NoticeType))
	n += 1 + sovNotice(uint64(m.AppId))
	n += 1 + sovNotice(uint64(m.Weight))
	l = len(m.Title)
	n += 1 + l + sovNotice(uint64(l))
	l = len(m.Content)
	n += 1 + l + sovNotice(uint64(l))
	l = len(m.StartTime)
	n += 1 + l + sovNotice(uint64(l))
	l = len(m.EndTime)
	n += 1 + l + sovNotice(uint64(l))
	l = m.Conditions.Size()
	n += 1 + l + sovNotice(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetListConditions) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovNotice(uint64(m.Sendtype))
	n += 1 + sovNotice(uint64(m.Poptype))
	n += 1 + sovNotice(uint64(m.Islogined))
	n += 1 + sovNotice(uint64(m.Week))
	l = m.Pertime.Size()
	n += 1 + l + sovNotice(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetListPertime) Size() (n int) {
	var l int
	_ = l
	l = len(m.Stime)
	n += 1 + l + sovNotice(uint64(l))
	l = len(m.Etime)
	n += 1 + l + sovNotice(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetListResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovNotice(uint64(m.Isrefresh))
	n += 1 + sovNotice(uint64(m.Idlist))
	n += 1 + sovNotice(uint64(m.SvrVer))
	n += 1 + sovNotice(uint64(m.Svrtime))
	l = m.Data.Size()
	n += 1 + l + sovNotice(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNotice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNotice(x uint64) (n int) {
	return sovNotice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetListRequest{`,
		`App:` + fmt.Sprintf("%v", this.App) + `,`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`HallVersion:` + fmt.Sprintf("%v", this.HallVersion) + `,`,
		`CliVer:` + fmt.Sprintf("%v", this.CliVer) + `,`,
		`AreaId:` + fmt.Sprintf("%v", this.AreaId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetListResData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetListResData{`,
		`NoticeId:` + fmt.Sprintf("%v", this.NoticeId) + `,`,
		`NoticeType:` + fmt.Sprintf("%v", this.NoticeType) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Conditions:` + strings.Replace(strings.Replace(this.Conditions.String(), "GetListConditions", "GetListConditions", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetListConditions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetListConditions{`,
		`Sendtype:` + fmt.Sprintf("%v", this.Sendtype) + `,`,
		`Poptype:` + fmt.Sprintf("%v", this.Poptype) + `,`,
		`Islogined:` + fmt.Sprintf("%v", this.Islogined) + `,`,
		`Week:` + fmt.Sprintf("%v", this.Week) + `,`,
		`Pertime:` + strings.Replace(strings.Replace(this.Pertime.String(), "GetListPertime", "GetListPertime", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetListPertime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetListPertime{`,
		`Stime:` + fmt.Sprintf("%v", this.Stime) + `,`,
		`Etime:` + fmt.Sprintf("%v", this.Etime) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetListResponse{`,
		`Isrefresh:` + fmt.Sprintf("%v", this.Isrefresh) + `,`,
		`Idlist:` + fmt.Sprintf("%v", this.Idlist) + `,`,
		`SvrVer:` + fmt.Sprintf("%v", this.SvrVer) + `,`,
		`Svrtime:` + fmt.Sprintf("%v", this.Svrtime) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "GetListResData", "GetListResData", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNotice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetListRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			m.App = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.App |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallVersion", wireType)
			}
			m.HallVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HallVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CliVer", wireType)
			}
			m.CliVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CliVer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			m.AreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("app")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetListResData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetListResData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetListResData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeId", wireType)
			}
			m.NoticeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeType", wireType)
			}
			m.NoticeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Conditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("notice_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("notice_type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("app_id")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("weight")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("title")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("content")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("start_time")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return proto.NewRequiredNotSetError("end_time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetListConditions) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetListConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetListConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sendtype", wireType)
			}
			m.Sendtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sendtype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poptype", wireType)
			}
			m.Poptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Poptype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Islogined", wireType)
			}
			m.Islogined = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Islogined |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Week", wireType)
			}
			m.Week = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Week |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pertime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pertime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("sendtype")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("poptype")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("islogined")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("week")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("pertime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetListPertime) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetListPertime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetListPertime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Etime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("stime")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("etime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetListResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isrefresh", wireType)
			}
			m.Isrefresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Isrefresh |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idlist", wireType)
			}
			m.Idlist = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idlist |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvrVer", wireType)
			}
			m.SvrVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvrVer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svrtime", wireType)
			}
			m.Svrtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Svrtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("isrefresh")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("idlist")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("svr_ver")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("svrtime")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("Data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNotice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNotice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNotice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNotice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("notice/notice.proto", fileDescriptorNotice) }

var fileDescriptorNotice = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x4d, 0x6f, 0x13, 0x3f,
	0x10, 0xc6, 0xeb, 0xbc, 0x6c, 0x92, 0xc9, 0x5f, 0x7f, 0x84, 0x91, 0xd0, 0xaa, 0x05, 0x77, 0x09,
	0x42, 0xe4, 0x80, 0x12, 0xa9, 0xe2, 0xc0, 0x95, 0x17, 0x09, 0x2a, 0x21, 0x84, 0xaa, 0xaa, 0xd7,
	0x6a, 0x9b, 0x9d, 0x26, 0x16, 0x1b, 0xdb, 0xac, 0xdd, 0x54, 0xbd, 0xf1, 0x71, 0xf8, 0x08, 0x1c,
	0x39, 0x41, 0x2f, 0x48, 0x1c, 0x11, 0x07, 0xd4, 0xec, 0x27, 0xe0, 0xc8, 0x11, 0xd9, 0xbb, 0x4e,
	0x1c, 0x55, 0x9c, 0xb2, 0xfe, 0x3d, 0x8f, 0x27, 0x3b, 0xcf, 0xce, 0xc0, 0x2d, 0x21, 0x0d, 0x9f,
	0xe0, 0xb8, 0xfa, 0x19, 0xa9, 0x42, 0x1a, 0x49, 0xbb, 0x6a, 0xfa, 0xc6, 0x9d, 0xb7, 0x1f, 0x2f,
	0x50, 0x64, 0xb2, 0x18, 0x4f, 0xb9, 0x99, 0x9d, 0x9d, 0x8c, 0x26, 0x72, 0x3e, 0x9e, 0xca, 0xa9,
	0x1c, 0x3b, 0xdf, 0xc9, 0xd9, 0xa9, 0x3b, 0xb9, 0x83, 0x7b, 0xaa, 0xee, 0x0f, 0xbe, 0x12, 0xf8,
	0xff, 0x25, 0x9a, 0xd7, 0x5c, 0x9b, 0x03, 0x7c, 0x7f, 0x86, 0xda, 0xd0, 0xdb, 0xd0, 0x4c, 0x95,
	0x8a, 0x49, 0xd2, 0x18, 0xb6, 0x9f, 0xb5, 0x2e, 0x7f, 0xed, 0x6e, 0x1d, 0x58, 0x60, 0xf9, 0x9c,
	0x67, 0x71, 0x23, 0x69, 0x0c, 0x9b, 0x9e, 0xcf, 0x79, 0x46, 0x19, 0x74, 0x16, 0x58, 0x68, 0x2e,
	0x45, 0xdc, 0x4c, 0xc8, 0xb0, 0x57, 0x6b, 0x1e, 0xd2, 0x87, 0xf0, 0xdf, 0x2c, 0xcd, 0xf3, 0x63,
	0x6f, 0x6a, 0x25, 0x64, 0x55, 0xa0, 0x6f, 0x95, 0xa3, 0xda, 0x78, 0x17, 0x3a, 0x93, 0x9c, 0x5b,
	0x5f, 0xdc, 0x0e, 0x3c, 0xd1, 0x24, 0xe7, 0x47, 0x58, 0x58, 0x39, 0x2d, 0x30, 0x3d, 0xe6, 0x59,
	0x1c, 0x25, 0x64, 0xf5, 0x6e, 0x91, 0x85, 0xfb, 0xd9, 0xe0, 0x67, 0x23, 0xe8, 0x44, 0xbf, 0x48,
	0x4d, 0x4a, 0xef, 0x41, 0xaf, 0x0a, 0xcb, 0xde, 0x09, 0xfb, 0xe9, 0x56, 0x78, 0x3f, 0xa3, 0x0f,
	0xa0, 0x5f, 0x5b, 0xcc, 0x85, 0x42, 0xd7, 0x9c, 0x37, 0x41, 0x25, 0x1c, 0x5e, 0x28, 0xa4, 0x3b,
	0x10, 0xa5, 0x4a, 0xd9, 0x32, 0xcd, 0xc0, 0xd1, 0x4e, 0x95, 0xda, 0xcf, 0xe8, 0x1d, 0x88, 0xce,
	0x91, 0x4f, 0x67, 0x26, 0x6e, 0x05, 0x62, 0xcd, 0xe8, 0x36, 0xb4, 0x0d, 0x37, 0x39, 0xc6, 0xed,
	0xa4, 0xb1, 0x0a, 0xa7, 0x42, 0x36, 0xba, 0x89, 0x14, 0x06, 0x85, 0x89, 0xa3, 0x40, 0xf5, 0x90,
	0xde, 0x07, 0xd0, 0x26, 0x2d, 0xcc, 0xb1, 0xe1, 0x73, 0x8c, 0x3b, 0x81, 0xa5, 0xe7, 0xf8, 0x21,
	0x9f, 0x23, 0xdd, 0x85, 0x2e, 0x8a, 0xac, 0xb2, 0x74, 0xc3, 0x2a, 0x28, 0x32, 0x67, 0x78, 0x0a,
	0x30, 0x91, 0x22, 0xe3, 0x86, 0x4b, 0xa1, 0xe3, 0x5e, 0x42, 0x86, 0xfd, 0xbd, 0x9d, 0x91, 0x1f,
	0x9c, 0x51, 0x1d, 0xda, 0xf3, 0x95, 0xc5, 0xf7, 0xbf, 0xbe, 0x34, 0xf8, 0x46, 0xe0, 0xe6, 0x35,
	0x1f, 0x4d, 0xa0, 0xab, 0x51, 0x64, 0x2e, 0xb9, 0x8d, 0x78, 0x3d, 0xb5, 0x0d, 0x2a, 0xa9, 0xae,
	0x45, 0xeb, 0x21, 0x1d, 0x40, 0x8f, 0xeb, 0x5c, 0x4e, 0xb9, 0xc0, 0xcd, 0x68, 0xd7, 0x98, 0xc6,
	0xd0, 0x3a, 0x47, 0x7c, 0xb7, 0x11, 0xae, 0x23, 0xf4, 0x09, 0x74, 0x14, 0x16, 0xae, 0x71, 0x1b,
	0x6e, 0x7f, 0x2f, 0xbe, 0xd6, 0xd5, 0xdb, 0x4a, 0x5f, 0xfd, 0x6f, 0x75, 0x1c, 0xbc, 0x5a, 0xcd,
	0x4a, 0x6d, 0xb0, 0x9f, 0x49, 0xbb, 0x4a, 0x24, 0xfc, 0x4c, 0xda, 0x6b, 0xe8, 0xb4, 0x46, 0xa8,
	0x39, 0x34, 0xf8, 0x42, 0xe0, 0xc6, 0x7a, 0xec, 0x94, 0x14, 0xba, 0xee, 0xaa, 0xc0, 0xd3, 0x02,
	0xf5, 0x6c, 0x23, 0x98, 0x35, 0xb6, 0x43, 0xc3, 0xb3, 0x9c, 0x6b, 0xb3, 0x11, 0x4c, 0xcd, 0xec,
	0xac, 0xeb, 0x45, 0xe1, 0x56, 0xa1, 0x19, 0xec, 0x5b, 0xa4, 0x17, 0x85, 0x5d, 0x05, 0xe6, 0x64,
	0xf7, 0x4a, 0xad, 0x40, 0xf6, 0x90, 0xee, 0x41, 0xcb, 0x2e, 0xc0, 0x3f, 0x53, 0xa9, 0x17, 0xc4,
	0x87, 0xe9, 0x9e, 0x1f, 0xfd, 0x58, 0xb2, 0xad, 0xab, 0x25, 0x23, 0xbf, 0x97, 0x8c, 0xfc, 0x59,
	0x32, 0xf2, 0xa1, 0x64, 0xe4, 0x63, 0xc9, 0xc8, 0xa7, 0x92, 0x91, 0xcf, 0x25, 0x23, 0x97, 0x25,
	0x23, 0xdf, 0x4b, 0x46, 0xae, 0x4a, 0x46, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x14, 0x91,
	0xc4, 0x8d, 0x04, 0x00, 0x00,
}
