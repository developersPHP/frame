// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: goods/goods.proto

/*
	Package ptGoods is a generated protocol buffer package.

	It is generated from these files:
		goods/goods.proto

	It has these top-level messages:
		RPCErrorResponse
		CreateGoodsRequest
		GoodsInfo
		GoodsPrice
		GoodsID
		Mid
		BagItemInfo
		BagItemDetail
		BagItemsResponse
		Bag
		BagTab
		BagTabs
		BagItem
		GoodsUseRequest
		SynthesisRequest
		ExchangeRealGoodsRequest
		ExHistoryRequest
		ExChangeItem
		ExHistoryResponse
		ExChangeTelFeeRequest
		GoodsUseResponse
		GoodsListRequest
		GoodsItem
		GoodsListResponse
*/
package ptGoods

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GoodsStatus int32

const (
	UNAVAILABLE GoodsStatus = 0
	AVAILABLE   GoodsStatus = 1
	DELETED     GoodsStatus = 2
)

var GoodsStatus_name = map[int32]string{
	0: "UNAVAILABLE",
	1: "AVAILABLE",
	2: "DELETED",
}
var GoodsStatus_value = map[string]int32{
	"UNAVAILABLE": 0,
	"AVAILABLE":   1,
	"DELETED":     2,
}

func (x GoodsStatus) Enum() *GoodsStatus {
	p := new(GoodsStatus)
	*p = x
	return p
}
func (x GoodsStatus) String() string {
	return proto.EnumName(GoodsStatus_name, int32(x))
}
func (x *GoodsStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GoodsStatus_value, data, "GoodsStatus")
	if err != nil {
		return err
	}
	*x = GoodsStatus(value)
	return nil
}
func (GoodsStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorGoods, []int{0} }

type GoodsType int32

const (
	SILVER_CONIN  GoodsType = 0
	BULLION       GoodsType = 1
	PROPS         GoodsType = 2
	PHYSICAL_ITEM GoodsType = 3
	VIRTUAL_ITEM  GoodsType = 4
	OUTLINE_ITEM  GoodsType = 5
	GIFT          GoodsType = 6
	PIECES_GOODS  GoodsType = 7
)

var GoodsType_name = map[int32]string{
	0: "SILVER_CONIN",
	1: "BULLION",
	2: "PROPS",
	3: "PHYSICAL_ITEM",
	4: "VIRTUAL_ITEM",
	5: "OUTLINE_ITEM",
	6: "GIFT",
	7: "PIECES_GOODS",
}
var GoodsType_value = map[string]int32{
	"SILVER_CONIN":  0,
	"BULLION":       1,
	"PROPS":         2,
	"PHYSICAL_ITEM": 3,
	"VIRTUAL_ITEM":  4,
	"OUTLINE_ITEM":  5,
	"GIFT":          6,
	"PIECES_GOODS":  7,
}

func (x GoodsType) Enum() *GoodsType {
	p := new(GoodsType)
	*p = x
	return p
}
func (x GoodsType) String() string {
	return proto.EnumName(GoodsType_name, int32(x))
}
func (x *GoodsType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GoodsType_value, data, "GoodsType")
	if err != nil {
		return err
	}
	*x = GoodsType(value)
	return nil
}
func (GoodsType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGoods, []int{1} }

// 公共 rpc 错误返回
type RPCErrorResponse struct {
	Status           int32  `protobuf:"varint,1,req,name=status" json:"status"`
	Msg              string `protobuf:"bytes,2,req,name=msg" json:"msg"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RPCErrorResponse) Reset()                    { *m = RPCErrorResponse{} }
func (*RPCErrorResponse) ProtoMessage()               {}
func (*RPCErrorResponse) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{0} }

func (m *RPCErrorResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RPCErrorResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type CreateGoodsRequest struct {
	// option (gogoproto.unmarshaler) = false;
	Name             string      `protobuf:"bytes,1,req,name=name" json:"name"`
	Desc             string      `protobuf:"bytes,2,req,name=desc" json:"desc"`
	Type             uint32      `protobuf:"varint,3,req,name=type" json:"type"`
	Img              string      `protobuf:"bytes,4,req,name=img" json:"img"`
	Conditions       string      `protobuf:"bytes,5,req,name=conditions" json:"conditions"`
	Price            uint32      `protobuf:"varint,6,req,name=price" json:"price"`
	PriceOrg         uint32      `protobuf:"varint,7,req,name=price_org,json=priceOrg" json:"price_org"`
	GoodsExt         string      `protobuf:"bytes,8,req,name=goods_ext,json=goodsExt" json:"goods_ext"`
	ExpireTime       uint32      `protobuf:"varint,9,req,name=ExpireTime" json:"ExpireTime"`
	CreateTime       int64       `protobuf:"varint,10,req,name=CreateTime" json:"CreateTime"`
	CreateBy         int64       `protobuf:"varint,11,req,name=CreateBy" json:"CreateBy"`
	Status           GoodsStatus `protobuf:"varint,12,req,name=status,enum=ptGoods.GoodsStatus" json:"status"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CreateGoodsRequest) Reset()                    { *m = CreateGoodsRequest{} }
func (*CreateGoodsRequest) ProtoMessage()               {}
func (*CreateGoodsRequest) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{1} }

func (m *CreateGoodsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGoodsRequest) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CreateGoodsRequest) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CreateGoodsRequest) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *CreateGoodsRequest) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *CreateGoodsRequest) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CreateGoodsRequest) GetPriceOrg() uint32 {
	if m != nil {
		return m.PriceOrg
	}
	return 0
}

func (m *CreateGoodsRequest) GetGoodsExt() string {
	if m != nil {
		return m.GoodsExt
	}
	return ""
}

func (m *CreateGoodsRequest) GetExpireTime() uint32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *CreateGoodsRequest) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *CreateGoodsRequest) GetCreateBy() int64 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

func (m *CreateGoodsRequest) GetStatus() GoodsStatus {
	if m != nil {
		return m.Status
	}
	return UNAVAILABLE
}

type GoodsInfo struct {
	GoodsId          int64       `protobuf:"varint,1,req,name=goods_id,json=goodsId" json:"goods_id"`
	Name             string      `protobuf:"bytes,2,req,name=name" json:"name"`
	Desc             string      `protobuf:"bytes,3,req,name=desc" json:"desc"`
	Type             uint32      `protobuf:"varint,4,req,name=type" json:"type"`
	Img              string      `protobuf:"bytes,5,req,name=img" json:"img"`
	Conditions       string      `protobuf:"bytes,6,req,name=conditions" json:"conditions"`
	Price            uint32      `protobuf:"varint,7,req,name=price" json:"price"`
	PriceOrg         uint32      `protobuf:"varint,8,req,name=price_org,json=priceOrg" json:"price_org"`
	GoodsExt         string      `protobuf:"bytes,9,req,name=goods_ext,json=goodsExt" json:"goods_ext"`
	ExpireTime       uint32      `protobuf:"varint,10,req,name=expire_time,json=expireTime" json:"expire_time"`
	Status           GoodsStatus `protobuf:"varint,11,req,name=status,enum=ptGoods.GoodsStatus" json:"status"`
	AddTime          int64       `protobuf:"varint,12,req,name=add_time,json=addTime" json:"add_time"`
	CreateBy         int64       `protobuf:"varint,13,req,name=create_by,json=createBy" json:"create_by"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *GoodsInfo) Reset()                    { *m = GoodsInfo{} }
func (*GoodsInfo) ProtoMessage()               {}
func (*GoodsInfo) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{2} }

func (m *GoodsInfo) GetGoodsId() int64 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *GoodsInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GoodsInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *GoodsInfo) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GoodsInfo) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *GoodsInfo) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *GoodsInfo) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *GoodsInfo) GetPriceOrg() uint32 {
	if m != nil {
		return m.PriceOrg
	}
	return 0
}

func (m *GoodsInfo) GetGoodsExt() string {
	if m != nil {
		return m.GoodsExt
	}
	return ""
}

func (m *GoodsInfo) GetExpireTime() uint32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *GoodsInfo) GetStatus() GoodsStatus {
	if m != nil {
		return m.Status
	}
	return UNAVAILABLE
}

func (m *GoodsInfo) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *GoodsInfo) GetCreateBy() int64 {
	if m != nil {
		return m.CreateBy
	}
	return 0
}

type GoodsPrice struct {
	GpId             int64  `protobuf:"varint,1,req,name=gp_id,json=gpId" json:"gp_id"`
	GoodsId          uint32 `protobuf:"varint,2,req,name=goods_id,json=goodsId" json:"goods_id"`
	ExchangePrice    uint32 `protobuf:"varint,3,req,name=exchange_price,json=exchangePrice" json:"exchange_price"`
	ExchangeType     uint32 `protobuf:"varint,4,req,name=exchange_type,json=exchangeType" json:"exchange_type"`
	Status           uint32 `protobuf:"varint,5,req,name=status" json:"status"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GoodsPrice) Reset()                    { *m = GoodsPrice{} }
func (*GoodsPrice) ProtoMessage()               {}
func (*GoodsPrice) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{3} }

func (m *GoodsPrice) GetGpId() int64 {
	if m != nil {
		return m.GpId
	}
	return 0
}

func (m *GoodsPrice) GetGoodsId() uint32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *GoodsPrice) GetExchangePrice() uint32 {
	if m != nil {
		return m.ExchangePrice
	}
	return 0
}

func (m *GoodsPrice) GetExchangeType() uint32 {
	if m != nil {
		return m.ExchangeType
	}
	return 0
}

func (m *GoodsPrice) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type GoodsID struct {
	Id               int64  `protobuf:"varint,1,req,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GoodsID) Reset()                    { *m = GoodsID{} }
func (*GoodsID) ProtoMessage()               {}
func (*GoodsID) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{4} }

func (m *GoodsID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Mid struct {
	Id               int64  `protobuf:"varint,1,req,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Mid) Reset()                    { *m = Mid{} }
func (*Mid) ProtoMessage()               {}
func (*Mid) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{5} }

func (m *Mid) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 背包里面的一个物品信息
type BagItemInfo struct {
	UgId             int64  `protobuf:"varint,1,req,name=ug_id,json=ugId" json:"ug_id"`
	GoodsId          int64  `protobuf:"varint,2,req,name=goods_id,json=goodsId" json:"goods_id"`
	ExpireTime       int64  `protobuf:"varint,3,req,name=expire_time,json=expireTime" json:"expire_time"`
	Ext              string `protobuf:"bytes,4,req,name=ext" json:"ext"`
	AddTime          int64  `protobuf:"varint,5,req,name=add_time,json=addTime" json:"add_time"`
	Name             string `protobuf:"bytes,6,req,name=name" json:"name"`
	Type             uint32 `protobuf:"varint,7,req,name=type" json:"type"`
	Img              string `protobuf:"bytes,8,req,name=img" json:"img"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BagItemInfo) Reset()                    { *m = BagItemInfo{} }
func (*BagItemInfo) ProtoMessage()               {}
func (*BagItemInfo) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{6} }

func (m *BagItemInfo) GetUgId() int64 {
	if m != nil {
		return m.UgId
	}
	return 0
}

func (m *BagItemInfo) GetGoodsId() int64 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *BagItemInfo) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *BagItemInfo) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *BagItemInfo) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *BagItemInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BagItemInfo) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BagItemInfo) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

// 背包中物品的详细信息
type BagItemDetail struct {
	UgId             int64       `protobuf:"varint,1,req,name=ug_id,json=ugId" json:"ug_id"`
	GoodsId          int64       `protobuf:"varint,2,req,name=goods_id,json=goodsId" json:"goods_id"`
	ExpireTime       int64       `protobuf:"varint,3,req,name=expire_time,json=expireTime" json:"expire_time"`
	Ext              string      `protobuf:"bytes,4,req,name=ext" json:"ext"`
	Name             string      `protobuf:"bytes,5,req,name=name" json:"name"`
	Desc             string      `protobuf:"bytes,6,req,name=desc" json:"desc"`
	Type             uint32      `protobuf:"varint,7,req,name=type" json:"type"`
	Img              string      `protobuf:"bytes,8,req,name=img" json:"img"`
	Conditions       string      `protobuf:"bytes,9,req,name=conditions" json:"conditions"`
	Price            uint32      `protobuf:"varint,10,req,name=price" json:"price"`
	GoodsExt         string      `protobuf:"bytes,11,req,name=goods_ext,json=goodsExt" json:"goods_ext"`
	Status           GoodsStatus `protobuf:"varint,13,req,name=status,enum=ptGoods.GoodsStatus" json:"status"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *BagItemDetail) Reset()                    { *m = BagItemDetail{} }
func (*BagItemDetail) ProtoMessage()               {}
func (*BagItemDetail) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{7} }

func (m *BagItemDetail) GetUgId() int64 {
	if m != nil {
		return m.UgId
	}
	return 0
}

func (m *BagItemDetail) GetGoodsId() int64 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *BagItemDetail) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *BagItemDetail) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *BagItemDetail) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BagItemDetail) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *BagItemDetail) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BagItemDetail) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *BagItemDetail) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *BagItemDetail) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *BagItemDetail) GetGoodsExt() string {
	if m != nil {
		return m.GoodsExt
	}
	return ""
}

func (m *BagItemDetail) GetStatus() GoodsStatus {
	if m != nil {
		return m.Status
	}
	return UNAVAILABLE
}

// ----- rpc 返回 背包的数据结构 -------
// 背包返回数据
type BagItemsResponse struct {
	Status           int32  `protobuf:"varint,1,req,name=status" json:"status"`
	Msg              string `protobuf:"bytes,2,req,name=msg" json:"msg"`
	Data             *Bag   `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BagItemsResponse) Reset()                    { *m = BagItemsResponse{} }
func (*BagItemsResponse) ProtoMessage()               {}
func (*BagItemsResponse) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{8} }

func (m *BagItemsResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BagItemsResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *BagItemsResponse) GetData() *Bag {
	if m != nil {
		return m.Data
	}
	return nil
}

// 背包
type Bag struct {
	Tabs             []*BagTab  `protobuf:"bytes,1,rep,name=tabs" json:"tabs,omitempty"`
	NewGoods         []*BagItem `protobuf:"bytes,2,rep,name=new_goods,json=newGoods" json:"new_goods,omitempty"`
	AllGoods         []*BagItem `protobuf:"bytes,3,rep,name=all_goods,json=allGoods" json:"all_goods,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Bag) Reset()                    { *m = Bag{} }
func (*Bag) ProtoMessage()               {}
func (*Bag) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{9} }

func (m *Bag) GetTabs() []*BagTab {
	if m != nil {
		return m.Tabs
	}
	return nil
}

func (m *Bag) GetNewGoods() []*BagItem {
	if m != nil {
		return m.NewGoods
	}
	return nil
}

func (m *Bag) GetAllGoods() []*BagItem {
	if m != nil {
		return m.AllGoods
	}
	return nil
}

// 背包标签
type BagTab struct {
	LabelId          int64  `protobuf:"varint,1,req,name=label_id,json=labelId" json:"label_id"`
	Name             string `protobuf:"bytes,2,req,name=name" json:"name"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BagTab) Reset()                    { *m = BagTab{} }
func (*BagTab) ProtoMessage()               {}
func (*BagTab) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{10} }

func (m *BagTab) GetLabelId() int64 {
	if m != nil {
		return m.LabelId
	}
	return 0
}

func (m *BagTab) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BagTabs struct {
	Items            []*BagTab `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *BagTabs) Reset()                    { *m = BagTabs{} }
func (*BagTabs) ProtoMessage()               {}
func (*BagTabs) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{11} }

func (m *BagTabs) GetItems() []*BagTab {
	if m != nil {
		return m.Items
	}
	return nil
}

// 背包物品
type BagItem struct {
	UgId             int64  `protobuf:"varint,1,req,name=ug_id,json=ugId" json:"ug_id"`
	GoodsId          int64  `protobuf:"varint,2,req,name=goods_id,json=goodsId" json:"goods_id"`
	Num              int32  `protobuf:"varint,3,req,name=num" json:"num"`
	ExpireTime       int64  `protobuf:"varint,4,req,name=expire_time,json=expireTime" json:"expire_time"`
	Ext              string `protobuf:"bytes,5,req,name=ext" json:"ext"`
	TabId            int64  `protobuf:"varint,6,req,name=tab_id,json=tabId" json:"tab_id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BagItem) Reset()                    { *m = BagItem{} }
func (*BagItem) ProtoMessage()               {}
func (*BagItem) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{12} }

func (m *BagItem) GetUgId() int64 {
	if m != nil {
		return m.UgId
	}
	return 0
}

func (m *BagItem) GetGoodsId() int64 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *BagItem) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *BagItem) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *BagItem) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *BagItem) GetTabId() int64 {
	if m != nil {
		return m.TabId
	}
	return 0
}

// ---- 道具使用- 客户端请求---------
type GoodsUseRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	GoodsId          int64  `protobuf:"varint,2,req,name=goodsId" json:"goodsId"`
	UgId             int64  `protobuf:"varint,3,req,name=ugId" json:"ugId"`
	TargetId         int64  `protobuf:"varint,4,req,name=targetId" json:"targetId"`
	Num              int32  `protobuf:"varint,5,req,name=num" json:"num"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GoodsUseRequest) Reset()                    { *m = GoodsUseRequest{} }
func (*GoodsUseRequest) ProtoMessage()               {}
func (*GoodsUseRequest) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{13} }

func (m *GoodsUseRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *GoodsUseRequest) GetGoodsId() int64 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *GoodsUseRequest) GetUgId() int64 {
	if m != nil {
		return m.UgId
	}
	return 0
}

func (m *GoodsUseRequest) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *GoodsUseRequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// -----------物品合成------------
type SynthesisRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	GoodsId          int64  `protobuf:"varint,2,req,name=goodsId" json:"goodsId"`
	UgId             int64  `protobuf:"varint,3,req,name=ugId" json:"ugId"`
	Num              int32  `protobuf:"varint,4,req,name=num" json:"num"`
	TargetId         int64  `protobuf:"varint,5,req,name=targetId" json:"targetId"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SynthesisRequest) Reset()                    { *m = SynthesisRequest{} }
func (*SynthesisRequest) ProtoMessage()               {}
func (*SynthesisRequest) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{14} }

func (m *SynthesisRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SynthesisRequest) GetGoodsId() int64 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *SynthesisRequest) GetUgId() int64 {
	if m != nil {
		return m.UgId
	}
	return 0
}

func (m *SynthesisRequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *SynthesisRequest) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

// 实物兑换
type ExchangeRealGoodsRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	GoodsId          int64  `protobuf:"varint,2,req,name=goodsId" json:"goodsId"`
	UgId             int64  `protobuf:"varint,3,req,name=ugId" json:"ugId"`
	RealName         string `protobuf:"bytes,4,req,name=realName" json:"realName"`
	Addr             string `protobuf:"bytes,5,req,name=addr" json:"addr"`
	Phone            string `protobuf:"bytes,6,req,name=phone" json:"phone"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExchangeRealGoodsRequest) Reset()                    { *m = ExchangeRealGoodsRequest{} }
func (*ExchangeRealGoodsRequest) ProtoMessage()               {}
func (*ExchangeRealGoodsRequest) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{15} }

func (m *ExchangeRealGoodsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ExchangeRealGoodsRequest) GetGoodsId() int64 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ExchangeRealGoodsRequest) GetUgId() int64 {
	if m != nil {
		return m.UgId
	}
	return 0
}

func (m *ExchangeRealGoodsRequest) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

func (m *ExchangeRealGoodsRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ExchangeRealGoodsRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// 兑换历史请求
type ExHistoryRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	New              uint32 `protobuf:"varint,2,req,name=new" json:"new"`
	PreIndex         int64  `protobuf:"varint,3,req,name=pre_index,json=preIndex" json:"pre_index"`
	PageSize         uint32 `protobuf:"varint,4,req,name=page_size,json=pageSize" json:"page_size"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExHistoryRequest) Reset()                    { *m = ExHistoryRequest{} }
func (*ExHistoryRequest) ProtoMessage()               {}
func (*ExHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{16} }

func (m *ExHistoryRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ExHistoryRequest) GetNew() uint32 {
	if m != nil {
		return m.New
	}
	return 0
}

func (m *ExHistoryRequest) GetPreIndex() int64 {
	if m != nil {
		return m.PreIndex
	}
	return 0
}

func (m *ExHistoryRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ExChangeItem struct {
	GoodsName        string `protobuf:"bytes,1,req,name=goodsName" json:"goodsName"`
	Ext              string `protobuf:"bytes,2,req,name=ext" json:"ext"`
	CreateTime       int64  `protobuf:"varint,3,req,name=create_time,json=createTime" json:"create_time"`
	Status           string `protobuf:"bytes,4,req,name=status" json:"status"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExChangeItem) Reset()            { *m = ExChangeItem{} }
func (*ExChangeItem) ProtoMessage()               {}
func (*ExChangeItem) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{17} }

func (m *ExChangeItem) GetGoodsName() string {
	if m != nil {
		return m.GoodsName
	}
	return ""
}

func (m *ExChangeItem) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *ExChangeItem) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ExChangeItem) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// 物品兑换历史纪录列表
type ExHistoryResponse struct {
	Status           int64           `protobuf:"varint,1,req,name=status" json:"status"`
	Msg              string          `protobuf:"bytes,2,req,name=msg" json:"msg"`
	Data             []*ExChangeItem `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ExHistoryResponse) Reset()                    { *m = ExHistoryResponse{} }
func (*ExHistoryResponse) ProtoMessage()               {}
func (*ExHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{18} }

func (m *ExHistoryResponse) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ExHistoryResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ExHistoryResponse) GetData() []*ExChangeItem {
	if m != nil {
		return m.Data
	}
	return nil
}

// 物品兑换话费
type ExChangeTelFeeRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	GoodsId          int64  `protobuf:"varint,2,req,name=goods_id,json=goodsId" json:"goods_id"`
	UgId             int64  `protobuf:"varint,3,req,name=ugId" json:"ugId"`
	Phone            string `protobuf:"bytes,4,req,name=phone" json:"phone"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExChangeTelFeeRequest) Reset()                    { *m = ExChangeTelFeeRequest{} }
func (*ExChangeTelFeeRequest) ProtoMessage()               {}
func (*ExChangeTelFeeRequest) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{19} }

func (m *ExChangeTelFeeRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ExChangeTelFeeRequest) GetGoodsId() int64 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *ExChangeTelFeeRequest) GetUgId() int64 {
	if m != nil {
		return m.UgId
	}
	return 0
}

func (m *ExChangeTelFeeRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// 物品使兑换返回
type GoodsUseResponse struct {
	Status           int64  `protobuf:"varint,1,req,name=status" json:"status"`
	Msg              string `protobuf:"bytes,2,req,name=msg" json:"msg"`
	Num              int32  `protobuf:"varint,3,req,name=num" json:"num"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GoodsUseResponse) Reset()                    { *m = GoodsUseResponse{} }
func (*GoodsUseResponse) ProtoMessage()               {}
func (*GoodsUseResponse) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{20} }

func (m *GoodsUseResponse) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GoodsUseResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GoodsUseResponse) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 物品列表
// message goodsid {
//    required int64 id = 1 [(gogoproto.nullable) = false];
// }
type GoodsListRequest struct {
	GoodsId          []int64 `protobuf:"varint,1,rep,name=goodsId" json:"goodsId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GoodsListRequest) Reset()                    { *m = GoodsListRequest{} }
func (*GoodsListRequest) ProtoMessage()               {}
func (*GoodsListRequest) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{21} }

func (m *GoodsListRequest) GetGoodsId() []int64 {
	if m != nil {
		return m.GoodsId
	}
	return nil
}

type GoodsItem struct {
	GoodsId          int64  `protobuf:"varint,1,req,name=goods_id,json=goodsId" json:"goods_id"`
	Name             string `protobuf:"bytes,2,req,name=name" json:"name"`
	Desc             string `protobuf:"bytes,3,req,name=desc" json:"desc"`
	GoodsType        uint32 `protobuf:"varint,4,req,name=goods_type,json=goodsType" json:"goods_type"`
	Label            int64  `protobuf:"varint,5,req,name=label" json:"label"`
	Img              string `protobuf:"bytes,6,req,name=img" json:"img"`
	Conditions       string `protobuf:"bytes,7,req,name=conditions" json:"conditions"`
	GoodsExt         string `protobuf:"bytes,8,req,name=goods_ext,json=goodsExt" json:"goods_ext"`
	AppVersion       int64  `protobuf:"varint,9,req,name=app_version,json=appVersion" json:"app_version"`
	Pay              string `protobuf:"bytes,10,req,name=pay" json:"pay"`
	Add              string `protobuf:"bytes,11,req,name=add" json:"add"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GoodsItem) Reset()                    { *m = GoodsItem{} }
func (*GoodsItem) ProtoMessage()               {}
func (*GoodsItem) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{22} }

func (m *GoodsItem) GetGoodsId() int64 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *GoodsItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GoodsItem) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *GoodsItem) GetGoodsType() uint32 {
	if m != nil {
		return m.GoodsType
	}
	return 0
}

func (m *GoodsItem) GetLabel() int64 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *GoodsItem) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *GoodsItem) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *GoodsItem) GetGoodsExt() string {
	if m != nil {
		return m.GoodsExt
	}
	return ""
}

func (m *GoodsItem) GetAppVersion() int64 {
	if m != nil {
		return m.AppVersion
	}
	return 0
}

func (m *GoodsItem) GetPay() string {
	if m != nil {
		return m.Pay
	}
	return ""
}

func (m *GoodsItem) GetAdd() string {
	if m != nil {
		return m.Add
	}
	return ""
}

type GoodsListResponse struct {
	Status           int64        `protobuf:"varint,1,req,name=status" json:"status"`
	Msg              string       `protobuf:"bytes,2,req,name=msg" json:"msg"`
	Goods            []*GoodsItem `protobuf:"bytes,3,rep,name=goods" json:"goods,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *GoodsListResponse) Reset()                    { *m = GoodsListResponse{} }
func (*GoodsListResponse) ProtoMessage()               {}
func (*GoodsListResponse) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{23} }

func (m *GoodsListResponse) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GoodsListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GoodsListResponse) GetGoods() []*GoodsItem {
	if m != nil {
		return m.Goods
	}
	return nil
}

func init() {
	proto.RegisterType((*RPCErrorResponse)(nil), "ptGoods.RPCErrorResponse")
	proto.RegisterType((*CreateGoodsRequest)(nil), "ptGoods.CreateGoodsRequest")
	proto.RegisterType((*GoodsInfo)(nil), "ptGoods.GoodsInfo")
	proto.RegisterType((*GoodsPrice)(nil), "ptGoods.GoodsPrice")
	proto.RegisterType((*GoodsID)(nil), "ptGoods.GoodsID")
	proto.RegisterType((*Mid)(nil), "ptGoods.Mid")
	proto.RegisterType((*BagItemInfo)(nil), "ptGoods.BagItemInfo")
	proto.RegisterType((*BagItemDetail)(nil), "ptGoods.BagItemDetail")
	proto.RegisterType((*BagItemsResponse)(nil), "ptGoods.BagItemsResponse")
	proto.RegisterType((*Bag)(nil), "ptGoods.Bag")
	proto.RegisterType((*BagTab)(nil), "ptGoods.BagTab")
	proto.RegisterType((*BagTabs)(nil), "ptGoods.BagTabs")
	proto.RegisterType((*BagItem)(nil), "ptGoods.BagItem")
	proto.RegisterType((*GoodsUseRequest)(nil), "ptGoods.GoodsUseRequest")
	proto.RegisterType((*SynthesisRequest)(nil), "ptGoods.SynthesisRequest")
	proto.RegisterType((*ExchangeRealGoodsRequest)(nil), "ptGoods.ExchangeRealGoodsRequest")
	proto.RegisterType((*ExHistoryRequest)(nil), "ptGoods.ExHistoryRequest")
	proto.RegisterType((*ExChangeItem)(nil), "ptGoods.ExChangeItem")
	proto.RegisterType((*ExHistoryResponse)(nil), "ptGoods.ExHistoryResponse")
	proto.RegisterType((*ExChangeTelFeeRequest)(nil), "ptGoods.ExChangeTelFeeRequest")
	proto.RegisterType((*GoodsUseResponse)(nil), "ptGoods.GoodsUseResponse")
	proto.RegisterType((*GoodsListRequest)(nil), "ptGoods.GoodsListRequest")
	proto.RegisterType((*GoodsItem)(nil), "ptGoods.GoodsItem")
	proto.RegisterType((*GoodsListResponse)(nil), "ptGoods.GoodsListResponse")
	proto.RegisterEnum("ptGoods.GoodsStatus", GoodsStatus_name, GoodsStatus_value)
	proto.RegisterEnum("ptGoods.GoodsType", GoodsType_name, GoodsType_value)
}
func (this *RPCErrorResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RPCErrorResponse)
	if !ok {
		that2, ok := that.(RPCErrorResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RPCErrorResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RPCErrorResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RPCErrorResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RPCErrorResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RPCErrorResponse)
	if !ok {
		that2, ok := that.(RPCErrorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateGoodsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateGoodsRequest)
	if !ok {
		that2, ok := that.(CreateGoodsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateGoodsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateGoodsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateGoodsRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Desc != that1.Desc {
		return fmt.Errorf("Desc this(%v) Not Equal that(%v)", this.Desc, that1.Desc)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Img != that1.Img {
		return fmt.Errorf("Img this(%v) Not Equal that(%v)", this.Img, that1.Img)
	}
	if this.Conditions != that1.Conditions {
		return fmt.Errorf("Conditions this(%v) Not Equal that(%v)", this.Conditions, that1.Conditions)
	}
	if this.Price != that1.Price {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if this.PriceOrg != that1.PriceOrg {
		return fmt.Errorf("PriceOrg this(%v) Not Equal that(%v)", this.PriceOrg, that1.PriceOrg)
	}
	if this.GoodsExt != that1.GoodsExt {
		return fmt.Errorf("GoodsExt this(%v) Not Equal that(%v)", this.GoodsExt, that1.GoodsExt)
	}
	if this.ExpireTime != that1.ExpireTime {
		return fmt.Errorf("ExpireTime this(%v) Not Equal that(%v)", this.ExpireTime, that1.ExpireTime)
	}
	if this.CreateTime != that1.CreateTime {
		return fmt.Errorf("CreateTime this(%v) Not Equal that(%v)", this.CreateTime, that1.CreateTime)
	}
	if this.CreateBy != that1.CreateBy {
		return fmt.Errorf("CreateBy this(%v) Not Equal that(%v)", this.CreateBy, that1.CreateBy)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CreateGoodsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateGoodsRequest)
	if !ok {
		that2, ok := that.(CreateGoodsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Img != that1.Img {
		return false
	}
	if this.Conditions != that1.Conditions {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.PriceOrg != that1.PriceOrg {
		return false
	}
	if this.GoodsExt != that1.GoodsExt {
		return false
	}
	if this.ExpireTime != that1.ExpireTime {
		return false
	}
	if this.CreateTime != that1.CreateTime {
		return false
	}
	if this.CreateBy != that1.CreateBy {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoodsInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoodsInfo)
	if !ok {
		that2, ok := that.(GoodsInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GoodsInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GoodsInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GoodsInfo but is not nil && this == nil")
	}
	if this.GoodsId != that1.GoodsId {
		return fmt.Errorf("GoodsId this(%v) Not Equal that(%v)", this.GoodsId, that1.GoodsId)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Desc != that1.Desc {
		return fmt.Errorf("Desc this(%v) Not Equal that(%v)", this.Desc, that1.Desc)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Img != that1.Img {
		return fmt.Errorf("Img this(%v) Not Equal that(%v)", this.Img, that1.Img)
	}
	if this.Conditions != that1.Conditions {
		return fmt.Errorf("Conditions this(%v) Not Equal that(%v)", this.Conditions, that1.Conditions)
	}
	if this.Price != that1.Price {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if this.PriceOrg != that1.PriceOrg {
		return fmt.Errorf("PriceOrg this(%v) Not Equal that(%v)", this.PriceOrg, that1.PriceOrg)
	}
	if this.GoodsExt != that1.GoodsExt {
		return fmt.Errorf("GoodsExt this(%v) Not Equal that(%v)", this.GoodsExt, that1.GoodsExt)
	}
	if this.ExpireTime != that1.ExpireTime {
		return fmt.Errorf("ExpireTime this(%v) Not Equal that(%v)", this.ExpireTime, that1.ExpireTime)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.AddTime != that1.AddTime {
		return fmt.Errorf("AddTime this(%v) Not Equal that(%v)", this.AddTime, that1.AddTime)
	}
	if this.CreateBy != that1.CreateBy {
		return fmt.Errorf("CreateBy this(%v) Not Equal that(%v)", this.CreateBy, that1.CreateBy)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoodsInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoodsInfo)
	if !ok {
		that2, ok := that.(GoodsInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GoodsId != that1.GoodsId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Img != that1.Img {
		return false
	}
	if this.Conditions != that1.Conditions {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.PriceOrg != that1.PriceOrg {
		return false
	}
	if this.GoodsExt != that1.GoodsExt {
		return false
	}
	if this.ExpireTime != that1.ExpireTime {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.AddTime != that1.AddTime {
		return false
	}
	if this.CreateBy != that1.CreateBy {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoodsPrice) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoodsPrice)
	if !ok {
		that2, ok := that.(GoodsPrice)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GoodsPrice")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GoodsPrice but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GoodsPrice but is not nil && this == nil")
	}
	if this.GpId != that1.GpId {
		return fmt.Errorf("GpId this(%v) Not Equal that(%v)", this.GpId, that1.GpId)
	}
	if this.GoodsId != that1.GoodsId {
		return fmt.Errorf("GoodsId this(%v) Not Equal that(%v)", this.GoodsId, that1.GoodsId)
	}
	if this.ExchangePrice != that1.ExchangePrice {
		return fmt.Errorf("ExchangePrice this(%v) Not Equal that(%v)", this.ExchangePrice, that1.ExchangePrice)
	}
	if this.ExchangeType != that1.ExchangeType {
		return fmt.Errorf("ExchangeType this(%v) Not Equal that(%v)", this.ExchangeType, that1.ExchangeType)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoodsPrice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoodsPrice)
	if !ok {
		that2, ok := that.(GoodsPrice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GpId != that1.GpId {
		return false
	}
	if this.GoodsId != that1.GoodsId {
		return false
	}
	if this.ExchangePrice != that1.ExchangePrice {
		return false
	}
	if this.ExchangeType != that1.ExchangeType {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoodsID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoodsID)
	if !ok {
		that2, ok := that.(GoodsID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GoodsID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GoodsID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GoodsID but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoodsID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoodsID)
	if !ok {
		that2, ok := that.(GoodsID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Mid) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Mid)
	if !ok {
		that2, ok := that.(Mid)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Mid")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Mid but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Mid but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Mid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mid)
	if !ok {
		that2, ok := that.(Mid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BagItemInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BagItemInfo)
	if !ok {
		that2, ok := that.(BagItemInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BagItemInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BagItemInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BagItemInfo but is not nil && this == nil")
	}
	if this.UgId != that1.UgId {
		return fmt.Errorf("UgId this(%v) Not Equal that(%v)", this.UgId, that1.UgId)
	}
	if this.GoodsId != that1.GoodsId {
		return fmt.Errorf("GoodsId this(%v) Not Equal that(%v)", this.GoodsId, that1.GoodsId)
	}
	if this.ExpireTime != that1.ExpireTime {
		return fmt.Errorf("ExpireTime this(%v) Not Equal that(%v)", this.ExpireTime, that1.ExpireTime)
	}
	if this.Ext != that1.Ext {
		return fmt.Errorf("Ext this(%v) Not Equal that(%v)", this.Ext, that1.Ext)
	}
	if this.AddTime != that1.AddTime {
		return fmt.Errorf("AddTime this(%v) Not Equal that(%v)", this.AddTime, that1.AddTime)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Img != that1.Img {
		return fmt.Errorf("Img this(%v) Not Equal that(%v)", this.Img, that1.Img)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BagItemInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BagItemInfo)
	if !ok {
		that2, ok := that.(BagItemInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UgId != that1.UgId {
		return false
	}
	if this.GoodsId != that1.GoodsId {
		return false
	}
	if this.ExpireTime != that1.ExpireTime {
		return false
	}
	if this.Ext != that1.Ext {
		return false
	}
	if this.AddTime != that1.AddTime {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Img != that1.Img {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BagItemDetail) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BagItemDetail)
	if !ok {
		that2, ok := that.(BagItemDetail)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BagItemDetail")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BagItemDetail but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BagItemDetail but is not nil && this == nil")
	}
	if this.UgId != that1.UgId {
		return fmt.Errorf("UgId this(%v) Not Equal that(%v)", this.UgId, that1.UgId)
	}
	if this.GoodsId != that1.GoodsId {
		return fmt.Errorf("GoodsId this(%v) Not Equal that(%v)", this.GoodsId, that1.GoodsId)
	}
	if this.ExpireTime != that1.ExpireTime {
		return fmt.Errorf("ExpireTime this(%v) Not Equal that(%v)", this.ExpireTime, that1.ExpireTime)
	}
	if this.Ext != that1.Ext {
		return fmt.Errorf("Ext this(%v) Not Equal that(%v)", this.Ext, that1.Ext)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Desc != that1.Desc {
		return fmt.Errorf("Desc this(%v) Not Equal that(%v)", this.Desc, that1.Desc)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Img != that1.Img {
		return fmt.Errorf("Img this(%v) Not Equal that(%v)", this.Img, that1.Img)
	}
	if this.Conditions != that1.Conditions {
		return fmt.Errorf("Conditions this(%v) Not Equal that(%v)", this.Conditions, that1.Conditions)
	}
	if this.Price != that1.Price {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if this.GoodsExt != that1.GoodsExt {
		return fmt.Errorf("GoodsExt this(%v) Not Equal that(%v)", this.GoodsExt, that1.GoodsExt)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BagItemDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BagItemDetail)
	if !ok {
		that2, ok := that.(BagItemDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UgId != that1.UgId {
		return false
	}
	if this.GoodsId != that1.GoodsId {
		return false
	}
	if this.ExpireTime != that1.ExpireTime {
		return false
	}
	if this.Ext != that1.Ext {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Img != that1.Img {
		return false
	}
	if this.Conditions != that1.Conditions {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.GoodsExt != that1.GoodsExt {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BagItemsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BagItemsResponse)
	if !ok {
		that2, ok := that.(BagItemsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BagItemsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BagItemsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BagItemsResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !this.Data.Equal(that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BagItemsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BagItemsResponse)
	if !ok {
		that2, ok := that.(BagItemsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Bag) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Bag)
	if !ok {
		that2, ok := that.(Bag)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Bag")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Bag but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Bag but is not nil && this == nil")
	}
	if len(this.Tabs) != len(that1.Tabs) {
		return fmt.Errorf("Tabs this(%v) Not Equal that(%v)", len(this.Tabs), len(that1.Tabs))
	}
	for i := range this.Tabs {
		if !this.Tabs[i].Equal(that1.Tabs[i]) {
			return fmt.Errorf("Tabs this[%v](%v) Not Equal that[%v](%v)", i, this.Tabs[i], i, that1.Tabs[i])
		}
	}
	if len(this.NewGoods) != len(that1.NewGoods) {
		return fmt.Errorf("NewGoods this(%v) Not Equal that(%v)", len(this.NewGoods), len(that1.NewGoods))
	}
	for i := range this.NewGoods {
		if !this.NewGoods[i].Equal(that1.NewGoods[i]) {
			return fmt.Errorf("NewGoods this[%v](%v) Not Equal that[%v](%v)", i, this.NewGoods[i], i, that1.NewGoods[i])
		}
	}
	if len(this.AllGoods) != len(that1.AllGoods) {
		return fmt.Errorf("AllGoods this(%v) Not Equal that(%v)", len(this.AllGoods), len(that1.AllGoods))
	}
	for i := range this.AllGoods {
		if !this.AllGoods[i].Equal(that1.AllGoods[i]) {
			return fmt.Errorf("AllGoods this[%v](%v) Not Equal that[%v](%v)", i, this.AllGoods[i], i, that1.AllGoods[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Bag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag)
	if !ok {
		that2, ok := that.(Bag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tabs) != len(that1.Tabs) {
		return false
	}
	for i := range this.Tabs {
		if !this.Tabs[i].Equal(that1.Tabs[i]) {
			return false
		}
	}
	if len(this.NewGoods) != len(that1.NewGoods) {
		return false
	}
	for i := range this.NewGoods {
		if !this.NewGoods[i].Equal(that1.NewGoods[i]) {
			return false
		}
	}
	if len(this.AllGoods) != len(that1.AllGoods) {
		return false
	}
	for i := range this.AllGoods {
		if !this.AllGoods[i].Equal(that1.AllGoods[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BagTab) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BagTab)
	if !ok {
		that2, ok := that.(BagTab)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BagTab")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BagTab but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BagTab but is not nil && this == nil")
	}
	if this.LabelId != that1.LabelId {
		return fmt.Errorf("LabelId this(%v) Not Equal that(%v)", this.LabelId, that1.LabelId)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BagTab) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BagTab)
	if !ok {
		that2, ok := that.(BagTab)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LabelId != that1.LabelId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BagTabs) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BagTabs)
	if !ok {
		that2, ok := that.(BagTabs)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BagTabs")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BagTabs but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BagTabs but is not nil && this == nil")
	}
	if len(this.Items) != len(that1.Items) {
		return fmt.Errorf("Items this(%v) Not Equal that(%v)", len(this.Items), len(that1.Items))
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return fmt.Errorf("Items this[%v](%v) Not Equal that[%v](%v)", i, this.Items[i], i, that1.Items[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BagTabs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BagTabs)
	if !ok {
		that2, ok := that.(BagTabs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BagItem) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BagItem)
	if !ok {
		that2, ok := that.(BagItem)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BagItem")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BagItem but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BagItem but is not nil && this == nil")
	}
	if this.UgId != that1.UgId {
		return fmt.Errorf("UgId this(%v) Not Equal that(%v)", this.UgId, that1.UgId)
	}
	if this.GoodsId != that1.GoodsId {
		return fmt.Errorf("GoodsId this(%v) Not Equal that(%v)", this.GoodsId, that1.GoodsId)
	}
	if this.Num != that1.Num {
		return fmt.Errorf("Num this(%v) Not Equal that(%v)", this.Num, that1.Num)
	}
	if this.ExpireTime != that1.ExpireTime {
		return fmt.Errorf("ExpireTime this(%v) Not Equal that(%v)", this.ExpireTime, that1.ExpireTime)
	}
	if this.Ext != that1.Ext {
		return fmt.Errorf("Ext this(%v) Not Equal that(%v)", this.Ext, that1.Ext)
	}
	if this.TabId != that1.TabId {
		return fmt.Errorf("TabId this(%v) Not Equal that(%v)", this.TabId, that1.TabId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BagItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BagItem)
	if !ok {
		that2, ok := that.(BagItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UgId != that1.UgId {
		return false
	}
	if this.GoodsId != that1.GoodsId {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.ExpireTime != that1.ExpireTime {
		return false
	}
	if this.Ext != that1.Ext {
		return false
	}
	if this.TabId != that1.TabId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoodsUseRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoodsUseRequest)
	if !ok {
		that2, ok := that.(GoodsUseRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GoodsUseRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GoodsUseRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GoodsUseRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.GoodsId != that1.GoodsId {
		return fmt.Errorf("GoodsId this(%v) Not Equal that(%v)", this.GoodsId, that1.GoodsId)
	}
	if this.UgId != that1.UgId {
		return fmt.Errorf("UgId this(%v) Not Equal that(%v)", this.UgId, that1.UgId)
	}
	if this.TargetId != that1.TargetId {
		return fmt.Errorf("TargetId this(%v) Not Equal that(%v)", this.TargetId, that1.TargetId)
	}
	if this.Num != that1.Num {
		return fmt.Errorf("Num this(%v) Not Equal that(%v)", this.Num, that1.Num)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoodsUseRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoodsUseRequest)
	if !ok {
		that2, ok := that.(GoodsUseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.GoodsId != that1.GoodsId {
		return false
	}
	if this.UgId != that1.UgId {
		return false
	}
	if this.TargetId != that1.TargetId {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SynthesisRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SynthesisRequest)
	if !ok {
		that2, ok := that.(SynthesisRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SynthesisRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SynthesisRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SynthesisRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.GoodsId != that1.GoodsId {
		return fmt.Errorf("GoodsId this(%v) Not Equal that(%v)", this.GoodsId, that1.GoodsId)
	}
	if this.UgId != that1.UgId {
		return fmt.Errorf("UgId this(%v) Not Equal that(%v)", this.UgId, that1.UgId)
	}
	if this.Num != that1.Num {
		return fmt.Errorf("Num this(%v) Not Equal that(%v)", this.Num, that1.Num)
	}
	if this.TargetId != that1.TargetId {
		return fmt.Errorf("TargetId this(%v) Not Equal that(%v)", this.TargetId, that1.TargetId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SynthesisRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SynthesisRequest)
	if !ok {
		that2, ok := that.(SynthesisRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.GoodsId != that1.GoodsId {
		return false
	}
	if this.UgId != that1.UgId {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.TargetId != that1.TargetId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExchangeRealGoodsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ExchangeRealGoodsRequest)
	if !ok {
		that2, ok := that.(ExchangeRealGoodsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ExchangeRealGoodsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ExchangeRealGoodsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ExchangeRealGoodsRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.GoodsId != that1.GoodsId {
		return fmt.Errorf("GoodsId this(%v) Not Equal that(%v)", this.GoodsId, that1.GoodsId)
	}
	if this.UgId != that1.UgId {
		return fmt.Errorf("UgId this(%v) Not Equal that(%v)", this.UgId, that1.UgId)
	}
	if this.RealName != that1.RealName {
		return fmt.Errorf("RealName this(%v) Not Equal that(%v)", this.RealName, that1.RealName)
	}
	if this.Addr != that1.Addr {
		return fmt.Errorf("Addr this(%v) Not Equal that(%v)", this.Addr, that1.Addr)
	}
	if this.Phone != that1.Phone {
		return fmt.Errorf("Phone this(%v) Not Equal that(%v)", this.Phone, that1.Phone)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ExchangeRealGoodsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExchangeRealGoodsRequest)
	if !ok {
		that2, ok := that.(ExchangeRealGoodsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.GoodsId != that1.GoodsId {
		return false
	}
	if this.UgId != that1.UgId {
		return false
	}
	if this.RealName != that1.RealName {
		return false
	}
	if this.Addr != that1.Addr {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExHistoryRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ExHistoryRequest)
	if !ok {
		that2, ok := that.(ExHistoryRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ExHistoryRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ExHistoryRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ExHistoryRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.New != that1.New {
		return fmt.Errorf("New this(%v) Not Equal that(%v)", this.New, that1.New)
	}
	if this.PreIndex != that1.PreIndex {
		return fmt.Errorf("PreIndex this(%v) Not Equal that(%v)", this.PreIndex, that1.PreIndex)
	}
	if this.PageSize != that1.PageSize {
		return fmt.Errorf("PageSize this(%v) Not Equal that(%v)", this.PageSize, that1.PageSize)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ExHistoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExHistoryRequest)
	if !ok {
		that2, ok := that.(ExHistoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.New != that1.New {
		return false
	}
	if this.PreIndex != that1.PreIndex {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExChangeItem) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ExChangeItem)
	if !ok {
		that2, ok := that.(ExChangeItem)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ExChangeItem")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ExChangeItem but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ExChangeItem but is not nil && this == nil")
	}
	if this.GoodsName != that1.GoodsName {
		return fmt.Errorf("GoodsName this(%v) Not Equal that(%v)", this.GoodsName, that1.GoodsName)
	}
	if this.Ext != that1.Ext {
		return fmt.Errorf("Ext this(%v) Not Equal that(%v)", this.Ext, that1.Ext)
	}
	if this.CreateTime != that1.CreateTime {
		return fmt.Errorf("CreateTime this(%v) Not Equal that(%v)", this.CreateTime, that1.CreateTime)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ExChangeItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExChangeItem)
	if !ok {
		that2, ok := that.(ExChangeItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GoodsName != that1.GoodsName {
		return false
	}
	if this.Ext != that1.Ext {
		return false
	}
	if this.CreateTime != that1.CreateTime {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExHistoryResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ExHistoryResponse)
	if !ok {
		that2, ok := that.(ExHistoryResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ExHistoryResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ExHistoryResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ExHistoryResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if len(this.Data) != len(that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", len(this.Data), len(that1.Data))
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return fmt.Errorf("Data this[%v](%v) Not Equal that[%v](%v)", i, this.Data[i], i, that1.Data[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ExHistoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExHistoryResponse)
	if !ok {
		that2, ok := that.(ExHistoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExChangeTelFeeRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ExChangeTelFeeRequest)
	if !ok {
		that2, ok := that.(ExChangeTelFeeRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ExChangeTelFeeRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ExChangeTelFeeRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ExChangeTelFeeRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.GoodsId != that1.GoodsId {
		return fmt.Errorf("GoodsId this(%v) Not Equal that(%v)", this.GoodsId, that1.GoodsId)
	}
	if this.UgId != that1.UgId {
		return fmt.Errorf("UgId this(%v) Not Equal that(%v)", this.UgId, that1.UgId)
	}
	if this.Phone != that1.Phone {
		return fmt.Errorf("Phone this(%v) Not Equal that(%v)", this.Phone, that1.Phone)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ExChangeTelFeeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExChangeTelFeeRequest)
	if !ok {
		that2, ok := that.(ExChangeTelFeeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.GoodsId != that1.GoodsId {
		return false
	}
	if this.UgId != that1.UgId {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoodsUseResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoodsUseResponse)
	if !ok {
		that2, ok := that.(GoodsUseResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GoodsUseResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GoodsUseResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GoodsUseResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if this.Num != that1.Num {
		return fmt.Errorf("Num this(%v) Not Equal that(%v)", this.Num, that1.Num)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoodsUseResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoodsUseResponse)
	if !ok {
		that2, ok := that.(GoodsUseResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoodsListRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoodsListRequest)
	if !ok {
		that2, ok := that.(GoodsListRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GoodsListRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GoodsListRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GoodsListRequest but is not nil && this == nil")
	}
	if len(this.GoodsId) != len(that1.GoodsId) {
		return fmt.Errorf("GoodsId this(%v) Not Equal that(%v)", len(this.GoodsId), len(that1.GoodsId))
	}
	for i := range this.GoodsId {
		if this.GoodsId[i] != that1.GoodsId[i] {
			return fmt.Errorf("GoodsId this[%v](%v) Not Equal that[%v](%v)", i, this.GoodsId[i], i, that1.GoodsId[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoodsListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoodsListRequest)
	if !ok {
		that2, ok := that.(GoodsListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.GoodsId) != len(that1.GoodsId) {
		return false
	}
	for i := range this.GoodsId {
		if this.GoodsId[i] != that1.GoodsId[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoodsItem) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoodsItem)
	if !ok {
		that2, ok := that.(GoodsItem)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GoodsItem")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GoodsItem but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GoodsItem but is not nil && this == nil")
	}
	if this.GoodsId != that1.GoodsId {
		return fmt.Errorf("GoodsId this(%v) Not Equal that(%v)", this.GoodsId, that1.GoodsId)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Desc != that1.Desc {
		return fmt.Errorf("Desc this(%v) Not Equal that(%v)", this.Desc, that1.Desc)
	}
	if this.GoodsType != that1.GoodsType {
		return fmt.Errorf("GoodsType this(%v) Not Equal that(%v)", this.GoodsType, that1.GoodsType)
	}
	if this.Label != that1.Label {
		return fmt.Errorf("Label this(%v) Not Equal that(%v)", this.Label, that1.Label)
	}
	if this.Img != that1.Img {
		return fmt.Errorf("Img this(%v) Not Equal that(%v)", this.Img, that1.Img)
	}
	if this.Conditions != that1.Conditions {
		return fmt.Errorf("Conditions this(%v) Not Equal that(%v)", this.Conditions, that1.Conditions)
	}
	if this.GoodsExt != that1.GoodsExt {
		return fmt.Errorf("GoodsExt this(%v) Not Equal that(%v)", this.GoodsExt, that1.GoodsExt)
	}
	if this.AppVersion != that1.AppVersion {
		return fmt.Errorf("AppVersion this(%v) Not Equal that(%v)", this.AppVersion, that1.AppVersion)
	}
	if this.Pay != that1.Pay {
		return fmt.Errorf("Pay this(%v) Not Equal that(%v)", this.Pay, that1.Pay)
	}
	if this.Add != that1.Add {
		return fmt.Errorf("Add this(%v) Not Equal that(%v)", this.Add, that1.Add)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoodsItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoodsItem)
	if !ok {
		that2, ok := that.(GoodsItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GoodsId != that1.GoodsId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Desc != that1.Desc {
		return false
	}
	if this.GoodsType != that1.GoodsType {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Img != that1.Img {
		return false
	}
	if this.Conditions != that1.Conditions {
		return false
	}
	if this.GoodsExt != that1.GoodsExt {
		return false
	}
	if this.AppVersion != that1.AppVersion {
		return false
	}
	if this.Pay != that1.Pay {
		return false
	}
	if this.Add != that1.Add {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoodsListResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoodsListResponse)
	if !ok {
		that2, ok := that.(GoodsListResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GoodsListResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GoodsListResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GoodsListResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if len(this.Goods) != len(that1.Goods) {
		return fmt.Errorf("Goods this(%v) Not Equal that(%v)", len(this.Goods), len(that1.Goods))
	}
	for i := range this.Goods {
		if !this.Goods[i].Equal(that1.Goods[i]) {
			return fmt.Errorf("Goods this[%v](%v) Not Equal that[%v](%v)", i, this.Goods[i], i, that1.Goods[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoodsListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoodsListResponse)
	if !ok {
		that2, ok := that.(GoodsListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if len(this.Goods) != len(that1.Goods) {
		return false
	}
	for i := range this.Goods {
		if !this.Goods[i].Equal(that1.Goods[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *RPCErrorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCErrorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateGoodsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGoodsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Desc)))
	i += copy(dAtA[i:], m.Desc)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x22
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Img)))
	i += copy(dAtA[i:], m.Img)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Conditions)))
	i += copy(dAtA[i:], m.Conditions)
	dAtA[i] = 0x30
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Price))
	dAtA[i] = 0x38
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.PriceOrg))
	dAtA[i] = 0x42
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.GoodsExt)))
	i += copy(dAtA[i:], m.GoodsExt)
	dAtA[i] = 0x48
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.ExpireTime))
	dAtA[i] = 0x50
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.CreateTime))
	dAtA[i] = 0x58
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.CreateBy))
	dAtA[i] = 0x60
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Status))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoodsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GoodsId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Desc)))
	i += copy(dAtA[i:], m.Desc)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Img)))
	i += copy(dAtA[i:], m.Img)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Conditions)))
	i += copy(dAtA[i:], m.Conditions)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Price))
	dAtA[i] = 0x40
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.PriceOrg))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.GoodsExt)))
	i += copy(dAtA[i:], m.GoodsExt)
	dAtA[i] = 0x50
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.ExpireTime))
	dAtA[i] = 0x58
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x60
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.AddTime))
	dAtA[i] = 0x68
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.CreateBy))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoodsPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsPrice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GpId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GoodsId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.ExchangePrice))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.ExchangeType))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Status))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoodsID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Id))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Mid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mid) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Id))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BagItemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagItemInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.UgId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GoodsId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.ExpireTime))
	dAtA[i] = 0x22
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Ext)))
	i += copy(dAtA[i:], m.Ext)
	dAtA[i] = 0x28
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.AddTime))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x42
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Img)))
	i += copy(dAtA[i:], m.Img)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BagItemDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagItemDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.UgId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GoodsId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.ExpireTime))
	dAtA[i] = 0x22
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Ext)))
	i += copy(dAtA[i:], m.Ext)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Desc)))
	i += copy(dAtA[i:], m.Desc)
	dAtA[i] = 0x38
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x42
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Img)))
	i += copy(dAtA[i:], m.Img)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Conditions)))
	i += copy(dAtA[i:], m.Conditions)
	dAtA[i] = 0x50
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Price))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.GoodsExt)))
	i += copy(dAtA[i:], m.GoodsExt)
	dAtA[i] = 0x68
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Status))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BagItemsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagItemsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	if m.Data == nil {
		return 0, proto.NewRequiredNotSetError("data")
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGoods(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Bag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tabs) > 0 {
		for _, msg := range m.Tabs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGoods(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NewGoods) > 0 {
		for _, msg := range m.NewGoods {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGoods(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AllGoods) > 0 {
		for _, msg := range m.AllGoods {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGoods(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BagTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagTab) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.LabelId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BagTabs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagTabs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGoods(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BagItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.UgId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GoodsId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Num))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.ExpireTime))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Ext)))
	i += copy(dAtA[i:], m.Ext)
	dAtA[i] = 0x30
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.TabId))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoodsUseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsUseRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GoodsId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.UgId))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.TargetId))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Num))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SynthesisRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SynthesisRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GoodsId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.UgId))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Num))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.TargetId))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExchangeRealGoodsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeRealGoodsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GoodsId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.UgId))
	dAtA[i] = 0x22
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.RealName)))
	i += copy(dAtA[i:], m.RealName)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Addr)))
	i += copy(dAtA[i:], m.Addr)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Phone)))
	i += copy(dAtA[i:], m.Phone)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.New))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.PreIndex))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.PageSize))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExChangeItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExChangeItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.GoodsName)))
	i += copy(dAtA[i:], m.GoodsName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Ext)))
	i += copy(dAtA[i:], m.Ext)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.CreateTime))
	dAtA[i] = 0x22
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Status)))
	i += copy(dAtA[i:], m.Status)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGoods(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExChangeTelFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExChangeTelFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GoodsId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.UgId))
	dAtA[i] = 0x22
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Phone)))
	i += copy(dAtA[i:], m.Phone)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoodsUseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsUseResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Num))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoodsListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GoodsId) > 0 {
		for _, num := range m.GoodsId {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGoods(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoodsItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GoodsId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Desc)))
	i += copy(dAtA[i:], m.Desc)
	dAtA[i] = 0x20
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.GoodsType))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Label))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Img)))
	i += copy(dAtA[i:], m.Img)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Conditions)))
	i += copy(dAtA[i:], m.Conditions)
	dAtA[i] = 0x42
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.GoodsExt)))
	i += copy(dAtA[i:], m.GoodsExt)
	dAtA[i] = 0x48
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.AppVersion))
	dAtA[i] = 0x52
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Pay)))
	i += copy(dAtA[i:], m.Pay)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Add)))
	i += copy(dAtA[i:], m.Add)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoodsListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGoods(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGoods(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	if len(m.Goods) > 0 {
		for _, msg := range m.Goods {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGoods(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintGoods(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRPCErrorResponse(r randyGoods, easy bool) *RPCErrorResponse {
	this := &RPCErrorResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringGoods(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 3)
	}
	return this
}

func NewPopulatedCreateGoodsRequest(r randyGoods, easy bool) *CreateGoodsRequest {
	this := &CreateGoodsRequest{}
	this.Name = string(randStringGoods(r))
	this.Desc = string(randStringGoods(r))
	this.Type = uint32(r.Uint32())
	this.Img = string(randStringGoods(r))
	this.Conditions = string(randStringGoods(r))
	this.Price = uint32(r.Uint32())
	this.PriceOrg = uint32(r.Uint32())
	this.GoodsExt = string(randStringGoods(r))
	this.ExpireTime = uint32(r.Uint32())
	this.CreateTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreateTime *= -1
	}
	this.CreateBy = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreateBy *= -1
	}
	this.Status = GoodsStatus([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 13)
	}
	return this
}

func NewPopulatedGoodsInfo(r randyGoods, easy bool) *GoodsInfo {
	this := &GoodsInfo{}
	this.GoodsId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GoodsId *= -1
	}
	this.Name = string(randStringGoods(r))
	this.Desc = string(randStringGoods(r))
	this.Type = uint32(r.Uint32())
	this.Img = string(randStringGoods(r))
	this.Conditions = string(randStringGoods(r))
	this.Price = uint32(r.Uint32())
	this.PriceOrg = uint32(r.Uint32())
	this.GoodsExt = string(randStringGoods(r))
	this.ExpireTime = uint32(r.Uint32())
	this.Status = GoodsStatus([]int32{0, 1, 2}[r.Intn(3)])
	this.AddTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AddTime *= -1
	}
	this.CreateBy = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreateBy *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 14)
	}
	return this
}

func NewPopulatedGoodsPrice(r randyGoods, easy bool) *GoodsPrice {
	this := &GoodsPrice{}
	this.GpId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GpId *= -1
	}
	this.GoodsId = uint32(r.Uint32())
	this.ExchangePrice = uint32(r.Uint32())
	this.ExchangeType = uint32(r.Uint32())
	this.Status = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 6)
	}
	return this
}

func NewPopulatedGoodsID(r randyGoods, easy bool) *GoodsID {
	this := &GoodsID{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 2)
	}
	return this
}

func NewPopulatedMid(r randyGoods, easy bool) *Mid {
	this := &Mid{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 2)
	}
	return this
}

func NewPopulatedBagItemInfo(r randyGoods, easy bool) *BagItemInfo {
	this := &BagItemInfo{}
	this.UgId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UgId *= -1
	}
	this.GoodsId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GoodsId *= -1
	}
	this.ExpireTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ExpireTime *= -1
	}
	this.Ext = string(randStringGoods(r))
	this.AddTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AddTime *= -1
	}
	this.Name = string(randStringGoods(r))
	this.Type = uint32(r.Uint32())
	this.Img = string(randStringGoods(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 9)
	}
	return this
}

func NewPopulatedBagItemDetail(r randyGoods, easy bool) *BagItemDetail {
	this := &BagItemDetail{}
	this.UgId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UgId *= -1
	}
	this.GoodsId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GoodsId *= -1
	}
	this.ExpireTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ExpireTime *= -1
	}
	this.Ext = string(randStringGoods(r))
	this.Name = string(randStringGoods(r))
	this.Desc = string(randStringGoods(r))
	this.Type = uint32(r.Uint32())
	this.Img = string(randStringGoods(r))
	this.Conditions = string(randStringGoods(r))
	this.Price = uint32(r.Uint32())
	this.GoodsExt = string(randStringGoods(r))
	this.Status = GoodsStatus([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 14)
	}
	return this
}

func NewPopulatedBagItemsResponse(r randyGoods, easy bool) *BagItemsResponse {
	this := &BagItemsResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringGoods(r))
	this.Data = NewPopulatedBag(r, easy)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 4)
	}
	return this
}

func NewPopulatedBag(r randyGoods, easy bool) *Bag {
	this := &Bag{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Tabs = make([]*BagTab, v1)
		for i := 0; i < v1; i++ {
			this.Tabs[i] = NewPopulatedBagTab(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.NewGoods = make([]*BagItem, v2)
		for i := 0; i < v2; i++ {
			this.NewGoods[i] = NewPopulatedBagItem(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.AllGoods = make([]*BagItem, v3)
		for i := 0; i < v3; i++ {
			this.AllGoods[i] = NewPopulatedBagItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 4)
	}
	return this
}

func NewPopulatedBagTab(r randyGoods, easy bool) *BagTab {
	this := &BagTab{}
	this.LabelId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LabelId *= -1
	}
	this.Name = string(randStringGoods(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 3)
	}
	return this
}

func NewPopulatedBagTabs(r randyGoods, easy bool) *BagTabs {
	this := &BagTabs{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Items = make([]*BagTab, v4)
		for i := 0; i < v4; i++ {
			this.Items[i] = NewPopulatedBagTab(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 2)
	}
	return this
}

func NewPopulatedBagItem(r randyGoods, easy bool) *BagItem {
	this := &BagItem{}
	this.UgId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UgId *= -1
	}
	this.GoodsId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GoodsId *= -1
	}
	this.Num = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	this.ExpireTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ExpireTime *= -1
	}
	this.Ext = string(randStringGoods(r))
	this.TabId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TabId *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 7)
	}
	return this
}

func NewPopulatedGoodsUseRequest(r randyGoods, easy bool) *GoodsUseRequest {
	this := &GoodsUseRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.GoodsId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GoodsId *= -1
	}
	this.UgId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UgId *= -1
	}
	this.TargetId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TargetId *= -1
	}
	this.Num = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 6)
	}
	return this
}

func NewPopulatedSynthesisRequest(r randyGoods, easy bool) *SynthesisRequest {
	this := &SynthesisRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.GoodsId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GoodsId *= -1
	}
	this.UgId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UgId *= -1
	}
	this.Num = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	this.TargetId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TargetId *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 6)
	}
	return this
}

func NewPopulatedExchangeRealGoodsRequest(r randyGoods, easy bool) *ExchangeRealGoodsRequest {
	this := &ExchangeRealGoodsRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.GoodsId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GoodsId *= -1
	}
	this.UgId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UgId *= -1
	}
	this.RealName = string(randStringGoods(r))
	this.Addr = string(randStringGoods(r))
	this.Phone = string(randStringGoods(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 7)
	}
	return this
}

func NewPopulatedExHistoryRequest(r randyGoods, easy bool) *ExHistoryRequest {
	this := &ExHistoryRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.New = uint32(r.Uint32())
	this.PreIndex = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.PreIndex *= -1
	}
	this.PageSize = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 5)
	}
	return this
}

func NewPopulatedExChangeItem(r randyGoods, easy bool) *ExChangeItem {
	this := &ExChangeItem{}
	this.GoodsName = string(randStringGoods(r))
	this.Ext = string(randStringGoods(r))
	this.CreateTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreateTime *= -1
	}
	this.Status = string(randStringGoods(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 5)
	}
	return this
}

func NewPopulatedExHistoryResponse(r randyGoods, easy bool) *ExHistoryResponse {
	this := &ExHistoryResponse{}
	this.Status = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringGoods(r))
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Data = make([]*ExChangeItem, v5)
		for i := 0; i < v5; i++ {
			this.Data[i] = NewPopulatedExChangeItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 4)
	}
	return this
}

func NewPopulatedExChangeTelFeeRequest(r randyGoods, easy bool) *ExChangeTelFeeRequest {
	this := &ExChangeTelFeeRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.GoodsId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GoodsId *= -1
	}
	this.UgId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UgId *= -1
	}
	this.Phone = string(randStringGoods(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 5)
	}
	return this
}

func NewPopulatedGoodsUseResponse(r randyGoods, easy bool) *GoodsUseResponse {
	this := &GoodsUseResponse{}
	this.Status = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringGoods(r))
	this.Num = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 4)
	}
	return this
}

func NewPopulatedGoodsListRequest(r randyGoods, easy bool) *GoodsListRequest {
	this := &GoodsListRequest{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.GoodsId = make([]int64, v6)
		for i := 0; i < v6; i++ {
			this.GoodsId[i] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.GoodsId[i] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 2)
	}
	return this
}

func NewPopulatedGoodsItem(r randyGoods, easy bool) *GoodsItem {
	this := &GoodsItem{}
	this.GoodsId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.GoodsId *= -1
	}
	this.Name = string(randStringGoods(r))
	this.Desc = string(randStringGoods(r))
	this.GoodsType = uint32(r.Uint32())
	this.Label = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Label *= -1
	}
	this.Img = string(randStringGoods(r))
	this.Conditions = string(randStringGoods(r))
	this.GoodsExt = string(randStringGoods(r))
	this.AppVersion = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.AppVersion *= -1
	}
	this.Pay = string(randStringGoods(r))
	this.Add = string(randStringGoods(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 12)
	}
	return this
}

func NewPopulatedGoodsListResponse(r randyGoods, easy bool) *GoodsListResponse {
	this := &GoodsListResponse{}
	this.Status = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringGoods(r))
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Goods = make([]*GoodsItem, v7)
		for i := 0; i < v7; i++ {
			this.Goods[i] = NewPopulatedGoodsItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGoods(r, 4)
	}
	return this
}

type randyGoods interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGoods(r randyGoods) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGoods(r randyGoods) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneGoods(r)
	}
	return string(tmps)
}
func randUnrecognizedGoods(r randyGoods, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGoods(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGoods(dAtA []byte, r randyGoods, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGoods(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateGoods(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateGoods(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGoods(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGoods(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGoods(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGoods(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RPCErrorResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovGoods(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateGoodsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Desc)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.Type))
	l = len(m.Img)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Conditions)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.Price))
	n += 1 + sovGoods(uint64(m.PriceOrg))
	l = len(m.GoodsExt)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.ExpireTime))
	n += 1 + sovGoods(uint64(m.CreateTime))
	n += 1 + sovGoods(uint64(m.CreateBy))
	n += 1 + sovGoods(uint64(m.Status))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.GoodsId))
	l = len(m.Name)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Desc)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.Type))
	l = len(m.Img)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Conditions)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.Price))
	n += 1 + sovGoods(uint64(m.PriceOrg))
	l = len(m.GoodsExt)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.ExpireTime))
	n += 1 + sovGoods(uint64(m.Status))
	n += 1 + sovGoods(uint64(m.AddTime))
	n += 1 + sovGoods(uint64(m.CreateBy))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsPrice) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.GpId))
	n += 1 + sovGoods(uint64(m.GoodsId))
	n += 1 + sovGoods(uint64(m.ExchangePrice))
	n += 1 + sovGoods(uint64(m.ExchangeType))
	n += 1 + sovGoods(uint64(m.Status))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsID) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Id))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Mid) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Id))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BagItemInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.UgId))
	n += 1 + sovGoods(uint64(m.GoodsId))
	n += 1 + sovGoods(uint64(m.ExpireTime))
	l = len(m.Ext)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.AddTime))
	l = len(m.Name)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.Type))
	l = len(m.Img)
	n += 1 + l + sovGoods(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BagItemDetail) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.UgId))
	n += 1 + sovGoods(uint64(m.GoodsId))
	n += 1 + sovGoods(uint64(m.ExpireTime))
	l = len(m.Ext)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Desc)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.Type))
	l = len(m.Img)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Conditions)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.Price))
	l = len(m.GoodsExt)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.Status))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BagItemsResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovGoods(uint64(l))
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovGoods(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bag) Size() (n int) {
	var l int
	_ = l
	if len(m.Tabs) > 0 {
		for _, e := range m.Tabs {
			l = e.Size()
			n += 1 + l + sovGoods(uint64(l))
		}
	}
	if len(m.NewGoods) > 0 {
		for _, e := range m.NewGoods {
			l = e.Size()
			n += 1 + l + sovGoods(uint64(l))
		}
	}
	if len(m.AllGoods) > 0 {
		for _, e := range m.AllGoods {
			l = e.Size()
			n += 1 + l + sovGoods(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BagTab) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.LabelId))
	l = len(m.Name)
	n += 1 + l + sovGoods(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BagTabs) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGoods(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BagItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.UgId))
	n += 1 + sovGoods(uint64(m.GoodsId))
	n += 1 + sovGoods(uint64(m.Num))
	n += 1 + sovGoods(uint64(m.ExpireTime))
	l = len(m.Ext)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.TabId))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsUseRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Mid))
	n += 1 + sovGoods(uint64(m.GoodsId))
	n += 1 + sovGoods(uint64(m.UgId))
	n += 1 + sovGoods(uint64(m.TargetId))
	n += 1 + sovGoods(uint64(m.Num))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SynthesisRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Mid))
	n += 1 + sovGoods(uint64(m.GoodsId))
	n += 1 + sovGoods(uint64(m.UgId))
	n += 1 + sovGoods(uint64(m.Num))
	n += 1 + sovGoods(uint64(m.TargetId))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeRealGoodsRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Mid))
	n += 1 + sovGoods(uint64(m.GoodsId))
	n += 1 + sovGoods(uint64(m.UgId))
	l = len(m.RealName)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Addr)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Phone)
	n += 1 + l + sovGoods(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExHistoryRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Mid))
	n += 1 + sovGoods(uint64(m.New))
	n += 1 + sovGoods(uint64(m.PreIndex))
	n += 1 + sovGoods(uint64(m.PageSize))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExChangeItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.GoodsName)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Ext)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.CreateTime))
	l = len(m.Status)
	n += 1 + l + sovGoods(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExHistoryResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovGoods(uint64(l))
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGoods(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExChangeTelFeeRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Mid))
	n += 1 + sovGoods(uint64(m.GoodsId))
	n += 1 + sovGoods(uint64(m.UgId))
	l = len(m.Phone)
	n += 1 + l + sovGoods(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsUseResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.Num))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsListRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.GoodsId) > 0 {
		for _, e := range m.GoodsId {
			n += 1 + sovGoods(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.GoodsId))
	l = len(m.Name)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Desc)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.GoodsType))
	n += 1 + sovGoods(uint64(m.Label))
	l = len(m.Img)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Conditions)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.GoodsExt)
	n += 1 + l + sovGoods(uint64(l))
	n += 1 + sovGoods(uint64(m.AppVersion))
	l = len(m.Pay)
	n += 1 + l + sovGoods(uint64(l))
	l = len(m.Add)
	n += 1 + l + sovGoods(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsListResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGoods(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovGoods(uint64(l))
	if len(m.Goods) > 0 {
		for _, e := range m.Goods {
			l = e.Size()
			n += 1 + l + sovGoods(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGoods(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGoods(x uint64) (n int) {
	return sovGoods(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RPCErrorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RPCErrorResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateGoodsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateGoodsRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Img:` + fmt.Sprintf("%v", this.Img) + `,`,
		`Conditions:` + fmt.Sprintf("%v", this.Conditions) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`PriceOrg:` + fmt.Sprintf("%v", this.PriceOrg) + `,`,
		`GoodsExt:` + fmt.Sprintf("%v", this.GoodsExt) + `,`,
		`ExpireTime:` + fmt.Sprintf("%v", this.ExpireTime) + `,`,
		`CreateTime:` + fmt.Sprintf("%v", this.CreateTime) + `,`,
		`CreateBy:` + fmt.Sprintf("%v", this.CreateBy) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoodsInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoodsInfo{`,
		`GoodsId:` + fmt.Sprintf("%v", this.GoodsId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Img:` + fmt.Sprintf("%v", this.Img) + `,`,
		`Conditions:` + fmt.Sprintf("%v", this.Conditions) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`PriceOrg:` + fmt.Sprintf("%v", this.PriceOrg) + `,`,
		`GoodsExt:` + fmt.Sprintf("%v", this.GoodsExt) + `,`,
		`ExpireTime:` + fmt.Sprintf("%v", this.ExpireTime) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`AddTime:` + fmt.Sprintf("%v", this.AddTime) + `,`,
		`CreateBy:` + fmt.Sprintf("%v", this.CreateBy) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoodsPrice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoodsPrice{`,
		`GpId:` + fmt.Sprintf("%v", this.GpId) + `,`,
		`GoodsId:` + fmt.Sprintf("%v", this.GoodsId) + `,`,
		`ExchangePrice:` + fmt.Sprintf("%v", this.ExchangePrice) + `,`,
		`ExchangeType:` + fmt.Sprintf("%v", this.ExchangeType) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoodsID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoodsID{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Mid) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Mid{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BagItemInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BagItemInfo{`,
		`UgId:` + fmt.Sprintf("%v", this.UgId) + `,`,
		`GoodsId:` + fmt.Sprintf("%v", this.GoodsId) + `,`,
		`ExpireTime:` + fmt.Sprintf("%v", this.ExpireTime) + `,`,
		`Ext:` + fmt.Sprintf("%v", this.Ext) + `,`,
		`AddTime:` + fmt.Sprintf("%v", this.AddTime) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Img:` + fmt.Sprintf("%v", this.Img) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BagItemDetail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BagItemDetail{`,
		`UgId:` + fmt.Sprintf("%v", this.UgId) + `,`,
		`GoodsId:` + fmt.Sprintf("%v", this.GoodsId) + `,`,
		`ExpireTime:` + fmt.Sprintf("%v", this.ExpireTime) + `,`,
		`Ext:` + fmt.Sprintf("%v", this.Ext) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Img:` + fmt.Sprintf("%v", this.Img) + `,`,
		`Conditions:` + fmt.Sprintf("%v", this.Conditions) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`GoodsExt:` + fmt.Sprintf("%v", this.GoodsExt) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BagItemsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BagItemsResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Bag", "Bag", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bag{`,
		`Tabs:` + strings.Replace(fmt.Sprintf("%v", this.Tabs), "BagTab", "BagTab", 1) + `,`,
		`NewGoods:` + strings.Replace(fmt.Sprintf("%v", this.NewGoods), "BagItem", "BagItem", 1) + `,`,
		`AllGoods:` + strings.Replace(fmt.Sprintf("%v", this.AllGoods), "BagItem", "BagItem", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BagTab) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BagTab{`,
		`LabelId:` + fmt.Sprintf("%v", this.LabelId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BagTabs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BagTabs{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "BagTab", "BagTab", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BagItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BagItem{`,
		`UgId:` + fmt.Sprintf("%v", this.UgId) + `,`,
		`GoodsId:` + fmt.Sprintf("%v", this.GoodsId) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`ExpireTime:` + fmt.Sprintf("%v", this.ExpireTime) + `,`,
		`Ext:` + fmt.Sprintf("%v", this.Ext) + `,`,
		`TabId:` + fmt.Sprintf("%v", this.TabId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoodsUseRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoodsUseRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`GoodsId:` + fmt.Sprintf("%v", this.GoodsId) + `,`,
		`UgId:` + fmt.Sprintf("%v", this.UgId) + `,`,
		`TargetId:` + fmt.Sprintf("%v", this.TargetId) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SynthesisRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SynthesisRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`GoodsId:` + fmt.Sprintf("%v", this.GoodsId) + `,`,
		`UgId:` + fmt.Sprintf("%v", this.UgId) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`TargetId:` + fmt.Sprintf("%v", this.TargetId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExchangeRealGoodsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExchangeRealGoodsRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`GoodsId:` + fmt.Sprintf("%v", this.GoodsId) + `,`,
		`UgId:` + fmt.Sprintf("%v", this.UgId) + `,`,
		`RealName:` + fmt.Sprintf("%v", this.RealName) + `,`,
		`Addr:` + fmt.Sprintf("%v", this.Addr) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExHistoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExHistoryRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`New:` + fmt.Sprintf("%v", this.New) + `,`,
		`PreIndex:` + fmt.Sprintf("%v", this.PreIndex) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExChangeItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExChangeItem{`,
		`GoodsName:` + fmt.Sprintf("%v", this.GoodsName) + `,`,
		`Ext:` + fmt.Sprintf("%v", this.Ext) + `,`,
		`CreateTime:` + fmt.Sprintf("%v", this.CreateTime) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExHistoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExHistoryResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "ExChangeItem", "ExChangeItem", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExChangeTelFeeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExChangeTelFeeRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`GoodsId:` + fmt.Sprintf("%v", this.GoodsId) + `,`,
		`UgId:` + fmt.Sprintf("%v", this.UgId) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoodsUseResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoodsUseResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoodsListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoodsListRequest{`,
		`GoodsId:` + fmt.Sprintf("%v", this.GoodsId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoodsItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoodsItem{`,
		`GoodsId:` + fmt.Sprintf("%v", this.GoodsId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Desc:` + fmt.Sprintf("%v", this.Desc) + `,`,
		`GoodsType:` + fmt.Sprintf("%v", this.GoodsType) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Img:` + fmt.Sprintf("%v", this.Img) + `,`,
		`Conditions:` + fmt.Sprintf("%v", this.Conditions) + `,`,
		`GoodsExt:` + fmt.Sprintf("%v", this.GoodsExt) + `,`,
		`AppVersion:` + fmt.Sprintf("%v", this.AppVersion) + `,`,
		`Pay:` + fmt.Sprintf("%v", this.Pay) + `,`,
		`Add:` + fmt.Sprintf("%v", this.Add) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoodsListResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoodsListResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Goods:` + strings.Replace(fmt.Sprintf("%v", this.Goods), "GoodsItem", "GoodsItem", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGoods(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RPCErrorResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCErrorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCErrorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("msg")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGoodsRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGoodsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGoodsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Img", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Img = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceOrg", wireType)
			}
			m.PriceOrg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceOrg |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsExt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsExt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (GoodsStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000800)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("desc")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("img")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("conditions")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("price")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("price_org")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return proto.NewRequiredNotSetError("goods_ext")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return proto.NewRequiredNotSetError("ExpireTime")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return proto.NewRequiredNotSetError("CreateTime")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return proto.NewRequiredNotSetError("CreateBy")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return proto.NewRequiredNotSetError("status")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Img", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Img = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceOrg", wireType)
			}
			m.PriceOrg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceOrg |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsExt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsExt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (GoodsStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTime", wireType)
			}
			m.AddTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000800)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBy", wireType)
			}
			m.CreateBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateBy |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00001000)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("goods_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("desc")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("img")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("conditions")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("price")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return proto.NewRequiredNotSetError("price_org")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return proto.NewRequiredNotSetError("goods_ext")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return proto.NewRequiredNotSetError("expire_time")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return proto.NewRequiredNotSetError("add_time")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return proto.NewRequiredNotSetError("create_by")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsPrice) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpId", wireType)
			}
			m.GpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GpId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangePrice", wireType)
			}
			m.ExchangePrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangePrice |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeType", wireType)
			}
			m.ExchangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("gp_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("goods_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("exchange_price")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("exchange_type")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("status")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsID) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mid) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagItemInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagItemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagItemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UgId", wireType)
			}
			m.UgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UgId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTime", wireType)
			}
			m.AddTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Img", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Img = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("ug_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("goods_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("expire_time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("ext")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("add_time")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return proto.NewRequiredNotSetError("img")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagItemDetail) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagItemDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagItemDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UgId", wireType)
			}
			m.UgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UgId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Img", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Img = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsExt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsExt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000400)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (GoodsStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000800)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("ug_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("goods_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("expire_time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("ext")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("desc")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return proto.NewRequiredNotSetError("img")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return proto.NewRequiredNotSetError("conditions")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return proto.NewRequiredNotSetError("price")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return proto.NewRequiredNotSetError("goods_ext")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return proto.NewRequiredNotSetError("status")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagItemsResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagItemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagItemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Bag{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("msg")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tabs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tabs = append(m.Tabs, &BagTab{})
			if err := m.Tabs[len(m.Tabs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGoods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewGoods = append(m.NewGoods, &BagItem{})
			if err := m.NewGoods[len(m.NewGoods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllGoods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllGoods = append(m.AllGoods, &BagItem{})
			if err := m.AllGoods[len(m.AllGoods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagTab) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			m.LabelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("label_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagTabs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagTabs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagTabs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &BagTab{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagItem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UgId", wireType)
			}
			m.UgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UgId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabId", wireType)
			}
			m.TabId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("ug_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("goods_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("num")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("expire_time")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("ext")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("tab_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsUseRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsUseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsUseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UgId", wireType)
			}
			m.UgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UgId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("goodsId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("ugId")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("targetId")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("num")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SynthesisRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SynthesisRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SynthesisRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UgId", wireType)
			}
			m.UgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UgId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("goodsId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("ugId")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("num")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("targetId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeRealGoodsRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeRealGoodsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeRealGoodsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UgId", wireType)
			}
			m.UgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UgId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("goodsId")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("ugId")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("realName")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("addr")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("phone")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExHistoryRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			m.New = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.New |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreIndex", wireType)
			}
			m.PreIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreIndex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("new")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("pre_index")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("page_size")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExChangeItem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExChangeItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExChangeItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("goodsName")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("ext")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("create_time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("status")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExHistoryResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ExChangeItem{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("msg")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExChangeTelFeeRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExChangeTelFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExChangeTelFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UgId", wireType)
			}
			m.UgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UgId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("goods_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("ugId")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("phone")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsUseResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsUseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsUseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("msg")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("num")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGoods
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GoodsId = append(m.GoodsId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGoods
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGoods
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGoods
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GoodsId = append(m.GoodsId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsItem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsType", wireType)
			}
			m.GoodsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			m.Label = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Label |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Img", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Img = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsExt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsExt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			m.AppVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Add = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000400)
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("goods_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("desc")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("goods_type")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("label")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("img")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("conditions")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return proto.NewRequiredNotSetError("goods_ext")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return proto.NewRequiredNotSetError("app_version")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return proto.NewRequiredNotSetError("pay")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return proto.NewRequiredNotSetError("add")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsListResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goods = append(m.Goods, &GoodsItem{})
			if err := m.Goods[len(m.Goods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("msg")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGoods(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGoods
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGoods
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGoods(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGoods = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGoods   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("goods/goods.proto", fileDescriptorGoods) }

var fileDescriptorGoods = []byte{
	// 1381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4b, 0x8f, 0xdb, 0x54,
	0x14, 0x1e, 0xbf, 0xf2, 0x38, 0x99, 0xb4, 0x1e, 0xab, 0xad, 0xdc, 0x29, 0x4a, 0x53, 0xb7, 0x23,
	0xa5, 0x05, 0x0a, 0x9a, 0x5f, 0xc0, 0x24, 0xe3, 0xb6, 0x96, 0xd2, 0x64, 0x94, 0x64, 0x46, 0x62,
	0x65, 0xee, 0xc4, 0x17, 0xd7, 0x28, 0xb1, 0x8d, 0xed, 0xa1, 0x49, 0x57, 0xac, 0x50, 0xd9, 0xc0,
	0x2f, 0x80, 0x0d, 0x2c, 0xf8, 0x0b, 0xdd, 0x20, 0x16, 0x2c, 0xba, 0x64, 0x09, 0x1b, 0xd4, 0xe6,
	0x3f, 0x20, 0xb1, 0x44, 0xf7, 0xfa, 0x91, 0xeb, 0x3c, 0x26, 0x23, 0x8d, 0x2a, 0x36, 0x51, 0xfc,
	0x9d, 0xe3, 0x7b, 0x1e, 0xdf, 0x39, 0xe7, 0x1e, 0xc3, 0x8e, 0xed, 0x79, 0x56, 0xf8, 0x11, 0xfd,
	0x7d, 0xe8, 0x07, 0x5e, 0xe4, 0x29, 0x45, 0x3f, 0x7a, 0x4c, 0x1e, 0x77, 0xc1, 0xf6, 0x6c, 0x2f,
	0x06, 0xb5, 0x27, 0x20, 0xf7, 0x8e, 0x5a, 0x7a, 0x10, 0x78, 0x41, 0x0f, 0x87, 0xbe, 0xe7, 0x86,
	0x58, 0x79, 0x0f, 0x0a, 0x61, 0x84, 0xa2, 0xb3, 0x50, 0xe5, 0xea, 0x7c, 0x43, 0x6a, 0x8a, 0xaf,
	0xff, 0xbe, 0xbd, 0xd5, 0x4b, 0x30, 0xe5, 0x06, 0x08, 0xe3, 0xd0, 0x56, 0xf9, 0x3a, 0xdf, 0x28,
	0x27, 0x22, 0x02, 0x68, 0x3f, 0x0b, 0xa0, 0xb4, 0x02, 0x8c, 0x22, 0x4c, 0xad, 0xf4, 0xf0, 0x97,
	0x67, 0x38, 0x8c, 0x14, 0x15, 0x44, 0x17, 0x8d, 0x31, 0x3d, 0x2a, 0xd5, 0xa7, 0x08, 0x91, 0x58,
	0x38, 0x1c, 0xe6, 0x4e, 0xa2, 0x08, 0x91, 0x44, 0x53, 0x1f, 0xab, 0x42, 0x9d, 0x6f, 0x54, 0x53,
	0x09, 0x41, 0x88, 0x71, 0x67, 0x6c, 0xab, 0x22, 0x6b, 0xdc, 0x19, 0xdb, 0xca, 0x3d, 0x80, 0xa1,
	0xe7, 0x5a, 0x4e, 0xe4, 0x78, 0x6e, 0xa8, 0x4a, 0x8c, 0x98, 0xc1, 0x95, 0x5d, 0x90, 0xfc, 0xc0,
	0x19, 0x62, 0xb5, 0xc0, 0x1c, 0x1c, 0x43, 0xca, 0x1d, 0x28, 0xd3, 0x3f, 0xa6, 0x17, 0xd8, 0x6a,
	0x91, 0x91, 0x97, 0x28, 0xdc, 0x0d, 0x6c, 0xa2, 0x42, 0xf3, 0x69, 0xe2, 0x49, 0xa4, 0x96, 0x18,
	0x1b, 0x25, 0x0a, 0xeb, 0x93, 0x88, 0xf8, 0xa1, 0x4f, 0x7c, 0x27, 0xc0, 0x03, 0x67, 0x8c, 0xd5,
	0x32, 0x73, 0x0c, 0x83, 0x13, 0xad, 0x38, 0x53, 0x54, 0x0b, 0xea, 0x7c, 0x43, 0x48, 0xb5, 0xe6,
	0xb8, 0x52, 0x87, 0x52, 0xfc, 0xd4, 0x9c, 0xaa, 0x15, 0x46, 0x27, 0x43, 0x95, 0xfd, 0x8c, 0xa8,
	0xed, 0x3a, 0xdf, 0xb8, 0xb2, 0x7f, 0xed, 0x61, 0x42, 0xf1, 0x43, 0xfa, 0xdb, 0xa7, 0xb2, 0x3c,
	0x7d, 0xda, 0x2b, 0x01, 0xca, 0x54, 0x6a, 0xb8, 0x9f, 0x7b, 0xca, 0x6d, 0x88, 0x7d, 0x37, 0x1d,
	0x8b, 0x32, 0x94, 0xda, 0x28, 0x52, 0xd4, 0xb0, 0x32, 0xfa, 0xf8, 0xb5, 0xf4, 0x09, 0x6b, 0xe9,
	0x13, 0xd7, 0xd1, 0x27, 0x9d, 0x4f, 0x5f, 0x61, 0x13, 0x7d, 0xc5, 0x0d, 0xf4, 0x95, 0x36, 0xd3,
	0x57, 0x5e, 0x49, 0xdf, 0x1e, 0x54, 0x30, 0xa5, 0xc9, 0x8c, 0x52, 0x66, 0x32, 0xfe, 0xf0, 0x9c,
	0xbf, 0x79, 0xde, 0x2b, 0x17, 0xcd, 0x3b, 0xc9, 0x34, 0xb2, 0xac, 0xf8, 0xdc, 0x6d, 0x36, 0xd3,
	0xc8, 0xb2, 0xe8, 0xa1, 0x77, 0xa0, 0x3c, 0xa4, 0xc4, 0x9a, 0xa7, 0x53, 0xb5, 0xca, 0xf2, 0x3d,
	0x4c, 0xf8, 0xd6, 0x7e, 0xe5, 0x00, 0xa8, 0x85, 0x23, 0x1a, 0xf3, 0x4d, 0x90, 0x6c, 0x7f, 0x91,
	0x39, 0xd1, 0xf6, 0x0d, 0x2b, 0xc7, 0x2b, 0xcf, 0x44, 0x91, 0xf1, 0xfa, 0x3e, 0x5c, 0xc1, 0x93,
	0xe1, 0x33, 0xe4, 0xda, 0xd8, 0x8c, 0x93, 0xca, 0x36, 0x5b, 0x35, 0x95, 0xc5, 0x86, 0xee, 0x43,
	0x06, 0x98, 0x4b, 0xcc, 0x6e, 0xa7, 0xa2, 0x01, 0x61, 0x78, 0x3e, 0x3b, 0x24, 0x46, 0x27, 0x2d,
	0xbe, 0xdb, 0x50, 0x8c, 0x6b, 0xef, 0x50, 0xb9, 0x06, 0xfc, 0x82, 0xe7, 0xbc, 0x63, 0x69, 0xb7,
	0x40, 0x78, 0xea, 0x58, 0x6b, 0x84, 0xff, 0x70, 0x50, 0x69, 0x22, 0xdb, 0x88, 0xf0, 0x98, 0x16,
	0xef, 0x4d, 0x90, 0xce, 0xec, 0xa5, 0xf8, 0xcf, 0xec, 0x15, 0xf1, 0x2f, 0xd5, 0xf5, 0x02, 0xd3,
	0x02, 0xdb, 0x83, 0x0c, 0xd3, 0x37, 0x40, 0x20, 0xd5, 0x92, 0x9b, 0x37, 0x78, 0x12, 0xe5, 0xd8,
	0x94, 0x56, 0xb1, 0x99, 0xf6, 0x4d, 0x61, 0x55, 0xdf, 0xd0, 0x1c, 0x16, 0xd7, 0x75, 0x47, 0x69,
	0xa1, 0x3b, 0xb4, 0x6f, 0x05, 0xa8, 0x26, 0x71, 0x1f, 0xe2, 0x08, 0x39, 0xa3, 0xff, 0x33, 0xf2,
	0x34, 0x30, 0x69, 0xed, 0x40, 0x28, 0xac, 0x1d, 0x08, 0x17, 0x0e, 0x79, 0x61, 0x20, 0x94, 0x37,
	0x0d, 0x04, 0x58, 0x39, 0x10, 0xe6, 0xdd, 0x5e, 0x59, 0xd9, 0xed, 0xf3, 0x36, 0xae, 0x5e, 0x78,
	0x7c, 0x7e, 0x01, 0x72, 0x42, 0x45, 0x78, 0xb9, 0xfb, 0x52, 0xa9, 0x83, 0x68, 0xa1, 0x08, 0x51,
	0x02, 0x2a, 0xfb, 0xdb, 0x99, 0xed, 0x26, 0xb2, 0x7b, 0x54, 0xa2, 0xbd, 0xe4, 0x40, 0x68, 0x22,
	0x5b, 0xb9, 0x0b, 0x62, 0x84, 0x4e, 0xc9, 0xe9, 0x42, 0xa3, 0xb2, 0x7f, 0x95, 0xd5, 0x1c, 0xa0,
	0xd3, 0x1e, 0x15, 0x2a, 0x1f, 0x42, 0xd9, 0xc5, 0xcf, 0x4d, 0x1a, 0x9c, 0xca, 0x53, 0x4d, 0x99,
	0xd5, 0x24, 0x2e, 0xf7, 0x4a, 0x2e, 0x7e, 0x4e, 0x11, 0xa2, 0x8e, 0x46, 0xa3, 0x44, 0x5d, 0x58,
	0xa7, 0x8e, 0x46, 0x23, 0x8a, 0x68, 0x2d, 0x28, 0xc4, 0xd6, 0x48, 0x7d, 0x8d, 0xd0, 0x29, 0x1e,
	0x2d, 0xdd, 0x18, 0x14, 0x3d, 0xef, 0xc6, 0xd0, 0x3e, 0x86, 0x62, 0x7c, 0x48, 0xa8, 0xec, 0x81,
	0xe4, 0x90, 0x1c, 0xae, 0x8b, 0x29, 0x96, 0x6a, 0xaf, 0x38, 0xfa, 0x0a, 0x71, 0xe6, 0x52, 0x35,
	0x7f, 0x03, 0x04, 0xf7, 0x6c, 0x4c, 0x53, 0x9d, 0xd2, 0x43, 0x80, 0xc5, 0x5e, 0x10, 0xcf, 0xef,
	0x05, 0x69, 0xb1, 0x17, 0x6e, 0x41, 0x21, 0x42, 0xa7, 0xc4, 0x6a, 0x81, 0x79, 0x53, 0x8a, 0xd0,
	0xa9, 0x61, 0x69, 0x3f, 0x70, 0x70, 0x95, 0xc6, 0x74, 0x1c, 0xe2, 0x74, 0x19, 0x22, 0xb5, 0xb0,
	0x10, 0x01, 0x01, 0x94, 0x1a, 0xa4, 0xae, 0xae, 0xf6, 0x5f, 0x05, 0x1a, 0x68, 0xae, 0x59, 0xe3,
	0xd0, 0xeb, 0x50, 0x8a, 0x50, 0x60, 0xe3, 0xc8, 0xb0, 0x72, 0xee, 0x67, 0x68, 0x1a, 0xbb, 0xb4,
	0x10, 0xbb, 0xf6, 0x23, 0x07, 0x72, 0x7f, 0xea, 0x46, 0xcf, 0x70, 0xe8, 0x84, 0xef, 0xce, 0xc1,
	0xc4, 0xbc, 0xb8, 0x98, 0x7a, 0xd6, 0x71, 0x69, 0x95, 0xe3, 0xda, 0xef, 0x1c, 0xa8, 0x7a, 0x72,
	0xb7, 0xf4, 0x30, 0x1a, 0xe5, 0xd6, 0xca, 0x77, 0x92, 0xc9, 0x00, 0xa3, 0x51, 0x07, 0x25, 0x85,
	0x90, 0xcd, 0x8b, 0x14, 0x25, 0xef, 0x22, 0xcb, 0x0a, 0xf2, 0xa3, 0x8f, 0x20, 0x74, 0x10, 0x3d,
	0xf3, 0xdc, 0xfc, 0xb8, 0x8f, 0x21, 0xd2, 0xc5, 0xb2, 0x3e, 0x79, 0xe2, 0x84, 0x91, 0x17, 0x4c,
	0x37, 0xb9, 0x4f, 0xb2, 0x85, 0x9f, 0xe7, 0xae, 0x6c, 0x02, 0xc4, 0xeb, 0x0d, 0x36, 0x1d, 0xd7,
	0xc2, 0x93, 0x9c, 0xef, 0x25, 0x3f, 0xc0, 0x06, 0x41, 0xa9, 0x0a, 0xb2, 0xb1, 0x19, 0x3a, 0x2f,
	0xf2, 0x17, 0x74, 0x89, 0xc0, 0x7d, 0xe7, 0x05, 0xd6, 0xbe, 0xe7, 0x60, 0x5b, 0x9f, 0xb4, 0x68,
	0x46, 0x69, 0x4f, 0x69, 0xc9, 0x90, 0xec, 0x2c, 0x6e, 0xe8, 0x73, 0x38, 0x2d, 0x7e, 0x7e, 0xb1,
	0xf8, 0xf7, 0xa0, 0x92, 0xec, 0x2b, 0xcb, 0xf7, 0xc8, 0x70, 0xbe, 0xc5, 0xce, 0x87, 0x23, 0x9b,
	0xd4, 0x74, 0x9c, 0x46, 0xb0, 0xc3, 0xe4, 0x66, 0xe5, 0x3c, 0x15, 0x2e, 0x38, 0x4f, 0xef, 0x67,
	0xf3, 0x94, 0x4c, 0x94, 0xeb, 0xd9, 0x44, 0x61, 0x03, 0x4e, 0x06, 0xeb, 0x37, 0x1c, 0x5c, 0x4f,
	0xe1, 0x01, 0x1e, 0x3d, 0xc2, 0x1b, 0x1b, 0x74, 0xe3, 0x84, 0x59, 0x5f, 0x57, 0x59, 0x6d, 0x88,
	0xcb, 0xb5, 0xf1, 0x19, 0xc8, 0xf3, 0x11, 0x71, 0xa9, 0xe8, 0xd7, 0x4c, 0x38, 0xed, 0x83, 0xc4,
	0x42, 0xdb, 0x09, 0xa3, 0xf9, 0x27, 0x59, 0xd6, 0x23, 0x64, 0xfc, 0x0a, 0x59, 0x14, 0xda, 0x5f,
	0x7c, 0xfa, 0x71, 0x40, 0xaa, 0xe3, 0x9d, 0x7c, 0x1c, 0xdc, 0x05, 0x88, 0x0f, 0x5d, 0x5a, 0x24,
	0xe3, 0x9a, 0xa3, 0x5b, 0xe4, 0x2e, 0x48, 0xf4, 0x3a, 0xc9, 0x4d, 0x86, 0x18, 0x4a, 0x57, 0x86,
	0xc2, 0xf9, 0x2b, 0x43, 0x71, 0xcd, 0xca, 0x70, 0x81, 0x6f, 0xb8, 0x3d, 0xa8, 0x20, 0xdf, 0x37,
	0xbf, 0xc2, 0x41, 0xe8, 0x78, 0x2e, 0x5d, 0x3e, 0xb2, 0xc2, 0x46, 0xbe, 0x7f, 0x12, 0xe3, 0xc4,
	0x0f, 0x1f, 0x4d, 0xe9, 0xea, 0x91, 0xf9, 0xe1, 0xa3, 0x29, 0xc1, 0x91, 0x65, 0xe5, 0x56, 0x0e,
	0x02, 0x68, 0x21, 0xec, 0x30, 0x4c, 0x5c, 0x8a, 0xec, 0x06, 0x48, 0xec, 0xc5, 0xad, 0xe4, 0xf7,
	0x16, 0x5a, 0xe8, 0xb1, 0xc2, 0x83, 0x4f, 0xa0, 0xc2, 0xec, 0x32, 0xca, 0x55, 0xa8, 0x1c, 0x77,
	0x0e, 0x4e, 0x0e, 0x8c, 0xf6, 0x41, 0xb3, 0xad, 0xcb, 0x5b, 0x4a, 0x15, 0xca, 0xf3, 0x47, 0x4e,
	0xa9, 0x40, 0xf1, 0x50, 0x6f, 0xeb, 0x03, 0xfd, 0x50, 0xe6, 0x77, 0xc5, 0x97, 0x3f, 0xd5, 0xb6,
	0x1e, 0x7c, 0xc7, 0x25, 0x25, 0x41, 0x89, 0x91, 0x61, 0xbb, 0x6f, 0xb4, 0x4f, 0xf4, 0x9e, 0xd9,
	0xea, 0x76, 0x8c, 0x8e, 0xbc, 0x45, 0x5e, 0x69, 0x1e, 0xb7, 0xdb, 0x46, 0xb7, 0x23, 0x73, 0x4a,
	0x19, 0xa4, 0xa3, 0x5e, 0xf7, 0xa8, 0x2f, 0xf3, 0xca, 0x0e, 0x54, 0x8f, 0x9e, 0x7c, 0xda, 0x37,
	0x5a, 0x07, 0x6d, 0xd3, 0x18, 0xe8, 0x4f, 0x65, 0x81, 0xbc, 0x7c, 0x62, 0xf4, 0x06, 0xc7, 0x29,
	0x22, 0x12, 0xa4, 0x7b, 0x3c, 0x68, 0x1b, 0x1d, 0x3d, 0x46, 0x24, 0xa5, 0x04, 0xe2, 0x63, 0xe3,
	0xd1, 0x40, 0x2e, 0x10, 0xd9, 0x91, 0xa1, 0xb7, 0xf4, 0xbe, 0xf9, 0xb8, 0xdb, 0x3d, 0xec, 0xcb,
	0xc5, 0xd8, 0xa1, 0xe6, 0xbd, 0x3f, 0xdf, 0xd6, 0xb6, 0xde, 0xbc, 0xad, 0x71, 0xff, 0xbe, 0xad,
	0x71, 0x5f, 0xcf, 0x6a, 0xdc, 0x2f, 0xb3, 0x1a, 0xf7, 0xdb, 0xac, 0xc6, 0xbd, 0x9e, 0xd5, 0xb8,
	0x3f, 0x66, 0x35, 0xee, 0xcd, 0xac, 0xc6, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x66, 0x2a, 0x64,
	0x14, 0x00, 0x11, 0x00, 0x00,
}
