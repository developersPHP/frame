// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: online/online.proto

/*
	Package pgOnline is a generated protocol buffer package.

	It is generated from these files:
		online/online.proto

	It has these top-level messages:
		ReportOnlineRequest
		ReportOnlineResponse
		GetOnlineRequest
		GetOnlineResponse
*/
package pgOnline

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ReportOnlineRequest struct {
	Uid              int64  `protobuf:"varint,1,opt,name=uid" json:"uid"`
	App              int32  `protobuf:"varint,2,opt,name=app" json:"app"`
	HallVer          int32  `protobuf:"varint,3,opt,name=hall_ver,json=hallVer" json:"hall_ver"`
	ApkVer           string `protobuf:"bytes,4,opt,name=apk_ver,json=apkVer" json:"apk_ver"`
	CityApp          int32  `protobuf:"varint,5,opt,name=city_app,json=cityApp" json:"city_app"`
	Ssid             string `protobuf:"bytes,6,opt,name=ssid" json:"ssid"`
	Forbid           int32  `protobuf:"varint,7,opt,name=forbid" json:"forbid"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReportOnlineRequest) Reset()                    { *m = ReportOnlineRequest{} }
func (*ReportOnlineRequest) ProtoMessage()               {}
func (*ReportOnlineRequest) Descriptor() ([]byte, []int) { return fileDescriptorOnline, []int{0} }

func (m *ReportOnlineRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ReportOnlineRequest) GetApp() int32 {
	if m != nil {
		return m.App
	}
	return 0
}

func (m *ReportOnlineRequest) GetHallVer() int32 {
	if m != nil {
		return m.HallVer
	}
	return 0
}

func (m *ReportOnlineRequest) GetApkVer() string {
	if m != nil {
		return m.ApkVer
	}
	return ""
}

func (m *ReportOnlineRequest) GetCityApp() int32 {
	if m != nil {
		return m.CityApp
	}
	return 0
}

func (m *ReportOnlineRequest) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *ReportOnlineRequest) GetForbid() int32 {
	if m != nil {
		return m.Forbid
	}
	return 0
}

type ReportOnlineResponse struct {
	Retcode          int32  `protobuf:"varint,1,opt,name=retcode" json:"retcode"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReportOnlineResponse) Reset()                    { *m = ReportOnlineResponse{} }
func (*ReportOnlineResponse) ProtoMessage()               {}
func (*ReportOnlineResponse) Descriptor() ([]byte, []int) { return fileDescriptorOnline, []int{1} }

func (m *ReportOnlineResponse) GetRetcode() int32 {
	if m != nil {
		return m.Retcode
	}
	return 0
}

// 获取在线信息
type GetOnlineRequest struct {
	Uid              int64  `protobuf:"varint,1,opt,name=uid" json:"uid"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetOnlineRequest) Reset()                    { *m = GetOnlineRequest{} }
func (*GetOnlineRequest) ProtoMessage()               {}
func (*GetOnlineRequest) Descriptor() ([]byte, []int) { return fileDescriptorOnline, []int{2} }

func (m *GetOnlineRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetOnlineResponse struct {
	Retcode          int32  `protobuf:"varint,1,opt,name=retcode" json:"retcode"`
	App              int32  `protobuf:"varint,2,opt,name=app" json:"app"`
	HallVer          int32  `protobuf:"varint,3,opt,name=hall_ver,json=hallVer" json:"hall_ver"`
	ApkVer           string `protobuf:"bytes,4,opt,name=apk_ver,json=apkVer" json:"apk_ver"`
	CityApp          int32  `protobuf:"varint,5,opt,name=city_app,json=cityApp" json:"city_app"`
	Ssid             string `protobuf:"bytes,6,opt,name=ssid" json:"ssid"`
	Ip               string `protobuf:"bytes,7,opt,name=ip" json:"ip"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetOnlineResponse) Reset()                    { *m = GetOnlineResponse{} }
func (*GetOnlineResponse) ProtoMessage()               {}
func (*GetOnlineResponse) Descriptor() ([]byte, []int) { return fileDescriptorOnline, []int{3} }

func (m *GetOnlineResponse) GetRetcode() int32 {
	if m != nil {
		return m.Retcode
	}
	return 0
}

func (m *GetOnlineResponse) GetApp() int32 {
	if m != nil {
		return m.App
	}
	return 0
}

func (m *GetOnlineResponse) GetHallVer() int32 {
	if m != nil {
		return m.HallVer
	}
	return 0
}

func (m *GetOnlineResponse) GetApkVer() string {
	if m != nil {
		return m.ApkVer
	}
	return ""
}

func (m *GetOnlineResponse) GetCityApp() int32 {
	if m != nil {
		return m.CityApp
	}
	return 0
}

func (m *GetOnlineResponse) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *GetOnlineResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func init() {
	proto.RegisterType((*ReportOnlineRequest)(nil), "pgOnline.ReportOnlineRequest")
	proto.RegisterType((*ReportOnlineResponse)(nil), "pgOnline.ReportOnlineResponse")
	proto.RegisterType((*GetOnlineRequest)(nil), "pgOnline.GetOnlineRequest")
	proto.RegisterType((*GetOnlineResponse)(nil), "pgOnline.GetOnlineResponse")
}
func (this *ReportOnlineRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ReportOnlineRequest)
	if !ok {
		that2, ok := that.(ReportOnlineRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ReportOnlineRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ReportOnlineRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ReportOnlineRequest but is not nil && this == nil")
	}
	if this.Uid != that1.Uid {
		return fmt.Errorf("Uid this(%v) Not Equal that(%v)", this.Uid, that1.Uid)
	}
	if this.App != that1.App {
		return fmt.Errorf("App this(%v) Not Equal that(%v)", this.App, that1.App)
	}
	if this.HallVer != that1.HallVer {
		return fmt.Errorf("HallVer this(%v) Not Equal that(%v)", this.HallVer, that1.HallVer)
	}
	if this.ApkVer != that1.ApkVer {
		return fmt.Errorf("ApkVer this(%v) Not Equal that(%v)", this.ApkVer, that1.ApkVer)
	}
	if this.CityApp != that1.CityApp {
		return fmt.Errorf("CityApp this(%v) Not Equal that(%v)", this.CityApp, that1.CityApp)
	}
	if this.Ssid != that1.Ssid {
		return fmt.Errorf("Ssid this(%v) Not Equal that(%v)", this.Ssid, that1.Ssid)
	}
	if this.Forbid != that1.Forbid {
		return fmt.Errorf("Forbid this(%v) Not Equal that(%v)", this.Forbid, that1.Forbid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ReportOnlineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReportOnlineRequest)
	if !ok {
		that2, ok := that.(ReportOnlineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.App != that1.App {
		return false
	}
	if this.HallVer != that1.HallVer {
		return false
	}
	if this.ApkVer != that1.ApkVer {
		return false
	}
	if this.CityApp != that1.CityApp {
		return false
	}
	if this.Ssid != that1.Ssid {
		return false
	}
	if this.Forbid != that1.Forbid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ReportOnlineResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ReportOnlineResponse)
	if !ok {
		that2, ok := that.(ReportOnlineResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ReportOnlineResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ReportOnlineResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ReportOnlineResponse but is not nil && this == nil")
	}
	if this.Retcode != that1.Retcode {
		return fmt.Errorf("Retcode this(%v) Not Equal that(%v)", this.Retcode, that1.Retcode)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ReportOnlineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReportOnlineResponse)
	if !ok {
		that2, ok := that.(ReportOnlineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Retcode != that1.Retcode {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetOnlineRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetOnlineRequest)
	if !ok {
		that2, ok := that.(GetOnlineRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetOnlineRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetOnlineRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetOnlineRequest but is not nil && this == nil")
	}
	if this.Uid != that1.Uid {
		return fmt.Errorf("Uid this(%v) Not Equal that(%v)", this.Uid, that1.Uid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetOnlineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOnlineRequest)
	if !ok {
		that2, ok := that.(GetOnlineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetOnlineResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetOnlineResponse)
	if !ok {
		that2, ok := that.(GetOnlineResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetOnlineResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetOnlineResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetOnlineResponse but is not nil && this == nil")
	}
	if this.Retcode != that1.Retcode {
		return fmt.Errorf("Retcode this(%v) Not Equal that(%v)", this.Retcode, that1.Retcode)
	}
	if this.App != that1.App {
		return fmt.Errorf("App this(%v) Not Equal that(%v)", this.App, that1.App)
	}
	if this.HallVer != that1.HallVer {
		return fmt.Errorf("HallVer this(%v) Not Equal that(%v)", this.HallVer, that1.HallVer)
	}
	if this.ApkVer != that1.ApkVer {
		return fmt.Errorf("ApkVer this(%v) Not Equal that(%v)", this.ApkVer, that1.ApkVer)
	}
	if this.CityApp != that1.CityApp {
		return fmt.Errorf("CityApp this(%v) Not Equal that(%v)", this.CityApp, that1.CityApp)
	}
	if this.Ssid != that1.Ssid {
		return fmt.Errorf("Ssid this(%v) Not Equal that(%v)", this.Ssid, that1.Ssid)
	}
	if this.Ip != that1.Ip {
		return fmt.Errorf("Ip this(%v) Not Equal that(%v)", this.Ip, that1.Ip)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetOnlineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOnlineResponse)
	if !ok {
		that2, ok := that.(GetOnlineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Retcode != that1.Retcode {
		return false
	}
	if this.App != that1.App {
		return false
	}
	if this.HallVer != that1.HallVer {
		return false
	}
	if this.ApkVer != that1.ApkVer {
		return false
	}
	if this.CityApp != that1.CityApp {
		return false
	}
	if this.Ssid != that1.Ssid {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ReportOnlineRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pgOnline.ReportOnlineRequest{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "App: "+fmt.Sprintf("%#v", this.App)+",\n")
	s = append(s, "HallVer: "+fmt.Sprintf("%#v", this.HallVer)+",\n")
	s = append(s, "ApkVer: "+fmt.Sprintf("%#v", this.ApkVer)+",\n")
	s = append(s, "CityApp: "+fmt.Sprintf("%#v", this.CityApp)+",\n")
	s = append(s, "Ssid: "+fmt.Sprintf("%#v", this.Ssid)+",\n")
	s = append(s, "Forbid: "+fmt.Sprintf("%#v", this.Forbid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReportOnlineResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgOnline.ReportOnlineResponse{")
	s = append(s, "Retcode: "+fmt.Sprintf("%#v", this.Retcode)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOnlineRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgOnline.GetOnlineRequest{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOnlineResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pgOnline.GetOnlineResponse{")
	s = append(s, "Retcode: "+fmt.Sprintf("%#v", this.Retcode)+",\n")
	s = append(s, "App: "+fmt.Sprintf("%#v", this.App)+",\n")
	s = append(s, "HallVer: "+fmt.Sprintf("%#v", this.HallVer)+",\n")
	s = append(s, "ApkVer: "+fmt.Sprintf("%#v", this.ApkVer)+",\n")
	s = append(s, "CityApp: "+fmt.Sprintf("%#v", this.CityApp)+",\n")
	s = append(s, "Ssid: "+fmt.Sprintf("%#v", this.Ssid)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOnline(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ReportOnlineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportOnlineRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintOnline(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintOnline(dAtA, i, uint64(m.App))
	dAtA[i] = 0x18
	i++
	i = encodeVarintOnline(dAtA, i, uint64(m.HallVer))
	dAtA[i] = 0x22
	i++
	i = encodeVarintOnline(dAtA, i, uint64(len(m.ApkVer)))
	i += copy(dAtA[i:], m.ApkVer)
	dAtA[i] = 0x28
	i++
	i = encodeVarintOnline(dAtA, i, uint64(m.CityApp))
	dAtA[i] = 0x32
	i++
	i = encodeVarintOnline(dAtA, i, uint64(len(m.Ssid)))
	i += copy(dAtA[i:], m.Ssid)
	dAtA[i] = 0x38
	i++
	i = encodeVarintOnline(dAtA, i, uint64(m.Forbid))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReportOnlineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportOnlineResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintOnline(dAtA, i, uint64(m.Retcode))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOnlineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOnlineRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintOnline(dAtA, i, uint64(m.Uid))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOnlineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOnlineResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintOnline(dAtA, i, uint64(m.Retcode))
	dAtA[i] = 0x10
	i++
	i = encodeVarintOnline(dAtA, i, uint64(m.App))
	dAtA[i] = 0x18
	i++
	i = encodeVarintOnline(dAtA, i, uint64(m.HallVer))
	dAtA[i] = 0x22
	i++
	i = encodeVarintOnline(dAtA, i, uint64(len(m.ApkVer)))
	i += copy(dAtA[i:], m.ApkVer)
	dAtA[i] = 0x28
	i++
	i = encodeVarintOnline(dAtA, i, uint64(m.CityApp))
	dAtA[i] = 0x32
	i++
	i = encodeVarintOnline(dAtA, i, uint64(len(m.Ssid)))
	i += copy(dAtA[i:], m.Ssid)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintOnline(dAtA, i, uint64(len(m.Ip)))
	i += copy(dAtA[i:], m.Ip)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintOnline(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedReportOnlineRequest(r randyOnline, easy bool) *ReportOnlineRequest {
	this := &ReportOnlineRequest{}
	this.Uid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Uid *= -1
	}
	this.App = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.App *= -1
	}
	this.HallVer = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.HallVer *= -1
	}
	this.ApkVer = string(randStringOnline(r))
	this.CityApp = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.CityApp *= -1
	}
	this.Ssid = string(randStringOnline(r))
	this.Forbid = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Forbid *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOnline(r, 8)
	}
	return this
}

func NewPopulatedReportOnlineResponse(r randyOnline, easy bool) *ReportOnlineResponse {
	this := &ReportOnlineResponse{}
	this.Retcode = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Retcode *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOnline(r, 2)
	}
	return this
}

func NewPopulatedGetOnlineRequest(r randyOnline, easy bool) *GetOnlineRequest {
	this := &GetOnlineRequest{}
	this.Uid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Uid *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOnline(r, 2)
	}
	return this
}

func NewPopulatedGetOnlineResponse(r randyOnline, easy bool) *GetOnlineResponse {
	this := &GetOnlineResponse{}
	this.Retcode = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Retcode *= -1
	}
	this.App = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.App *= -1
	}
	this.HallVer = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.HallVer *= -1
	}
	this.ApkVer = string(randStringOnline(r))
	this.CityApp = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.CityApp *= -1
	}
	this.Ssid = string(randStringOnline(r))
	this.Ip = string(randStringOnline(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOnline(r, 8)
	}
	return this
}

type randyOnline interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneOnline(r randyOnline) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringOnline(r randyOnline) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneOnline(r)
	}
	return string(tmps)
}
func randUnrecognizedOnline(r randyOnline, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldOnline(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldOnline(dAtA []byte, r randyOnline, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateOnline(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateOnline(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateOnline(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateOnline(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateOnline(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateOnline(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateOnline(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ReportOnlineRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOnline(uint64(m.Uid))
	n += 1 + sovOnline(uint64(m.App))
	n += 1 + sovOnline(uint64(m.HallVer))
	l = len(m.ApkVer)
	n += 1 + l + sovOnline(uint64(l))
	n += 1 + sovOnline(uint64(m.CityApp))
	l = len(m.Ssid)
	n += 1 + l + sovOnline(uint64(l))
	n += 1 + sovOnline(uint64(m.Forbid))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportOnlineResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOnline(uint64(m.Retcode))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOnlineRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOnline(uint64(m.Uid))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOnlineResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovOnline(uint64(m.Retcode))
	n += 1 + sovOnline(uint64(m.App))
	n += 1 + sovOnline(uint64(m.HallVer))
	l = len(m.ApkVer)
	n += 1 + l + sovOnline(uint64(l))
	n += 1 + sovOnline(uint64(m.CityApp))
	l = len(m.Ssid)
	n += 1 + l + sovOnline(uint64(l))
	l = len(m.Ip)
	n += 1 + l + sovOnline(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOnline(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOnline(x uint64) (n int) {
	return sovOnline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ReportOnlineRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportOnlineRequest{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`App:` + fmt.Sprintf("%v", this.App) + `,`,
		`HallVer:` + fmt.Sprintf("%v", this.HallVer) + `,`,
		`ApkVer:` + fmt.Sprintf("%v", this.ApkVer) + `,`,
		`CityApp:` + fmt.Sprintf("%v", this.CityApp) + `,`,
		`Ssid:` + fmt.Sprintf("%v", this.Ssid) + `,`,
		`Forbid:` + fmt.Sprintf("%v", this.Forbid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportOnlineResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportOnlineResponse{`,
		`Retcode:` + fmt.Sprintf("%v", this.Retcode) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOnlineRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOnlineRequest{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOnlineResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOnlineResponse{`,
		`Retcode:` + fmt.Sprintf("%v", this.Retcode) + `,`,
		`App:` + fmt.Sprintf("%v", this.App) + `,`,
		`HallVer:` + fmt.Sprintf("%v", this.HallVer) + `,`,
		`ApkVer:` + fmt.Sprintf("%v", this.ApkVer) + `,`,
		`CityApp:` + fmt.Sprintf("%v", this.CityApp) + `,`,
		`Ssid:` + fmt.Sprintf("%v", this.Ssid) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOnline(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ReportOnlineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportOnlineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportOnlineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			m.App = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.App |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallVer", wireType)
			}
			m.HallVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HallVer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApkVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApkVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityApp", wireType)
			}
			m.CityApp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityApp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ssid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ssid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forbid", wireType)
			}
			m.Forbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forbid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportOnlineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportOnlineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportOnlineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retcode", wireType)
			}
			m.Retcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOnlineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOnlineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOnlineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOnlineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOnlineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOnlineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retcode", wireType)
			}
			m.Retcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			m.App = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.App |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallVer", wireType)
			}
			m.HallVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HallVer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApkVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApkVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityApp", wireType)
			}
			m.CityApp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityApp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ssid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ssid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnline
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOnline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOnline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOnline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOnline
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOnline
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOnline(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOnline = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOnline   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("online/online.proto", fileDescriptorOnline) }

var fileDescriptorOnline = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x90, 0xbf, 0x6e, 0xe2, 0x40,
	0x10, 0xc6, 0x19, 0xfe, 0x99, 0x9b, 0xea, 0x6e, 0x41, 0x27, 0xeb, 0x74, 0x59, 0x90, 0x2b, 0x14,
	0x45, 0xb8, 0x89, 0xd2, 0x87, 0x26, 0x65, 0x24, 0x8a, 0xb4, 0xc8, 0xe0, 0xc5, 0xac, 0x20, 0xde,
	0xc9, 0xda, 0x46, 0x4a, 0x97, 0xc7, 0xc9, 0x23, 0xa4, 0x4c, 0x49, 0x99, 0x32, 0x45, 0x84, 0xf0,
	0x3e, 0x41, 0xca, 0x94, 0x91, 0x17, 0x88, 0x9c, 0x8e, 0x32, 0xd5, 0xee, 0xfc, 0xbe, 0xf9, 0x66,
	0x34, 0x1f, 0xb6, 0x55, 0xbc, 0x94, 0xb1, 0xf0, 0x77, 0xcf, 0x80, 0xb4, 0x4a, 0x15, 0x6b, 0x51,
	0x74, 0x6d, 0xeb, 0x7f, 0xe7, 0x2b, 0x11, 0x87, 0x4a, 0xfb, 0x91, 0x4c, 0xe7, 0xd9, 0x64, 0x30,
	0x55, 0xb7, 0x7e, 0xa4, 0x22, 0xe5, 0xdb, 0xbe, 0x49, 0x36, 0xb3, 0x95, 0x2d, 0xec, 0x6f, 0xe7,
	0xf7, 0x36, 0x80, 0xed, 0x91, 0x20, 0xa5, 0xd3, 0xdd, 0x98, 0x91, 0xb8, 0xcb, 0x44, 0x92, 0xb2,
	0xbf, 0x58, 0xcb, 0x64, 0xe8, 0x42, 0x0f, 0xfa, 0xb5, 0x61, 0x7d, 0xbd, 0xe9, 0x56, 0x46, 0x05,
	0x28, 0x78, 0x40, 0xe4, 0x56, 0x7b, 0xd0, 0x6f, 0x1c, 0x78, 0x40, 0xc4, 0xba, 0xd8, 0x9a, 0x07,
	0xcb, 0xe5, 0x78, 0x25, 0xb4, 0x5b, 0x2b, 0x89, 0x4e, 0x41, 0x6f, 0x84, 0x66, 0x27, 0xe8, 0x04,
	0xb4, 0xb0, 0x7a, 0xbd, 0x07, 0xfd, 0x5f, 0x7b, 0xbd, 0x19, 0xd0, 0xa2, 0x90, 0xbb, 0xd8, 0x9a,
	0xca, 0xf4, 0x7e, 0x5c, 0x0c, 0x6f, 0x94, 0xfd, 0x05, 0xbd, 0x24, 0x62, 0x2e, 0xd6, 0x93, 0x44,
	0x86, 0x6e, 0xb3, 0x64, 0xb6, 0x84, 0xfd, 0xc7, 0xe6, 0x4c, 0xe9, 0x89, 0x0c, 0x5d, 0xa7, 0x64,
	0xdc, 0x33, 0xef, 0x02, 0x3b, 0xdf, 0xef, 0x4b, 0x48, 0xc5, 0x89, 0x60, 0x1c, 0x1d, 0x2d, 0xd2,
	0xa9, 0x0a, 0x85, 0x3d, 0xf2, 0x6b, 0xdf, 0x1e, 0x7a, 0xa7, 0xf8, 0xfb, 0x4a, 0x1c, 0x17, 0x8a,
	0xf7, 0x06, 0xf8, 0xa7, 0xd4, 0x7c, 0xdc, 0x86, 0x9f, 0x18, 0x65, 0x07, 0xab, 0x92, 0x6c, 0x8c,
	0x07, 0x5e, 0x95, 0x34, 0x3c, 0x7b, 0xcd, 0x79, 0x65, 0x9b, 0x73, 0x78, 0xcf, 0x39, 0x7c, 0xe4,
	0x1c, 0x1e, 0x0c, 0x87, 0x47, 0xc3, 0xe1, 0xc9, 0x70, 0x78, 0x36, 0x1c, 0xd6, 0x86, 0xc3, 0x8b,
	0xe1, 0xb0, 0x35, 0x1c, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xda, 0x59, 0x48, 0xa7, 0x02,
	0x00, 0x00,
}
