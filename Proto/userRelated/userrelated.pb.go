// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: userRelated/userRelated.proto

/*
	Package pgUserRelated is a generated protocol buffer package.

	It is generated from these files:
		userRelated/userRelated.proto

	It has these top-level messages:
		UserRelatedRequest
		UserInfoResp
		UserInfo
		UserMoney
		UserMoneyResp
		UserRelatedS1
		UserRelatedS2
		UserRelatedFlag
		UserRelatedResponse
*/
package pgUserRelated

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserRelatedRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	S1               int32  `protobuf:"varint,2,opt,name=s1" json:"s1"`
	S2               int32  `protobuf:"varint,3,opt,name=s2" json:"s2"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UserRelatedRequest) Reset()                    { *m = UserRelatedRequest{} }
func (*UserRelatedRequest) ProtoMessage()               {}
func (*UserRelatedRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserRelated, []int{0} }

func (m *UserRelatedRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserRelatedRequest) GetS1() int32 {
	if m != nil {
		return m.S1
	}
	return 0
}

func (m *UserRelatedRequest) GetS2() int32 {
	if m != nil {
		return m.S2
	}
	return 0
}

type UserInfoResp struct {
	Status           int32    `protobuf:"varint,1,opt,name=status" json:"status"`
	Data             UserInfo `protobuf:"bytes,2,opt,name=data" json:"data"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *UserInfoResp) Reset()                    { *m = UserInfoResp{} }
func (*UserInfoResp) ProtoMessage()               {}
func (*UserInfoResp) Descriptor() ([]byte, []int) { return fileDescriptorUserRelated, []int{1} }

func (m *UserInfoResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserInfoResp) GetData() UserInfo {
	if m != nil {
		return m.Data
	}
	return UserInfo{}
}

type UserInfo struct {
	Nick             string `protobuf:"bytes,1,opt,name=nick" json:"nick"`
	Icon             string `protobuf:"bytes,2,opt,name=icon" json:"icon"`
	IconBig          string `protobuf:"bytes,3,opt,name=iconBig" json:"iconBig"`
	City             string `protobuf:"bytes,4,opt,name=city" json:"city"`
	RealName         string `protobuf:"bytes,5,opt,name=realName" json:"realName"`
	Sex              int32  `protobuf:"varint,6,opt,name=sex" json:"sex"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorUserRelated, []int{2} }

func (m *UserInfo) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *UserInfo) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *UserInfo) GetIconBig() string {
	if m != nil {
		return m.IconBig
	}
	return ""
}

func (m *UserInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UserInfo) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

func (m *UserInfo) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

type UserMoney struct {
	Money            int64  `protobuf:"varint,1,opt,name=money" json:"money"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UserMoney) Reset()                    { *m = UserMoney{} }
func (*UserMoney) ProtoMessage()               {}
func (*UserMoney) Descriptor() ([]byte, []int) { return fileDescriptorUserRelated, []int{3} }

func (m *UserMoney) GetMoney() int64 {
	if m != nil {
		return m.Money
	}
	return 0
}

type UserMoneyResp struct {
	Status           int32     `protobuf:"varint,1,opt,name=status" json:"status"`
	Data             UserMoney `protobuf:"bytes,2,opt,name=data" json:"data"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *UserMoneyResp) Reset()                    { *m = UserMoneyResp{} }
func (*UserMoneyResp) ProtoMessage()               {}
func (*UserMoneyResp) Descriptor() ([]byte, []int) { return fileDescriptorUserRelated, []int{4} }

func (m *UserMoneyResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserMoneyResp) GetData() UserMoney {
	if m != nil {
		return m.Data
	}
	return UserMoney{}
}

type UserRelatedS1 struct {
	Cmd1             UserInfoResp  `protobuf:"bytes,1,opt,name=cmd1" json:"cmd1"`
	Cmd2             UserMoneyResp `protobuf:"bytes,2,opt,name=cmd2" json:"cmd2"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *UserRelatedS1) Reset()                    { *m = UserRelatedS1{} }
func (*UserRelatedS1) ProtoMessage()               {}
func (*UserRelatedS1) Descriptor() ([]byte, []int) { return fileDescriptorUserRelated, []int{5} }

func (m *UserRelatedS1) GetCmd1() UserInfoResp {
	if m != nil {
		return m.Cmd1
	}
	return UserInfoResp{}
}

func (m *UserRelatedS1) GetCmd2() UserMoneyResp {
	if m != nil {
		return m.Cmd2
	}
	return UserMoneyResp{}
}

type UserRelatedS2 struct {
	Cmd1             UserInfoResp `protobuf:"bytes,1,opt,name=cmd1" json:"cmd1"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *UserRelatedS2) Reset()                    { *m = UserRelatedS2{} }
func (*UserRelatedS2) ProtoMessage()               {}
func (*UserRelatedS2) Descriptor() ([]byte, []int) { return fileDescriptorUserRelated, []int{6} }

func (m *UserRelatedS2) GetCmd1() UserInfoResp {
	if m != nil {
		return m.Cmd1
	}
	return UserInfoResp{}
}

type UserRelatedFlag struct {
	S1               []string `protobuf:"bytes,1,rep,name=s1" json:"s1,omitempty"`
	S2               []string `protobuf:"bytes,2,rep,name=s2" json:"s2,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *UserRelatedFlag) Reset()                    { *m = UserRelatedFlag{} }
func (*UserRelatedFlag) ProtoMessage()               {}
func (*UserRelatedFlag) Descriptor() ([]byte, []int) { return fileDescriptorUserRelated, []int{7} }

func (m *UserRelatedFlag) GetS1() []string {
	if m != nil {
		return m.S1
	}
	return nil
}

func (m *UserRelatedFlag) GetS2() []string {
	if m != nil {
		return m.S2
	}
	return nil
}

type UserRelatedResponse struct {
	S1               UserRelatedS1   `protobuf:"bytes,1,opt,name=s1" json:"s1"`
	S2               UserRelatedS2   `protobuf:"bytes,2,opt,name=s2" json:"s2"`
	Flag             UserRelatedFlag `protobuf:"bytes,3,opt,name=flag" json:"flag"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UserRelatedResponse) Reset()                    { *m = UserRelatedResponse{} }
func (*UserRelatedResponse) ProtoMessage()               {}
func (*UserRelatedResponse) Descriptor() ([]byte, []int) { return fileDescriptorUserRelated, []int{8} }

func (m *UserRelatedResponse) GetS1() UserRelatedS1 {
	if m != nil {
		return m.S1
	}
	return UserRelatedS1{}
}

func (m *UserRelatedResponse) GetS2() UserRelatedS2 {
	if m != nil {
		return m.S2
	}
	return UserRelatedS2{}
}

func (m *UserRelatedResponse) GetFlag() UserRelatedFlag {
	if m != nil {
		return m.Flag
	}
	return UserRelatedFlag{}
}

func init() {
	proto.RegisterType((*UserRelatedRequest)(nil), "pgUserRelated.UserRelatedRequest")
	proto.RegisterType((*UserInfoResp)(nil), "pgUserRelated.UserInfoResp")
	proto.RegisterType((*UserInfo)(nil), "pgUserRelated.UserInfo")
	proto.RegisterType((*UserMoney)(nil), "pgUserRelated.UserMoney")
	proto.RegisterType((*UserMoneyResp)(nil), "pgUserRelated.UserMoneyResp")
	proto.RegisterType((*UserRelatedS1)(nil), "pgUserRelated.UserRelatedS1")
	proto.RegisterType((*UserRelatedS2)(nil), "pgUserRelated.UserRelatedS2")
	proto.RegisterType((*UserRelatedFlag)(nil), "pgUserRelated.UserRelatedFlag")
	proto.RegisterType((*UserRelatedResponse)(nil), "pgUserRelated.UserRelatedResponse")
}
func (this *UserRelatedRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserRelatedRequest)
	if !ok {
		that2, ok := that.(UserRelatedRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserRelatedRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserRelatedRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserRelatedRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.S1 != that1.S1 {
		return fmt.Errorf("S1 this(%v) Not Equal that(%v)", this.S1, that1.S1)
	}
	if this.S2 != that1.S2 {
		return fmt.Errorf("S2 this(%v) Not Equal that(%v)", this.S2, that1.S2)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserRelatedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserRelatedRequest)
	if !ok {
		that2, ok := that.(UserRelatedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.S1 != that1.S1 {
		return false
	}
	if this.S2 != that1.S2 {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserInfoResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserInfoResp)
	if !ok {
		that2, ok := that.(UserInfoResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserInfoResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserInfoResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserInfoResp but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserInfoResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserInfoResp)
	if !ok {
		that2, ok := that.(UserInfoResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserInfo)
	if !ok {
		that2, ok := that.(UserInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserInfo but is not nil && this == nil")
	}
	if this.Nick != that1.Nick {
		return fmt.Errorf("Nick this(%v) Not Equal that(%v)", this.Nick, that1.Nick)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if this.IconBig != that1.IconBig {
		return fmt.Errorf("IconBig this(%v) Not Equal that(%v)", this.IconBig, that1.IconBig)
	}
	if this.City != that1.City {
		return fmt.Errorf("City this(%v) Not Equal that(%v)", this.City, that1.City)
	}
	if this.RealName != that1.RealName {
		return fmt.Errorf("RealName this(%v) Not Equal that(%v)", this.RealName, that1.RealName)
	}
	if this.Sex != that1.Sex {
		return fmt.Errorf("Sex this(%v) Not Equal that(%v)", this.Sex, that1.Sex)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserInfo)
	if !ok {
		that2, ok := that.(UserInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nick != that1.Nick {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.IconBig != that1.IconBig {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.RealName != that1.RealName {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserMoney) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserMoney)
	if !ok {
		that2, ok := that.(UserMoney)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserMoney")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserMoney but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserMoney but is not nil && this == nil")
	}
	if this.Money != that1.Money {
		return fmt.Errorf("Money this(%v) Not Equal that(%v)", this.Money, that1.Money)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserMoney) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserMoney)
	if !ok {
		that2, ok := that.(UserMoney)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Money != that1.Money {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserMoneyResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserMoneyResp)
	if !ok {
		that2, ok := that.(UserMoneyResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserMoneyResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserMoneyResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserMoneyResp but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserMoneyResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserMoneyResp)
	if !ok {
		that2, ok := that.(UserMoneyResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserRelatedS1) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserRelatedS1)
	if !ok {
		that2, ok := that.(UserRelatedS1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserRelatedS1")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserRelatedS1 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserRelatedS1 but is not nil && this == nil")
	}
	if !this.Cmd1.Equal(&that1.Cmd1) {
		return fmt.Errorf("Cmd1 this(%v) Not Equal that(%v)", this.Cmd1, that1.Cmd1)
	}
	if !this.Cmd2.Equal(&that1.Cmd2) {
		return fmt.Errorf("Cmd2 this(%v) Not Equal that(%v)", this.Cmd2, that1.Cmd2)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserRelatedS1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserRelatedS1)
	if !ok {
		that2, ok := that.(UserRelatedS1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cmd1.Equal(&that1.Cmd1) {
		return false
	}
	if !this.Cmd2.Equal(&that1.Cmd2) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserRelatedS2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserRelatedS2)
	if !ok {
		that2, ok := that.(UserRelatedS2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserRelatedS2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserRelatedS2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserRelatedS2 but is not nil && this == nil")
	}
	if !this.Cmd1.Equal(&that1.Cmd1) {
		return fmt.Errorf("Cmd1 this(%v) Not Equal that(%v)", this.Cmd1, that1.Cmd1)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserRelatedS2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserRelatedS2)
	if !ok {
		that2, ok := that.(UserRelatedS2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cmd1.Equal(&that1.Cmd1) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserRelatedFlag) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserRelatedFlag)
	if !ok {
		that2, ok := that.(UserRelatedFlag)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserRelatedFlag")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserRelatedFlag but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserRelatedFlag but is not nil && this == nil")
	}
	if len(this.S1) != len(that1.S1) {
		return fmt.Errorf("S1 this(%v) Not Equal that(%v)", len(this.S1), len(that1.S1))
	}
	for i := range this.S1 {
		if this.S1[i] != that1.S1[i] {
			return fmt.Errorf("S1 this[%v](%v) Not Equal that[%v](%v)", i, this.S1[i], i, that1.S1[i])
		}
	}
	if len(this.S2) != len(that1.S2) {
		return fmt.Errorf("S2 this(%v) Not Equal that(%v)", len(this.S2), len(that1.S2))
	}
	for i := range this.S2 {
		if this.S2[i] != that1.S2[i] {
			return fmt.Errorf("S2 this[%v](%v) Not Equal that[%v](%v)", i, this.S2[i], i, that1.S2[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserRelatedFlag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserRelatedFlag)
	if !ok {
		that2, ok := that.(UserRelatedFlag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.S1) != len(that1.S1) {
		return false
	}
	for i := range this.S1 {
		if this.S1[i] != that1.S1[i] {
			return false
		}
	}
	if len(this.S2) != len(that1.S2) {
		return false
	}
	for i := range this.S2 {
		if this.S2[i] != that1.S2[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserRelatedResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserRelatedResponse)
	if !ok {
		that2, ok := that.(UserRelatedResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserRelatedResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserRelatedResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserRelatedResponse but is not nil && this == nil")
	}
	if !this.S1.Equal(&that1.S1) {
		return fmt.Errorf("S1 this(%v) Not Equal that(%v)", this.S1, that1.S1)
	}
	if !this.S2.Equal(&that1.S2) {
		return fmt.Errorf("S2 this(%v) Not Equal that(%v)", this.S2, that1.S2)
	}
	if !this.Flag.Equal(&that1.Flag) {
		return fmt.Errorf("Flag this(%v) Not Equal that(%v)", this.Flag, that1.Flag)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserRelatedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserRelatedResponse)
	if !ok {
		that2, ok := that.(UserRelatedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.S1.Equal(&that1.S1) {
		return false
	}
	if !this.S2.Equal(&that1.S2) {
		return false
	}
	if !this.Flag.Equal(&that1.Flag) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserRelatedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgUserRelated.UserRelatedRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "S1: "+fmt.Sprintf("%#v", this.S1)+",\n")
	s = append(s, "S2: "+fmt.Sprintf("%#v", this.S2)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserInfoResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgUserRelated.UserInfoResp{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pgUserRelated.UserInfo{")
	s = append(s, "Nick: "+fmt.Sprintf("%#v", this.Nick)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "IconBig: "+fmt.Sprintf("%#v", this.IconBig)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "RealName: "+fmt.Sprintf("%#v", this.RealName)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserMoney) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgUserRelated.UserMoney{")
	s = append(s, "Money: "+fmt.Sprintf("%#v", this.Money)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserMoneyResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgUserRelated.UserMoneyResp{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserRelatedS1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgUserRelated.UserRelatedS1{")
	s = append(s, "Cmd1: "+strings.Replace(this.Cmd1.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Cmd2: "+strings.Replace(this.Cmd2.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserRelatedS2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgUserRelated.UserRelatedS2{")
	s = append(s, "Cmd1: "+strings.Replace(this.Cmd1.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserRelatedFlag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgUserRelated.UserRelatedFlag{")
	if this.S1 != nil {
		s = append(s, "S1: "+fmt.Sprintf("%#v", this.S1)+",\n")
	}
	if this.S2 != nil {
		s = append(s, "S2: "+fmt.Sprintf("%#v", this.S2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserRelatedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgUserRelated.UserRelatedResponse{")
	s = append(s, "S1: "+strings.Replace(this.S1.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "S2: "+strings.Replace(this.S2.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Flag: "+strings.Replace(this.Flag.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUserRelated(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UserRelatedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRelatedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.S1))
	dAtA[i] = 0x18
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.S2))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.Data.Size()))
	n1, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(len(m.Nick)))
	i += copy(dAtA[i:], m.Nick)
	dAtA[i] = 0x12
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(len(m.Icon)))
	i += copy(dAtA[i:], m.Icon)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(len(m.IconBig)))
	i += copy(dAtA[i:], m.IconBig)
	dAtA[i] = 0x22
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(len(m.City)))
	i += copy(dAtA[i:], m.City)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(len(m.RealName)))
	i += copy(dAtA[i:], m.RealName)
	dAtA[i] = 0x30
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.Sex))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserMoney) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMoney) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.Money))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserMoneyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMoneyResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.Data.Size()))
	n2, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserRelatedS1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRelatedS1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.Cmd1.Size()))
	n3, err := m.Cmd1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.Cmd2.Size()))
	n4, err := m.Cmd2.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserRelatedS2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRelatedS2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.Cmd1.Size()))
	n5, err := m.Cmd1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserRelatedFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRelatedFlag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.S1) > 0 {
		for _, s := range m.S1 {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.S2) > 0 {
		for _, s := range m.S2 {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserRelatedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRelatedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.S1.Size()))
	n6, err := m.S1.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.S2.Size()))
	n7, err := m.S2.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x1a
	i++
	i = encodeVarintUserRelated(dAtA, i, uint64(m.Flag.Size()))
	n8, err := m.Flag.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintUserRelated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUserRelatedRequest(r randyUserRelated, easy bool) *UserRelatedRequest {
	this := &UserRelatedRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.S1 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.S1 *= -1
	}
	this.S2 = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.S2 *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserRelated(r, 4)
	}
	return this
}

func NewPopulatedUserInfoResp(r randyUserRelated, easy bool) *UserInfoResp {
	this := &UserInfoResp{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	v1 := NewPopulatedUserInfo(r, easy)
	this.Data = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserRelated(r, 3)
	}
	return this
}

func NewPopulatedUserInfo(r randyUserRelated, easy bool) *UserInfo {
	this := &UserInfo{}
	this.Nick = string(randStringUserRelated(r))
	this.Icon = string(randStringUserRelated(r))
	this.IconBig = string(randStringUserRelated(r))
	this.City = string(randStringUserRelated(r))
	this.RealName = string(randStringUserRelated(r))
	this.Sex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sex *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserRelated(r, 7)
	}
	return this
}

func NewPopulatedUserMoney(r randyUserRelated, easy bool) *UserMoney {
	this := &UserMoney{}
	this.Money = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Money *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserRelated(r, 2)
	}
	return this
}

func NewPopulatedUserMoneyResp(r randyUserRelated, easy bool) *UserMoneyResp {
	this := &UserMoneyResp{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	v2 := NewPopulatedUserMoney(r, easy)
	this.Data = *v2
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserRelated(r, 3)
	}
	return this
}

func NewPopulatedUserRelatedS1(r randyUserRelated, easy bool) *UserRelatedS1 {
	this := &UserRelatedS1{}
	v3 := NewPopulatedUserInfoResp(r, easy)
	this.Cmd1 = *v3
	v4 := NewPopulatedUserMoneyResp(r, easy)
	this.Cmd2 = *v4
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserRelated(r, 3)
	}
	return this
}

func NewPopulatedUserRelatedS2(r randyUserRelated, easy bool) *UserRelatedS2 {
	this := &UserRelatedS2{}
	v5 := NewPopulatedUserInfoResp(r, easy)
	this.Cmd1 = *v5
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserRelated(r, 2)
	}
	return this
}

func NewPopulatedUserRelatedFlag(r randyUserRelated, easy bool) *UserRelatedFlag {
	this := &UserRelatedFlag{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.S1 = make([]string, v6)
		for i := 0; i < v6; i++ {
			this.S1[i] = string(randStringUserRelated(r))
		}
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.S2 = make([]string, v7)
		for i := 0; i < v7; i++ {
			this.S2[i] = string(randStringUserRelated(r))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserRelated(r, 3)
	}
	return this
}

func NewPopulatedUserRelatedResponse(r randyUserRelated, easy bool) *UserRelatedResponse {
	this := &UserRelatedResponse{}
	v8 := NewPopulatedUserRelatedS1(r, easy)
	this.S1 = *v8
	v9 := NewPopulatedUserRelatedS2(r, easy)
	this.S2 = *v9
	v10 := NewPopulatedUserRelatedFlag(r, easy)
	this.Flag = *v10
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUserRelated(r, 4)
	}
	return this
}

type randyUserRelated interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUserRelated(r randyUserRelated) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUserRelated(r randyUserRelated) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneUserRelated(r)
	}
	return string(tmps)
}
func randUnrecognizedUserRelated(r randyUserRelated, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldUserRelated(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldUserRelated(dAtA []byte, r randyUserRelated, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateUserRelated(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateUserRelated(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateUserRelated(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateUserRelated(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateUserRelated(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateUserRelated(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateUserRelated(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UserRelatedRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUserRelated(uint64(m.Mid))
	n += 1 + sovUserRelated(uint64(m.S1))
	n += 1 + sovUserRelated(uint64(m.S2))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfoResp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUserRelated(uint64(m.Status))
	l = m.Data.Size()
	n += 1 + l + sovUserRelated(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nick)
	n += 1 + l + sovUserRelated(uint64(l))
	l = len(m.Icon)
	n += 1 + l + sovUserRelated(uint64(l))
	l = len(m.IconBig)
	n += 1 + l + sovUserRelated(uint64(l))
	l = len(m.City)
	n += 1 + l + sovUserRelated(uint64(l))
	l = len(m.RealName)
	n += 1 + l + sovUserRelated(uint64(l))
	n += 1 + sovUserRelated(uint64(m.Sex))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserMoney) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUserRelated(uint64(m.Money))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserMoneyResp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUserRelated(uint64(m.Status))
	l = m.Data.Size()
	n += 1 + l + sovUserRelated(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserRelatedS1) Size() (n int) {
	var l int
	_ = l
	l = m.Cmd1.Size()
	n += 1 + l + sovUserRelated(uint64(l))
	l = m.Cmd2.Size()
	n += 1 + l + sovUserRelated(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserRelatedS2) Size() (n int) {
	var l int
	_ = l
	l = m.Cmd1.Size()
	n += 1 + l + sovUserRelated(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserRelatedFlag) Size() (n int) {
	var l int
	_ = l
	if len(m.S1) > 0 {
		for _, s := range m.S1 {
			l = len(s)
			n += 1 + l + sovUserRelated(uint64(l))
		}
	}
	if len(m.S2) > 0 {
		for _, s := range m.S2 {
			l = len(s)
			n += 1 + l + sovUserRelated(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserRelatedResponse) Size() (n int) {
	var l int
	_ = l
	l = m.S1.Size()
	n += 1 + l + sovUserRelated(uint64(l))
	l = m.S2.Size()
	n += 1 + l + sovUserRelated(uint64(l))
	l = m.Flag.Size()
	n += 1 + l + sovUserRelated(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUserRelated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUserRelated(x uint64) (n int) {
	return sovUserRelated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserRelatedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserRelatedRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`S1:` + fmt.Sprintf("%v", this.S1) + `,`,
		`S2:` + fmt.Sprintf("%v", this.S2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserInfoResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserInfoResp{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "UserInfo", "UserInfo", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserInfo{`,
		`Nick:` + fmt.Sprintf("%v", this.Nick) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`IconBig:` + fmt.Sprintf("%v", this.IconBig) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`RealName:` + fmt.Sprintf("%v", this.RealName) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserMoney) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserMoney{`,
		`Money:` + fmt.Sprintf("%v", this.Money) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserMoneyResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserMoneyResp{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "UserMoney", "UserMoney", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserRelatedS1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserRelatedS1{`,
		`Cmd1:` + strings.Replace(strings.Replace(this.Cmd1.String(), "UserInfoResp", "UserInfoResp", 1), `&`, ``, 1) + `,`,
		`Cmd2:` + strings.Replace(strings.Replace(this.Cmd2.String(), "UserMoneyResp", "UserMoneyResp", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserRelatedS2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserRelatedS2{`,
		`Cmd1:` + strings.Replace(strings.Replace(this.Cmd1.String(), "UserInfoResp", "UserInfoResp", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserRelatedFlag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserRelatedFlag{`,
		`S1:` + fmt.Sprintf("%v", this.S1) + `,`,
		`S2:` + fmt.Sprintf("%v", this.S2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserRelatedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserRelatedResponse{`,
		`S1:` + strings.Replace(strings.Replace(this.S1.String(), "UserRelatedS1", "UserRelatedS1", 1), `&`, ``, 1) + `,`,
		`S2:` + strings.Replace(strings.Replace(this.S2.String(), "UserRelatedS2", "UserRelatedS2", 1), `&`, ``, 1) + `,`,
		`Flag:` + strings.Replace(strings.Replace(this.Flag.String(), "UserRelatedFlag", "UserRelatedFlag", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUserRelated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserRelatedRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserRelated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRelatedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRelatedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S1", wireType)
			}
			m.S1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.S1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2", wireType)
			}
			m.S2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.S2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserRelated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserRelated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserRelated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserRelated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserRelated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserRelated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconBig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconBig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserRelated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserRelated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMoney) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserRelated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMoney: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMoney: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserRelated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserRelated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMoneyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserRelated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMoneyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMoneyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserRelated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserRelated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRelatedS1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserRelated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRelatedS1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRelatedS1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cmd1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cmd2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserRelated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserRelated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRelatedS2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserRelated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRelatedS2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRelatedS2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cmd1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserRelated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserRelated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRelatedFlag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserRelated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRelatedFlag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRelatedFlag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S1 = append(m.S1, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S2 = append(m.S2, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserRelated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserRelated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRelatedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserRelated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRelatedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRelatedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.S1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.S2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserRelated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Flag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserRelated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUserRelated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserRelated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserRelated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserRelated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUserRelated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUserRelated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUserRelated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUserRelated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserRelated   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("userRelated/userRelated.proto", fileDescriptorUserRelated) }

var fileDescriptorUserRelated = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xee, 0x39, 0x4e, 0x69, 0x5e, 0x68, 0x91, 0x0e, 0x04, 0xa7, 0x52, 0x8e, 0xc8, 0x0b, 0x19,
	0x20, 0x91, 0x4f, 0x02, 0x31, 0x67, 0xa8, 0xc4, 0x00, 0x43, 0x10, 0x12, 0x1b, 0xba, 0xda, 0x17,
	0x63, 0x11, 0xfb, 0x42, 0xce, 0x96, 0xe8, 0x82, 0xf8, 0x39, 0xcc, 0x2c, 0x30, 0x32, 0x76, 0x64,
	0x64, 0x42, 0x8d, 0x7f, 0x01, 0x23, 0x23, 0xba, 0x17, 0xdb, 0xb5, 0x11, 0x16, 0xa8, 0x53, 0xee,
	0xbe, 0xf7, 0x7d, 0xdf, 0xbb, 0xf7, 0xe5, 0x19, 0xee, 0xe4, 0x46, 0xad, 0xe7, 0x6a, 0x29, 0x33,
	0x15, 0x4e, 0x1b, 0xe7, 0xc9, 0x6a, 0xad, 0x33, 0x4d, 0xf7, 0x57, 0xd1, 0x8b, 0x0b, 0xf0, 0xf0,
	0x41, 0x14, 0x67, 0xaf, 0xf3, 0x93, 0x49, 0xa0, 0x93, 0x69, 0xa4, 0x23, 0x3d, 0x45, 0xd6, 0x49,
	0xbe, 0xc0, 0x1b, 0x5e, 0xf0, 0xb4, 0x55, 0x7b, 0x2f, 0x81, 0x36, 0xd4, 0x73, 0xf5, 0x36, 0x57,
	0x26, 0xa3, 0x37, 0xa1, 0x97, 0xc4, 0x21, 0x23, 0x23, 0x67, 0xdc, 0x9b, 0xb9, 0x67, 0x3f, 0xee,
	0xee, 0xcc, 0x2d, 0x40, 0x6f, 0x80, 0x63, 0x7c, 0xe6, 0x8c, 0xc8, 0xb8, 0x5f, 0xc2, 0x8e, 0xf1,
	0x11, 0x15, 0xac, 0xd7, 0x42, 0x85, 0xf7, 0x0a, 0xae, 0x5a, 0xe7, 0x27, 0xe9, 0x42, 0xcf, 0x95,
	0x59, 0xd1, 0x23, 0xd8, 0x35, 0x99, 0xcc, 0x72, 0xc3, 0x48, 0x83, 0x59, 0x62, 0xd4, 0x07, 0x37,
	0x94, 0x99, 0x44, 0xef, 0xa1, 0xb8, 0x35, 0x69, 0x0d, 0x35, 0xa9, 0x8c, 0x4a, 0x11, 0x52, 0xbd,
	0x4f, 0x04, 0xf6, 0xaa, 0x02, 0x65, 0xe0, 0xa6, 0x71, 0xf0, 0x06, 0xbd, 0x07, 0x15, 0xcd, 0x22,
	0xb6, 0x12, 0x07, 0x3a, 0x45, 0xe7, 0xba, 0x62, 0x11, 0xca, 0xe1, 0x8a, 0xfd, 0x9d, 0xc5, 0x11,
	0x3e, 0xbe, 0x2a, 0x56, 0xa0, 0x55, 0x06, 0x71, 0x76, 0xca, 0xdc, 0xa6, 0xd2, 0x22, 0x74, 0x04,
	0x7b, 0x6b, 0x25, 0x97, 0xcf, 0x64, 0xa2, 0x58, 0xbf, 0x51, 0xad, 0x51, 0x9b, 0xa0, 0x51, 0xef,
	0xd8, 0x6e, 0x63, 0x54, 0x0b, 0x78, 0xf7, 0x60, 0x60, 0xdf, 0xfc, 0x54, 0xa7, 0xea, 0x94, 0x1e,
	0x42, 0x3f, 0xb1, 0x07, 0x7c, 0x75, 0x15, 0xf4, 0x16, 0xf2, 0x24, 0xec, 0xd7, 0xc4, 0xff, 0xc8,
	0x4f, 0xb4, 0xf2, 0x63, 0x7f, 0xc9, 0x0f, 0x9d, 0x5a, 0x01, 0xbe, 0xdf, 0xb6, 0x28, 0x49, 0xcf,
	0x7d, 0xfa, 0x10, 0xdc, 0x20, 0x09, 0x7d, 0x6c, 0x30, 0x14, 0xb7, 0x3b, 0xfe, 0x04, 0xfb, 0x9a,
	0x3a, 0x8d, 0x24, 0xf4, 0xe9, 0x23, 0x94, 0x89, 0xb2, 0xf7, 0x51, 0x57, 0xef, 0x3f, 0x74, 0xc2,
	0x3b, 0x6e, 0xf7, 0x17, 0x97, 0xec, 0xef, 0xf9, 0x70, 0xad, 0xc1, 0x3b, 0x5e, 0xca, 0x88, 0x1e,
	0xe0, 0xa2, 0x92, 0x51, 0x6f, 0x3c, 0xc0, 0x15, 0x3d, 0xc0, 0x15, 0x75, 0xca, 0xbb, 0xf0, 0x3e,
	0x13, 0xb8, 0xde, 0xda, 0x7b, 0xb3, 0xd2, 0xa9, 0x51, 0x54, 0x94, 0xba, 0xae, 0x41, 0xea, 0xac,
	0x1a, 0xeb, 0x2f, 0x4a, 0xef, 0x7f, 0x69, 0xc4, 0xc5, 0xc7, 0x41, 0x1f, 0x83, 0xbb, 0x58, 0xca,
	0xed, 0xde, 0x0d, 0x05, 0xef, 0x56, 0xd9, 0x69, 0xaa, 0x61, 0xad, 0x62, 0x76, 0xff, 0xfb, 0x86,
	0xef, 0x9c, 0x6f, 0x38, 0xf9, 0xb9, 0xe1, 0xe4, 0xd7, 0x86, 0x93, 0x0f, 0x05, 0x27, 0x1f, 0x0b,
	0x4e, 0xbe, 0x14, 0x9c, 0x7c, 0x2d, 0x38, 0x39, 0x2b, 0x38, 0xf9, 0x56, 0x70, 0x72, 0x5e, 0x70,
	0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x7e, 0xd6, 0x30, 0x3c, 0x04, 0x00, 0x00,
}
