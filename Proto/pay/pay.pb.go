// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pay/pay.proto

/*
	Package pgPay is a generated protocol buffer package.

	It is generated from these files:
		pay/pay.proto

	It has these top-level messages:
		ConfigRequest
		ConfigResponse
		ConfigRespData
		GoodsRespData
		PayRespData
		OrderRequest
		OrderResponse
		OrderInfo
		RepostRequest
*/
package pgPay

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 商城配置
type ConfigRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorPay, []int{0} }

func (m *ConfigRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type ConfigResponse struct {
	Status           int32          `protobuf:"varint,1,req,name=status" json:"status"`
	Msg              string         `protobuf:"bytes,2,req,name=msg" json:"msg"`
	Data             ConfigRespData `protobuf:"bytes,3,opt,name=data" json:"data"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptorPay, []int{1} }

func (m *ConfigResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ConfigResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ConfigResponse) GetData() ConfigRespData {
	if m != nil {
		return m.Data
	}
	return ConfigRespData{}
}

type ConfigRespData struct {
	Goods            []GoodsRespData `protobuf:"bytes,1,rep,name=goods" json:"goods"`
	Pay              []PayRespData   `protobuf:"bytes,2,rep,name=pay" json:"pay"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ConfigRespData) Reset()                    { *m = ConfigRespData{} }
func (*ConfigRespData) ProtoMessage()               {}
func (*ConfigRespData) Descriptor() ([]byte, []int) { return fileDescriptorPay, []int{2} }

func (m *ConfigRespData) GetGoods() []GoodsRespData {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *ConfigRespData) GetPay() []PayRespData {
	if m != nil {
		return m.Pay
	}
	return nil
}

type GoodsRespData struct {
	Gid              int32   `protobuf:"varint,1,opt,name=gid" json:"gid"`
	Price            float32 `protobuf:"fixed32,2,opt,name=price" json:"price"`
	Icon             string  `protobuf:"bytes,3,opt,name=icon" json:"icon"`
	Name             string  `protobuf:"bytes,4,opt,name=name" json:"name"`
	Ptype            int32   `protobuf:"varint,5,opt,name=ptype" json:"ptype"`
	Number           int32   `protobuf:"varint,6,opt,name=number" json:"number"`
	Order            int32   `protobuf:"varint,7,opt,name=order" json:"order"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GoodsRespData) Reset()                    { *m = GoodsRespData{} }
func (*GoodsRespData) ProtoMessage()               {}
func (*GoodsRespData) Descriptor() ([]byte, []int) { return fileDescriptorPay, []int{3} }

func (m *GoodsRespData) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *GoodsRespData) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *GoodsRespData) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *GoodsRespData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GoodsRespData) GetPtype() int32 {
	if m != nil {
		return m.Ptype
	}
	return 0
}

func (m *GoodsRespData) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *GoodsRespData) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

// 支付方式配置
type PayRespData struct {
	Pmodel           int32  `protobuf:"varint,1,opt,name=pmodel" json:"pmodel"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PayRespData) Reset()                    { *m = PayRespData{} }
func (*PayRespData) ProtoMessage()               {}
func (*PayRespData) Descriptor() ([]byte, []int) { return fileDescriptorPay, []int{4} }

func (m *PayRespData) GetPmodel() int32 {
	if m != nil {
		return m.Pmodel
	}
	return 0
}

// 下单
type OrderRequest struct {
	Mid              int64   `protobuf:"varint,1,req,name=mid" json:"mid"`
	Pmodel           int32   `protobuf:"varint,2,req,name=pmodel" json:"pmodel"`
	Price            float32 `protobuf:"fixed32,3,opt,name=price" json:"price"`
	Ptype            int32   `protobuf:"varint,4,opt,name=ptype" json:"ptype"`
	Number           int32   `protobuf:"varint,5,opt,name=number" json:"number"`
	Gid              int32   `protobuf:"varint,6,req,name=gid" json:"gid"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OrderRequest) Reset()                    { *m = OrderRequest{} }
func (*OrderRequest) ProtoMessage()               {}
func (*OrderRequest) Descriptor() ([]byte, []int) { return fileDescriptorPay, []int{5} }

func (m *OrderRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *OrderRequest) GetPmodel() int32 {
	if m != nil {
		return m.Pmodel
	}
	return 0
}

func (m *OrderRequest) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderRequest) GetPtype() int32 {
	if m != nil {
		return m.Ptype
	}
	return 0
}

func (m *OrderRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *OrderRequest) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

type OrderResponse struct {
	Status           int32     `protobuf:"varint,1,req,name=status" json:"status"`
	Msg              string    `protobuf:"bytes,2,req,name=msg" json:"msg"`
	Data             OrderInfo `protobuf:"bytes,3,opt,name=data" json:"data"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *OrderResponse) Reset()                    { *m = OrderResponse{} }
func (*OrderResponse) ProtoMessage()               {}
func (*OrderResponse) Descriptor() ([]byte, []int) { return fileDescriptorPay, []int{6} }

func (m *OrderResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OrderResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *OrderResponse) GetData() OrderInfo {
	if m != nil {
		return m.Data
	}
	return OrderInfo{}
}

type OrderInfo struct {
	Pid              string `protobuf:"bytes,1,opt,name=pid" json:"pid"`
	Order            string `protobuf:"bytes,2,opt,name=order" json:"order"`
	Partnerid        string `protobuf:"bytes,3,opt,name=partnerid" json:"partnerid"`
	Prepayid         string `protobuf:"bytes,4,opt,name=prepayid" json:"prepayid"`
	Noncestr         string `protobuf:"bytes,5,opt,name=noncestr" json:"noncestr"`
	Timestamp        int64  `protobuf:"varint,6,opt,name=timestamp" json:"timestamp"`
	Package          string `protobuf:"bytes,7,opt,name=package" json:"package"`
	Sign             string `protobuf:"bytes,8,opt,name=sign" json:"sign"`
	All              string `protobuf:"bytes,9,opt,name=all" json:"all"`
	Appstoreid       string `protobuf:"bytes,10,opt,name=appstoreid" json:"appstoreid"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OrderInfo) Reset()                    { *m = OrderInfo{} }
func (*OrderInfo) ProtoMessage()               {}
func (*OrderInfo) Descriptor() ([]byte, []int) { return fileDescriptorPay, []int{7} }

func (m *OrderInfo) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *OrderInfo) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *OrderInfo) GetPartnerid() string {
	if m != nil {
		return m.Partnerid
	}
	return ""
}

func (m *OrderInfo) GetPrepayid() string {
	if m != nil {
		return m.Prepayid
	}
	return ""
}

func (m *OrderInfo) GetNoncestr() string {
	if m != nil {
		return m.Noncestr
	}
	return ""
}

func (m *OrderInfo) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OrderInfo) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *OrderInfo) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *OrderInfo) GetAll() string {
	if m != nil {
		return m.All
	}
	return ""
}

func (m *OrderInfo) GetAppstoreid() string {
	if m != nil {
		return m.Appstoreid
	}
	return ""
}

type RepostRequest struct {
	Pid              string `protobuf:"bytes,1,req,name=pid" json:"pid"`
	Pdealno          string `protobuf:"bytes,2,req,name=pdealno" json:"pdealno"`
	Receipt          string `protobuf:"bytes,3,req,name=receipt" json:"receipt"`
	BundleId         string `protobuf:"bytes,4,req,name=bundleId" json:"bundleId"`
	Mid              int64  `protobuf:"varint,5,req,name=mid" json:"mid"`
	Sandbox          int32  `protobuf:"varint,6,opt,name=sandbox" json:"sandbox"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RepostRequest) Reset()                    { *m = RepostRequest{} }
func (*RepostRequest) ProtoMessage()               {}
func (*RepostRequest) Descriptor() ([]byte, []int) { return fileDescriptorPay, []int{8} }

func (m *RepostRequest) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *RepostRequest) GetPdealno() string {
	if m != nil {
		return m.Pdealno
	}
	return ""
}

func (m *RepostRequest) GetReceipt() string {
	if m != nil {
		return m.Receipt
	}
	return ""
}

func (m *RepostRequest) GetBundleId() string {
	if m != nil {
		return m.BundleId
	}
	return ""
}

func (m *RepostRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *RepostRequest) GetSandbox() int32 {
	if m != nil {
		return m.Sandbox
	}
	return 0
}

func init() {
	proto.RegisterType((*ConfigRequest)(nil), "pgPay.ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "pgPay.ConfigResponse")
	proto.RegisterType((*ConfigRespData)(nil), "pgPay.ConfigRespData")
	proto.RegisterType((*GoodsRespData)(nil), "pgPay.GoodsRespData")
	proto.RegisterType((*PayRespData)(nil), "pgPay.PayRespData")
	proto.RegisterType((*OrderRequest)(nil), "pgPay.OrderRequest")
	proto.RegisterType((*OrderResponse)(nil), "pgPay.OrderResponse")
	proto.RegisterType((*OrderInfo)(nil), "pgPay.OrderInfo")
	proto.RegisterType((*RepostRequest)(nil), "pgPay.RepostRequest")
}
func (this *ConfigRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConfigRequest)
	if !ok {
		that2, ok := that.(ConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConfigRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConfigRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConfigRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigRequest)
	if !ok {
		that2, ok := that.(ConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConfigResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConfigResponse)
	if !ok {
		that2, ok := that.(ConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConfigResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConfigResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConfigResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigResponse)
	if !ok {
		that2, ok := that.(ConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConfigRespData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConfigRespData)
	if !ok {
		that2, ok := that.(ConfigRespData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConfigRespData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConfigRespData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConfigRespData but is not nil && this == nil")
	}
	if len(this.Goods) != len(that1.Goods) {
		return fmt.Errorf("Goods this(%v) Not Equal that(%v)", len(this.Goods), len(that1.Goods))
	}
	for i := range this.Goods {
		if !this.Goods[i].Equal(&that1.Goods[i]) {
			return fmt.Errorf("Goods this[%v](%v) Not Equal that[%v](%v)", i, this.Goods[i], i, that1.Goods[i])
		}
	}
	if len(this.Pay) != len(that1.Pay) {
		return fmt.Errorf("Pay this(%v) Not Equal that(%v)", len(this.Pay), len(that1.Pay))
	}
	for i := range this.Pay {
		if !this.Pay[i].Equal(&that1.Pay[i]) {
			return fmt.Errorf("Pay this[%v](%v) Not Equal that[%v](%v)", i, this.Pay[i], i, that1.Pay[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ConfigRespData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigRespData)
	if !ok {
		that2, ok := that.(ConfigRespData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Goods) != len(that1.Goods) {
		return false
	}
	for i := range this.Goods {
		if !this.Goods[i].Equal(&that1.Goods[i]) {
			return false
		}
	}
	if len(this.Pay) != len(that1.Pay) {
		return false
	}
	for i := range this.Pay {
		if !this.Pay[i].Equal(&that1.Pay[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GoodsRespData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GoodsRespData)
	if !ok {
		that2, ok := that.(GoodsRespData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GoodsRespData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GoodsRespData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GoodsRespData but is not nil && this == nil")
	}
	if this.Gid != that1.Gid {
		return fmt.Errorf("Gid this(%v) Not Equal that(%v)", this.Gid, that1.Gid)
	}
	if this.Price != that1.Price {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Ptype != that1.Ptype {
		return fmt.Errorf("Ptype this(%v) Not Equal that(%v)", this.Ptype, that1.Ptype)
	}
	if this.Number != that1.Number {
		return fmt.Errorf("Number this(%v) Not Equal that(%v)", this.Number, that1.Number)
	}
	if this.Order != that1.Order {
		return fmt.Errorf("Order this(%v) Not Equal that(%v)", this.Order, that1.Order)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GoodsRespData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoodsRespData)
	if !ok {
		that2, ok := that.(GoodsRespData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gid != that1.Gid {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Ptype != that1.Ptype {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PayRespData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PayRespData)
	if !ok {
		that2, ok := that.(PayRespData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PayRespData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PayRespData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PayRespData but is not nil && this == nil")
	}
	if this.Pmodel != that1.Pmodel {
		return fmt.Errorf("Pmodel this(%v) Not Equal that(%v)", this.Pmodel, that1.Pmodel)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PayRespData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PayRespData)
	if !ok {
		that2, ok := that.(PayRespData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Pmodel != that1.Pmodel {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OrderRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OrderRequest)
	if !ok {
		that2, ok := that.(OrderRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OrderRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OrderRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OrderRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.Pmodel != that1.Pmodel {
		return fmt.Errorf("Pmodel this(%v) Not Equal that(%v)", this.Pmodel, that1.Pmodel)
	}
	if this.Price != that1.Price {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if this.Ptype != that1.Ptype {
		return fmt.Errorf("Ptype this(%v) Not Equal that(%v)", this.Ptype, that1.Ptype)
	}
	if this.Number != that1.Number {
		return fmt.Errorf("Number this(%v) Not Equal that(%v)", this.Number, that1.Number)
	}
	if this.Gid != that1.Gid {
		return fmt.Errorf("Gid this(%v) Not Equal that(%v)", this.Gid, that1.Gid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OrderRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrderRequest)
	if !ok {
		that2, ok := that.(OrderRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.Pmodel != that1.Pmodel {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Ptype != that1.Ptype {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Gid != that1.Gid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OrderResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OrderResponse)
	if !ok {
		that2, ok := that.(OrderResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OrderResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OrderResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OrderResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OrderResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrderResponse)
	if !ok {
		that2, ok := that.(OrderResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OrderInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OrderInfo)
	if !ok {
		that2, ok := that.(OrderInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OrderInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OrderInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OrderInfo but is not nil && this == nil")
	}
	if this.Pid != that1.Pid {
		return fmt.Errorf("Pid this(%v) Not Equal that(%v)", this.Pid, that1.Pid)
	}
	if this.Order != that1.Order {
		return fmt.Errorf("Order this(%v) Not Equal that(%v)", this.Order, that1.Order)
	}
	if this.Partnerid != that1.Partnerid {
		return fmt.Errorf("Partnerid this(%v) Not Equal that(%v)", this.Partnerid, that1.Partnerid)
	}
	if this.Prepayid != that1.Prepayid {
		return fmt.Errorf("Prepayid this(%v) Not Equal that(%v)", this.Prepayid, that1.Prepayid)
	}
	if this.Noncestr != that1.Noncestr {
		return fmt.Errorf("Noncestr this(%v) Not Equal that(%v)", this.Noncestr, that1.Noncestr)
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.Package != that1.Package {
		return fmt.Errorf("Package this(%v) Not Equal that(%v)", this.Package, that1.Package)
	}
	if this.Sign != that1.Sign {
		return fmt.Errorf("Sign this(%v) Not Equal that(%v)", this.Sign, that1.Sign)
	}
	if this.All != that1.All {
		return fmt.Errorf("All this(%v) Not Equal that(%v)", this.All, that1.All)
	}
	if this.Appstoreid != that1.Appstoreid {
		return fmt.Errorf("Appstoreid this(%v) Not Equal that(%v)", this.Appstoreid, that1.Appstoreid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OrderInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrderInfo)
	if !ok {
		that2, ok := that.(OrderInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Pid != that1.Pid {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Partnerid != that1.Partnerid {
		return false
	}
	if this.Prepayid != that1.Prepayid {
		return false
	}
	if this.Noncestr != that1.Noncestr {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Package != that1.Package {
		return false
	}
	if this.Sign != that1.Sign {
		return false
	}
	if this.All != that1.All {
		return false
	}
	if this.Appstoreid != that1.Appstoreid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RepostRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RepostRequest)
	if !ok {
		that2, ok := that.(RepostRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RepostRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RepostRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RepostRequest but is not nil && this == nil")
	}
	if this.Pid != that1.Pid {
		return fmt.Errorf("Pid this(%v) Not Equal that(%v)", this.Pid, that1.Pid)
	}
	if this.Pdealno != that1.Pdealno {
		return fmt.Errorf("Pdealno this(%v) Not Equal that(%v)", this.Pdealno, that1.Pdealno)
	}
	if this.Receipt != that1.Receipt {
		return fmt.Errorf("Receipt this(%v) Not Equal that(%v)", this.Receipt, that1.Receipt)
	}
	if this.BundleId != that1.BundleId {
		return fmt.Errorf("BundleId this(%v) Not Equal that(%v)", this.BundleId, that1.BundleId)
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.Sandbox != that1.Sandbox {
		return fmt.Errorf("Sandbox this(%v) Not Equal that(%v)", this.Sandbox, that1.Sandbox)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RepostRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RepostRequest)
	if !ok {
		that2, ok := that.(RepostRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Pid != that1.Pid {
		return false
	}
	if this.Pdealno != that1.Pdealno {
		return false
	}
	if this.Receipt != that1.Receipt {
		return false
	}
	if this.BundleId != that1.BundleId {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.Sandbox != that1.Sandbox {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgPay.ConfigRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgPay.ConfigResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigRespData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgPay.ConfigRespData{")
	if this.Goods != nil {
		vs := make([]*GoodsRespData, len(this.Goods))
		for i := range vs {
			vs[i] = &this.Goods[i]
		}
		s = append(s, "Goods: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.Pay != nil {
		vs := make([]*PayRespData, len(this.Pay))
		for i := range vs {
			vs[i] = &this.Pay[i]
		}
		s = append(s, "Pay: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GoodsRespData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pgPay.GoodsRespData{")
	s = append(s, "Gid: "+fmt.Sprintf("%#v", this.Gid)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Ptype: "+fmt.Sprintf("%#v", this.Ptype)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Order: "+fmt.Sprintf("%#v", this.Order)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PayRespData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgPay.PayRespData{")
	s = append(s, "Pmodel: "+fmt.Sprintf("%#v", this.Pmodel)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pgPay.OrderRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "Pmodel: "+fmt.Sprintf("%#v", this.Pmodel)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Ptype: "+fmt.Sprintf("%#v", this.Ptype)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Gid: "+fmt.Sprintf("%#v", this.Gid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgPay.OrderResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pgPay.OrderInfo{")
	s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	s = append(s, "Order: "+fmt.Sprintf("%#v", this.Order)+",\n")
	s = append(s, "Partnerid: "+fmt.Sprintf("%#v", this.Partnerid)+",\n")
	s = append(s, "Prepayid: "+fmt.Sprintf("%#v", this.Prepayid)+",\n")
	s = append(s, "Noncestr: "+fmt.Sprintf("%#v", this.Noncestr)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Package: "+fmt.Sprintf("%#v", this.Package)+",\n")
	s = append(s, "Sign: "+fmt.Sprintf("%#v", this.Sign)+",\n")
	s = append(s, "All: "+fmt.Sprintf("%#v", this.All)+",\n")
	s = append(s, "Appstoreid: "+fmt.Sprintf("%#v", this.Appstoreid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RepostRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pgPay.RepostRequest{")
	s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	s = append(s, "Pdealno: "+fmt.Sprintf("%#v", this.Pdealno)+",\n")
	s = append(s, "Receipt: "+fmt.Sprintf("%#v", this.Receipt)+",\n")
	s = append(s, "BundleId: "+fmt.Sprintf("%#v", this.BundleId)+",\n")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "Sandbox: "+fmt.Sprintf("%#v", this.Sandbox)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPay(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Mid))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Data.Size()))
	n1, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConfigRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Goods) > 0 {
		for _, msg := range m.Goods {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Pay) > 0 {
		for _, msg := range m.Pay {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GoodsRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Gid))
	dAtA[i] = 0x15
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
	i += 4
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Icon)))
	i += copy(dAtA[i:], m.Icon)
	dAtA[i] = 0x22
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x28
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Ptype))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Number))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Order))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Pmodel))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Pmodel))
	dAtA[i] = 0x1d
	i++
	binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
	i += 4
	dAtA[i] = 0x20
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Ptype))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Number))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Gid))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Data.Size()))
	n2, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OrderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Pid)))
	i += copy(dAtA[i:], m.Pid)
	dAtA[i] = 0x12
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Order)))
	i += copy(dAtA[i:], m.Order)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Partnerid)))
	i += copy(dAtA[i:], m.Partnerid)
	dAtA[i] = 0x22
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Prepayid)))
	i += copy(dAtA[i:], m.Prepayid)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Noncestr)))
	i += copy(dAtA[i:], m.Noncestr)
	dAtA[i] = 0x30
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Timestamp))
	dAtA[i] = 0x3a
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Package)))
	i += copy(dAtA[i:], m.Package)
	dAtA[i] = 0x42
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Sign)))
	i += copy(dAtA[i:], m.Sign)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.All)))
	i += copy(dAtA[i:], m.All)
	dAtA[i] = 0x52
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Appstoreid)))
	i += copy(dAtA[i:], m.Appstoreid)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RepostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepostRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Pid)))
	i += copy(dAtA[i:], m.Pid)
	dAtA[i] = 0x12
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Pdealno)))
	i += copy(dAtA[i:], m.Pdealno)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.Receipt)))
	i += copy(dAtA[i:], m.Receipt)
	dAtA[i] = 0x22
	i++
	i = encodeVarintPay(dAtA, i, uint64(len(m.BundleId)))
	i += copy(dAtA[i:], m.BundleId)
	dAtA[i] = 0x28
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPay(dAtA, i, uint64(m.Sandbox))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPay(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedConfigRequest(r randyPay, easy bool) *ConfigRequest {
	this := &ConfigRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPay(r, 2)
	}
	return this
}

func NewPopulatedConfigResponse(r randyPay, easy bool) *ConfigResponse {
	this := &ConfigResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringPay(r))
	v1 := NewPopulatedConfigRespData(r, easy)
	this.Data = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPay(r, 4)
	}
	return this
}

func NewPopulatedConfigRespData(r randyPay, easy bool) *ConfigRespData {
	this := &ConfigRespData{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Goods = make([]GoodsRespData, v2)
		for i := 0; i < v2; i++ {
			v3 := NewPopulatedGoodsRespData(r, easy)
			this.Goods[i] = *v3
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Pay = make([]PayRespData, v4)
		for i := 0; i < v4; i++ {
			v5 := NewPopulatedPayRespData(r, easy)
			this.Pay[i] = *v5
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPay(r, 3)
	}
	return this
}

func NewPopulatedGoodsRespData(r randyPay, easy bool) *GoodsRespData {
	this := &GoodsRespData{}
	this.Gid = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Gid *= -1
	}
	this.Price = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Price *= -1
	}
	this.Icon = string(randStringPay(r))
	this.Name = string(randStringPay(r))
	this.Ptype = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Ptype *= -1
	}
	this.Number = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Number *= -1
	}
	this.Order = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Order *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPay(r, 8)
	}
	return this
}

func NewPopulatedPayRespData(r randyPay, easy bool) *PayRespData {
	this := &PayRespData{}
	this.Pmodel = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Pmodel *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPay(r, 2)
	}
	return this
}

func NewPopulatedOrderRequest(r randyPay, easy bool) *OrderRequest {
	this := &OrderRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.Pmodel = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Pmodel *= -1
	}
	this.Price = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Price *= -1
	}
	this.Ptype = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Ptype *= -1
	}
	this.Number = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Number *= -1
	}
	this.Gid = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Gid *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPay(r, 7)
	}
	return this
}

func NewPopulatedOrderResponse(r randyPay, easy bool) *OrderResponse {
	this := &OrderResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringPay(r))
	v6 := NewPopulatedOrderInfo(r, easy)
	this.Data = *v6
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPay(r, 4)
	}
	return this
}

func NewPopulatedOrderInfo(r randyPay, easy bool) *OrderInfo {
	this := &OrderInfo{}
	this.Pid = string(randStringPay(r))
	this.Order = string(randStringPay(r))
	this.Partnerid = string(randStringPay(r))
	this.Prepayid = string(randStringPay(r))
	this.Noncestr = string(randStringPay(r))
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.Package = string(randStringPay(r))
	this.Sign = string(randStringPay(r))
	this.All = string(randStringPay(r))
	this.Appstoreid = string(randStringPay(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPay(r, 11)
	}
	return this
}

func NewPopulatedRepostRequest(r randyPay, easy bool) *RepostRequest {
	this := &RepostRequest{}
	this.Pid = string(randStringPay(r))
	this.Pdealno = string(randStringPay(r))
	this.Receipt = string(randStringPay(r))
	this.BundleId = string(randStringPay(r))
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.Sandbox = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sandbox *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPay(r, 7)
	}
	return this
}

type randyPay interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePay(r randyPay) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPay(r randyPay) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RunePay(r)
	}
	return string(tmps)
}
func randUnrecognizedPay(r randyPay, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPay(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPay(dAtA []byte, r randyPay, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePay(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulatePay(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulatePay(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePay(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePay(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePay(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePay(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ConfigRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPay(uint64(m.Mid))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPay(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovPay(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovPay(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigRespData) Size() (n int) {
	var l int
	_ = l
	if len(m.Goods) > 0 {
		for _, e := range m.Goods {
			l = e.Size()
			n += 1 + l + sovPay(uint64(l))
		}
	}
	if len(m.Pay) > 0 {
		for _, e := range m.Pay {
			l = e.Size()
			n += 1 + l + sovPay(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsRespData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPay(uint64(m.Gid))
	n += 5
	l = len(m.Icon)
	n += 1 + l + sovPay(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovPay(uint64(l))
	n += 1 + sovPay(uint64(m.Ptype))
	n += 1 + sovPay(uint64(m.Number))
	n += 1 + sovPay(uint64(m.Order))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayRespData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPay(uint64(m.Pmodel))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPay(uint64(m.Mid))
	n += 1 + sovPay(uint64(m.Pmodel))
	n += 5
	n += 1 + sovPay(uint64(m.Ptype))
	n += 1 + sovPay(uint64(m.Number))
	n += 1 + sovPay(uint64(m.Gid))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPay(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovPay(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovPay(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pid)
	n += 1 + l + sovPay(uint64(l))
	l = len(m.Order)
	n += 1 + l + sovPay(uint64(l))
	l = len(m.Partnerid)
	n += 1 + l + sovPay(uint64(l))
	l = len(m.Prepayid)
	n += 1 + l + sovPay(uint64(l))
	l = len(m.Noncestr)
	n += 1 + l + sovPay(uint64(l))
	n += 1 + sovPay(uint64(m.Timestamp))
	l = len(m.Package)
	n += 1 + l + sovPay(uint64(l))
	l = len(m.Sign)
	n += 1 + l + sovPay(uint64(l))
	l = len(m.All)
	n += 1 + l + sovPay(uint64(l))
	l = len(m.Appstoreid)
	n += 1 + l + sovPay(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RepostRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pid)
	n += 1 + l + sovPay(uint64(l))
	l = len(m.Pdealno)
	n += 1 + l + sovPay(uint64(l))
	l = len(m.Receipt)
	n += 1 + l + sovPay(uint64(l))
	l = len(m.BundleId)
	n += 1 + l + sovPay(uint64(l))
	n += 1 + sovPay(uint64(m.Mid))
	n += 1 + sovPay(uint64(m.Sandbox))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPay(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPay(x uint64) (n int) {
	return sovPay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "ConfigRespData", "ConfigRespData", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigRespData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigRespData{`,
		`Goods:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Goods), "GoodsRespData", "GoodsRespData", 1), `&`, ``, 1) + `,`,
		`Pay:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Pay), "PayRespData", "PayRespData", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoodsRespData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoodsRespData{`,
		`Gid:` + fmt.Sprintf("%v", this.Gid) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Ptype:` + fmt.Sprintf("%v", this.Ptype) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PayRespData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PayRespData{`,
		`Pmodel:` + fmt.Sprintf("%v", this.Pmodel) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`Pmodel:` + fmt.Sprintf("%v", this.Pmodel) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Ptype:` + fmt.Sprintf("%v", this.Ptype) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Gid:` + fmt.Sprintf("%v", this.Gid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "OrderInfo", "OrderInfo", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderInfo{`,
		`Pid:` + fmt.Sprintf("%v", this.Pid) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Partnerid:` + fmt.Sprintf("%v", this.Partnerid) + `,`,
		`Prepayid:` + fmt.Sprintf("%v", this.Prepayid) + `,`,
		`Noncestr:` + fmt.Sprintf("%v", this.Noncestr) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Package:` + fmt.Sprintf("%v", this.Package) + `,`,
		`Sign:` + fmt.Sprintf("%v", this.Sign) + `,`,
		`All:` + fmt.Sprintf("%v", this.All) + `,`,
		`Appstoreid:` + fmt.Sprintf("%v", this.Appstoreid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RepostRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RepostRequest{`,
		`Pid:` + fmt.Sprintf("%v", this.Pid) + `,`,
		`Pdealno:` + fmt.Sprintf("%v", this.Pdealno) + `,`,
		`Receipt:` + fmt.Sprintf("%v", this.Receipt) + `,`,
		`BundleId:` + fmt.Sprintf("%v", this.BundleId) + `,`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`Sandbox:` + fmt.Sprintf("%v", this.Sandbox) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPay(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ConfigRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipPay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("msg")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goods = append(m.Goods, GoodsRespData{})
			if err := m.Goods[len(m.Goods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pay = append(m.Pay, PayRespData{})
			if err := m.Pay[len(m.Pay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptype", wireType)
			}
			m.Ptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pmodel", wireType)
			}
			m.Pmodel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pmodel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pmodel", wireType)
			}
			m.Pmodel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pmodel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptype", wireType)
			}
			m.Ptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipPay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("pmodel")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("gid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("msg")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partnerid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partnerid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prepayid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prepayid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noncestr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Noncestr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Package = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.All = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appstoreid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appstoreid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepostRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pdealno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pdealno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sandbox", wireType)
			}
			m.Sandbox = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sandbox |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("pid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("pdealno")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("receipt")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("bundleId")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPay
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPay
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPay(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPay = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPay   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pay/pay.proto", fileDescriptorPay) }

var fileDescriptorPay = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x41, 0x6f, 0xd3, 0x3e,
	0x18, 0xc6, 0xe7, 0xa4, 0xd9, 0x56, 0xef, 0xdf, 0xbf, 0x90, 0x05, 0xc8, 0x9a, 0x90, 0xa9, 0x22,
	0x24, 0xaa, 0x01, 0x2d, 0xda, 0x47, 0x18, 0x48, 0x68, 0x27, 0xa6, 0x7d, 0x03, 0xb7, 0xf1, 0x42,
	0x44, 0x62, 0x7b, 0xb1, 0x23, 0xc8, 0x8d, 0x8f, 0xc3, 0x99, 0x13, 0x47, 0x10, 0x97, 0x5d, 0x90,
	0x38, 0x72, 0x42, 0x6b, 0x3e, 0x01, 0x47, 0x8e, 0xc8, 0x8e, 0x93, 0x3a, 0x05, 0xc1, 0x81, 0x5b,
	0xf3, 0x7b, 0x1f, 0x3f, 0xaf, 0xdf, 0xd7, 0x4f, 0xe1, 0x44, 0xd2, 0x7a, 0x21, 0x69, 0x3d, 0x97,
	0xa5, 0xd0, 0x02, 0x45, 0x32, 0x3d, 0xa3, 0xf5, 0xe1, 0xa3, 0x34, 0xd3, 0x2f, 0xaa, 0xe5, 0x7c,
	0x25, 0x8a, 0x45, 0x2a, 0x52, 0xb1, 0xb0, 0xd5, 0x65, 0x75, 0x61, 0xbf, 0xec, 0x87, 0xfd, 0xd5,
	0x9e, 0x8a, 0xef, 0xc3, 0xc9, 0x13, 0xc1, 0x2f, 0xb2, 0xf4, 0x9c, 0x5d, 0x56, 0x4c, 0x69, 0x74,
	0x1b, 0x86, 0x45, 0x96, 0x60, 0x30, 0x0d, 0x66, 0xe1, 0xc9, 0xe8, 0xea, 0xdb, 0xdd, 0x9d, 0x73,
	0x03, 0xe2, 0x57, 0xf0, 0xff, 0x4e, 0xa8, 0xa4, 0xe0, 0x8a, 0xa1, 0x3b, 0x70, 0x57, 0x69, 0xaa,
	0x2b, 0x65, 0xc5, 0x91, 0x13, 0x3b, 0x66, 0x7d, 0x54, 0x8a, 0x83, 0x69, 0x30, 0x1b, 0xf7, 0x3e,
	0x2a, 0x45, 0x0b, 0x38, 0x4a, 0xa8, 0xa6, 0x38, 0x9c, 0x82, 0xd9, 0xc1, 0xf1, 0xad, 0xb9, 0xbd,
	0xf5, 0x7c, 0x63, 0xfd, 0x94, 0x6a, 0xea, 0xf4, 0x56, 0x18, 0x73, 0xbf, 0xb1, 0xa9, 0xa2, 0xc7,
	0x30, 0x4a, 0x85, 0x48, 0x4c, 0xdf, 0x70, 0x76, 0x70, 0x7c, 0xd3, 0x79, 0x3c, 0x33, 0x6c, 0xcb,
	0xa2, 0x15, 0xa2, 0x23, 0x18, 0x4a, 0x5a, 0xe3, 0xc0, 0xea, 0x91, 0xd3, 0x9f, 0xd1, 0x7a, 0x4b,
	0x6d, 0x44, 0xf1, 0x67, 0x00, 0x27, 0x03, 0x2b, 0x33, 0x4a, 0x6a, 0x57, 0x02, 0xfa, 0x29, 0x0d,
	0x40, 0x87, 0x30, 0x92, 0x65, 0xb6, 0x62, 0x38, 0x98, 0x82, 0x59, 0xd0, 0x75, 0xb4, 0x08, 0x61,
	0x38, 0xca, 0x56, 0x82, 0xdb, 0x31, 0xbb, 0xf9, 0x2d, 0x31, 0x15, 0x4e, 0x0b, 0x86, 0x47, 0x7e,
	0xc5, 0x10, 0xeb, 0xa7, 0x6b, 0xc9, 0x70, 0xe4, 0x75, 0x6a, 0x91, 0x59, 0x36, 0xaf, 0x8a, 0x25,
	0x2b, 0xf1, 0xae, 0x57, 0x74, 0xcc, 0x9c, 0x14, 0x65, 0xc2, 0x4a, 0xbc, 0xe7, 0x9f, 0xb4, 0x28,
	0x7e, 0x00, 0x0f, 0xbc, 0x49, 0x8d, 0x91, 0x2c, 0x44, 0xc2, 0xf2, 0xc1, 0x3c, 0x8e, 0xc5, 0xef,
	0x00, 0xfc, 0xef, 0xb9, 0x39, 0xf6, 0x97, 0x38, 0x78, 0x36, 0x81, 0xff, 0xf8, 0x2d, 0xdb, 0x6c,
	0x26, 0xfc, 0x75, 0x33, 0xfd, 0x94, 0xa3, 0x3f, 0x4d, 0x19, 0xfd, 0x66, 0x4a, 0xf7, 0x0e, 0xbb,
	0x5e, 0x43, 0x03, 0xe2, 0x4b, 0x38, 0x71, 0x77, 0xfe, 0xa7, 0x64, 0x1e, 0x0d, 0x92, 0x79, 0xc3,
	0xa5, 0xc4, 0x3a, 0x9f, 0xf2, 0x0b, 0x31, 0x08, 0xe5, 0xa7, 0x00, 0x8e, 0xfb, 0x8a, 0x71, 0x94,
	0x2e, 0x20, 0xbd, 0xa3, 0x6c, 0x03, 0xd2, 0x3e, 0x4b, 0xe0, 0x55, 0x5a, 0x84, 0x62, 0x38, 0x96,
	0xb4, 0xd4, 0x9c, 0x95, 0x59, 0x32, 0x48, 0xc9, 0x06, 0xa3, 0x29, 0xdc, 0x97, 0x25, 0x93, 0xb4,
	0xce, 0x92, 0x41, 0x5c, 0x7a, 0x6a, 0x14, 0x5c, 0xf0, 0x15, 0x53, 0xba, 0x5d, 0x59, 0xaf, 0xe8,
	0xa8, 0xe9, 0xa3, 0xb3, 0x82, 0x29, 0x4d, 0x0b, 0x69, 0xb3, 0xd3, 0x3d, 0xe3, 0x06, 0x23, 0x02,
	0xf7, 0x24, 0x5d, 0xbd, 0xa4, 0x29, 0xb3, 0x01, 0xea, 0x4c, 0x3a, 0x68, 0x22, 0xab, 0xb2, 0x94,
	0xe3, 0x7d, 0x3f, 0xb2, 0x86, 0x98, 0xc9, 0x69, 0x9e, 0xe3, 0xb1, 0x3f, 0x39, 0xcd, 0x73, 0x74,
	0x0f, 0x42, 0x2a, 0xa5, 0xd2, 0xa2, 0x64, 0x59, 0x82, 0xa1, 0x57, 0xf6, 0x78, 0xfc, 0x11, 0xc0,
	0xc9, 0x39, 0x93, 0x42, 0x69, 0x2f, 0x6e, 0xd2, 0xc5, 0x6d, 0xb0, 0x49, 0x73, 0xc3, 0x84, 0xd1,
	0x9c, 0x8b, 0xc1, 0xbb, 0x75, 0xd0, 0xd4, 0x4b, 0xb6, 0x62, 0x99, 0xd4, 0x38, 0xf4, 0xeb, 0x0e,
	0x9a, 0x3d, 0x2d, 0x2b, 0x9e, 0xe4, 0xec, 0xd4, 0x6c, 0x72, 0x23, 0xe8, 0x69, 0x17, 0xf4, 0x68,
	0x3b, 0xe8, 0x04, 0xee, 0x29, 0xca, 0x93, 0xa5, 0x78, 0x3d, 0xf8, 0xe7, 0x75, 0xf0, 0xe4, 0xe1,
	0xd7, 0x35, 0xd9, 0xb9, 0x5e, 0x13, 0xf0, 0x7d, 0x4d, 0xc0, 0x8f, 0x35, 0x01, 0x6f, 0x1a, 0x02,
	0xde, 0x36, 0x04, 0xbc, 0x6f, 0x08, 0xf8, 0xd0, 0x10, 0x70, 0xd5, 0x10, 0xf0, 0xa5, 0x21, 0xe0,
	0xba, 0x21, 0xe0, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x17, 0x0b, 0xd2, 0xb4, 0x05, 0x00,
	0x00,
}
