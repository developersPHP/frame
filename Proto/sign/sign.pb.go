// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sign/sign.proto

/*
	Package pgSign is a generated protocol buffer package.

	It is generated from these files:
		sign/sign.proto

	It has these top-level messages:
		GetSigninInfosRequest
		GetSigninInfosResponse
		ContinueData
		TodayData
		SigninRequest
		SigninResponse
*/
package pgSign

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// GetSigninInfos 请求参数
type GetSigninInfosRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetSigninInfosRequest) Reset()                    { *m = GetSigninInfosRequest{} }
func (*GetSigninInfosRequest) ProtoMessage()               {}
func (*GetSigninInfosRequest) Descriptor() ([]byte, []int) { return fileDescriptorSign, []int{0} }

func (m *GetSigninInfosRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

// GetSigninInfos 响应信息
type GetSigninInfosResponse struct {
	ContinueInfos    map[string]ContinueData `protobuf:"bytes,1,rep,name=continue_infos,json=continueInfos" json:"continue_infos" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TodayInfos       TodayData               `protobuf:"bytes,2,opt,name=today_infos,json=todayInfos" json:"today_infos"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *GetSigninInfosResponse) Reset()                    { *m = GetSigninInfosResponse{} }
func (*GetSigninInfosResponse) ProtoMessage()               {}
func (*GetSigninInfosResponse) Descriptor() ([]byte, []int) { return fileDescriptorSign, []int{1} }

func (m *GetSigninInfosResponse) GetContinueInfos() map[string]ContinueData {
	if m != nil {
		return m.ContinueInfos
	}
	return nil
}

func (m *GetSigninInfosResponse) GetTodayInfos() TodayData {
	if m != nil {
		return m.TodayInfos
	}
	return TodayData{}
}

type ContinueData struct {
	Day              int32  `protobuf:"varint,1,req,name=day" json:"day"`
	Type             int32  `protobuf:"varint,2,req,name=type" json:"type"`
	Num              int32  `protobuf:"varint,3,req,name=num" json:"num"`
	Icon             string `protobuf:"bytes,4,req,name=icon" json:"icon"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ContinueData) Reset()                    { *m = ContinueData{} }
func (*ContinueData) ProtoMessage()               {}
func (*ContinueData) Descriptor() ([]byte, []int) { return fileDescriptorSign, []int{2} }

func (m *ContinueData) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *ContinueData) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ContinueData) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ContinueData) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type TodayData struct {
	Type             int32  `protobuf:"varint,1,req,name=type" json:"type"`
	Num              int32  `protobuf:"varint,2,req,name=num" json:"num"`
	Icon             int32  `protobuf:"varint,3,req,name=icon" json:"icon"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TodayData) Reset()                    { *m = TodayData{} }
func (*TodayData) ProtoMessage()               {}
func (*TodayData) Descriptor() ([]byte, []int) { return fileDescriptorSign, []int{3} }

func (m *TodayData) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TodayData) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *TodayData) GetIcon() int32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

// Signin 请求参数
type SigninRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	Day              int32  `protobuf:"varint,2,req,name=day" json:"day"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SigninRequest) Reset()                    { *m = SigninRequest{} }
func (*SigninRequest) ProtoMessage()               {}
func (*SigninRequest) Descriptor() ([]byte, []int) { return fileDescriptorSign, []int{4} }

func (m *SigninRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SigninRequest) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

// Signin 响应信息
type SigninResponse struct {
	Status           int32  `protobuf:"varint,1,req,name=status" json:"status"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SigninResponse) Reset()                    { *m = SigninResponse{} }
func (*SigninResponse) ProtoMessage()               {}
func (*SigninResponse) Descriptor() ([]byte, []int) { return fileDescriptorSign, []int{5} }

func (m *SigninResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*GetSigninInfosRequest)(nil), "pgSign.GetSigninInfosRequest")
	proto.RegisterType((*GetSigninInfosResponse)(nil), "pgSign.GetSigninInfosResponse")
	proto.RegisterType((*ContinueData)(nil), "pgSign.ContinueData")
	proto.RegisterType((*TodayData)(nil), "pgSign.TodayData")
	proto.RegisterType((*SigninRequest)(nil), "pgSign.SigninRequest")
	proto.RegisterType((*SigninResponse)(nil), "pgSign.SigninResponse")
}
func (this *GetSigninInfosRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetSigninInfosRequest)
	if !ok {
		that2, ok := that.(GetSigninInfosRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetSigninInfosRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetSigninInfosRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetSigninInfosRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetSigninInfosRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSigninInfosRequest)
	if !ok {
		that2, ok := that.(GetSigninInfosRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetSigninInfosResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetSigninInfosResponse)
	if !ok {
		that2, ok := that.(GetSigninInfosResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetSigninInfosResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetSigninInfosResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetSigninInfosResponse but is not nil && this == nil")
	}
	if len(this.ContinueInfos) != len(that1.ContinueInfos) {
		return fmt.Errorf("ContinueInfos this(%v) Not Equal that(%v)", len(this.ContinueInfos), len(that1.ContinueInfos))
	}
	for i := range this.ContinueInfos {
		a := this.ContinueInfos[i]
		b := that1.ContinueInfos[i]
		if !(&a).Equal(&b) {
			return fmt.Errorf("ContinueInfos this[%v](%v) Not Equal that[%v](%v)", i, this.ContinueInfos[i], i, that1.ContinueInfos[i])
		}
	}
	if !this.TodayInfos.Equal(&that1.TodayInfos) {
		return fmt.Errorf("TodayInfos this(%v) Not Equal that(%v)", this.TodayInfos, that1.TodayInfos)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetSigninInfosResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSigninInfosResponse)
	if !ok {
		that2, ok := that.(GetSigninInfosResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ContinueInfos) != len(that1.ContinueInfos) {
		return false
	}
	for i := range this.ContinueInfos {
		a := this.ContinueInfos[i]
		b := that1.ContinueInfos[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if !this.TodayInfos.Equal(&that1.TodayInfos) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ContinueData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ContinueData)
	if !ok {
		that2, ok := that.(ContinueData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ContinueData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ContinueData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ContinueData but is not nil && this == nil")
	}
	if this.Day != that1.Day {
		return fmt.Errorf("Day this(%v) Not Equal that(%v)", this.Day, that1.Day)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Num != that1.Num {
		return fmt.Errorf("Num this(%v) Not Equal that(%v)", this.Num, that1.Num)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ContinueData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContinueData)
	if !ok {
		that2, ok := that.(ContinueData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TodayData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TodayData)
	if !ok {
		that2, ok := that.(TodayData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TodayData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TodayData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TodayData but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Num != that1.Num {
		return fmt.Errorf("Num this(%v) Not Equal that(%v)", this.Num, that1.Num)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *TodayData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TodayData)
	if !ok {
		that2, ok := that.(TodayData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SigninRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SigninRequest)
	if !ok {
		that2, ok := that.(SigninRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SigninRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SigninRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SigninRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.Day != that1.Day {
		return fmt.Errorf("Day this(%v) Not Equal that(%v)", this.Day, that1.Day)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SigninRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SigninRequest)
	if !ok {
		that2, ok := that.(SigninRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SigninResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SigninResponse)
	if !ok {
		that2, ok := that.(SigninResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SigninResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SigninResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SigninResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SigninResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SigninResponse)
	if !ok {
		that2, ok := that.(SigninResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetSigninInfosRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgSign.GetSigninInfosRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSigninInfosResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgSign.GetSigninInfosResponse{")
	keysForContinueInfos := make([]string, 0, len(this.ContinueInfos))
	for k, _ := range this.ContinueInfos {
		keysForContinueInfos = append(keysForContinueInfos, k)
	}
	sortkeys.Strings(keysForContinueInfos)
	mapStringForContinueInfos := "map[string]ContinueData{"
	for _, k := range keysForContinueInfos {
		mapStringForContinueInfos += fmt.Sprintf("%#v: %#v,", k, this.ContinueInfos[k])
	}
	mapStringForContinueInfos += "}"
	if this.ContinueInfos != nil {
		s = append(s, "ContinueInfos: "+mapStringForContinueInfos+",\n")
	}
	s = append(s, "TodayInfos: "+strings.Replace(this.TodayInfos.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ContinueData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pgSign.ContinueData{")
	s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TodayData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgSign.TodayData{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SigninRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgSign.SigninRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SigninResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgSign.SigninResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSign(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GetSigninInfosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSigninInfosRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSign(dAtA, i, uint64(m.Mid))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSigninInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSigninInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContinueInfos) > 0 {
		for k, _ := range m.ContinueInfos {
			dAtA[i] = 0xa
			i++
			v := m.ContinueInfos[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovSign(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovSign(uint64(len(k))) + msgSize
			i = encodeVarintSign(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSign(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSign(dAtA, i, uint64((&v).Size()))
			n1, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n1
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintSign(dAtA, i, uint64(m.TodayInfos.Size()))
	n2, err := m.TodayInfos.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContinueData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContinueData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSign(dAtA, i, uint64(m.Day))
	dAtA[i] = 0x10
	i++
	i = encodeVarintSign(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x18
	i++
	i = encodeVarintSign(dAtA, i, uint64(m.Num))
	dAtA[i] = 0x22
	i++
	i = encodeVarintSign(dAtA, i, uint64(len(m.Icon)))
	i += copy(dAtA[i:], m.Icon)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TodayData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TodayData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSign(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	i = encodeVarintSign(dAtA, i, uint64(m.Num))
	dAtA[i] = 0x18
	i++
	i = encodeVarintSign(dAtA, i, uint64(m.Icon))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SigninRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigninRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSign(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintSign(dAtA, i, uint64(m.Day))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SigninResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigninResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSign(dAtA, i, uint64(m.Status))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSign(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGetSigninInfosRequest(r randySign, easy bool) *GetSigninInfosRequest {
	this := &GetSigninInfosRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSign(r, 2)
	}
	return this
}

func NewPopulatedGetSigninInfosResponse(r randySign, easy bool) *GetSigninInfosResponse {
	this := &GetSigninInfosResponse{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.ContinueInfos = make(map[string]ContinueData)
		for i := 0; i < v1; i++ {
			this.ContinueInfos[randStringSign(r)] = *NewPopulatedContinueData(r, easy)
		}
	}
	v2 := NewPopulatedTodayData(r, easy)
	this.TodayInfos = *v2
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSign(r, 3)
	}
	return this
}

func NewPopulatedContinueData(r randySign, easy bool) *ContinueData {
	this := &ContinueData{}
	this.Day = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Day *= -1
	}
	this.Type = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Type *= -1
	}
	this.Num = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	this.Icon = string(randStringSign(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSign(r, 5)
	}
	return this
}

func NewPopulatedTodayData(r randySign, easy bool) *TodayData {
	this := &TodayData{}
	this.Type = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Type *= -1
	}
	this.Num = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	this.Icon = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Icon *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSign(r, 4)
	}
	return this
}

func NewPopulatedSigninRequest(r randySign, easy bool) *SigninRequest {
	this := &SigninRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.Day = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Day *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSign(r, 3)
	}
	return this
}

func NewPopulatedSigninResponse(r randySign, easy bool) *SigninResponse {
	this := &SigninResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSign(r, 2)
	}
	return this
}

type randySign interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSign(r randySign) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSign(r randySign) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneSign(r)
	}
	return string(tmps)
}
func randUnrecognizedSign(r randySign, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSign(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSign(dAtA []byte, r randySign, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSign(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateSign(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateSign(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSign(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSign(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSign(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSign(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetSigninInfosRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSign(uint64(m.Mid))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSigninInfosResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ContinueInfos) > 0 {
		for k, v := range m.ContinueInfos {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovSign(uint64(len(k))) + 1 + l + sovSign(uint64(l))
			n += mapEntrySize + 1 + sovSign(uint64(mapEntrySize))
		}
	}
	l = m.TodayInfos.Size()
	n += 1 + l + sovSign(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContinueData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSign(uint64(m.Day))
	n += 1 + sovSign(uint64(m.Type))
	n += 1 + sovSign(uint64(m.Num))
	l = len(m.Icon)
	n += 1 + l + sovSign(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TodayData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSign(uint64(m.Type))
	n += 1 + sovSign(uint64(m.Num))
	n += 1 + sovSign(uint64(m.Icon))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SigninRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSign(uint64(m.Mid))
	n += 1 + sovSign(uint64(m.Day))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SigninResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSign(uint64(m.Status))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSign(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSign(x uint64) (n int) {
	return sovSign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetSigninInfosRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSigninInfosRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSigninInfosResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForContinueInfos := make([]string, 0, len(this.ContinueInfos))
	for k, _ := range this.ContinueInfos {
		keysForContinueInfos = append(keysForContinueInfos, k)
	}
	sortkeys.Strings(keysForContinueInfos)
	mapStringForContinueInfos := "map[string]ContinueData{"
	for _, k := range keysForContinueInfos {
		mapStringForContinueInfos += fmt.Sprintf("%v: %v,", k, this.ContinueInfos[k])
	}
	mapStringForContinueInfos += "}"
	s := strings.Join([]string{`&GetSigninInfosResponse{`,
		`ContinueInfos:` + mapStringForContinueInfos + `,`,
		`TodayInfos:` + strings.Replace(strings.Replace(this.TodayInfos.String(), "TodayData", "TodayData", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContinueData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContinueData{`,
		`Day:` + fmt.Sprintf("%v", this.Day) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TodayData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TodayData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SigninRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SigninRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`Day:` + fmt.Sprintf("%v", this.Day) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SigninResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SigninResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSign(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetSigninInfosRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSigninInfosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSigninInfosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSigninInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSigninInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSigninInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinueInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContinueInfos == nil {
				m.ContinueInfos = make(map[string]ContinueData)
			}
			var mapkey string
			mapvalue := &ContinueData{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSign
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSign
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSign
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSign
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthSign
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ContinueData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSign(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSign
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ContinueInfos[mapkey] = *mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TodayInfos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContinueData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContinueData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContinueData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSign
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("day")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("num")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("icon")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TodayData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TodayData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TodayData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("num")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("icon")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigninRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigninRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigninRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("day")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigninResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigninResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigninResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSign
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSign
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSign(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSign = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSign   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sign/sign.proto", fileDescriptorSign) }

var fileDescriptorSign = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0xef, 0x25, 0xbd, 0x93, 0xfa, 0xca, 0x1d, 0x60, 0xc1, 0x29, 0x3a, 0x21, 0x13, 0x65,
	0x8a, 0x10, 0x24, 0xe2, 0xa6, 0x13, 0x0b, 0x52, 0x01, 0x21, 0xd6, 0x80, 0x60, 0x03, 0xa5, 0x49,
	0x1a, 0x2c, 0x88, 0x1d, 0x1a, 0x1b, 0x29, 0x1b, 0x33, 0x9f, 0x84, 0x8f, 0xc0, 0xc8, 0xd8, 0x91,
	0x91, 0x09, 0x35, 0xf9, 0x04, 0x8c, 0x8c, 0xc8, 0x4e, 0x52, 0x42, 0xa1, 0x62, 0x89, 0xec, 0xf7,
	0xf7, 0xef, 0x67, 0xfb, 0xc5, 0x78, 0xb9, 0x62, 0x39, 0x0f, 0xf5, 0x27, 0x28, 0x57, 0x42, 0x0a,
	0x72, 0x54, 0xe6, 0x4f, 0x59, 0xce, 0xcf, 0xee, 0xe4, 0x4c, 0xbe, 0x56, 0x8b, 0x20, 0x11, 0x45,
	0x98, 0x8b, 0x5c, 0x84, 0x26, 0x5e, 0xa8, 0xa5, 0x99, 0x99, 0x89, 0x19, 0x75, 0x98, 0x17, 0xe2,
	0xf5, 0xc7, 0x99, 0xd4, 0x24, 0xe3, 0x4f, 0xf8, 0x52, 0x54, 0x51, 0xf6, 0x4e, 0x65, 0x95, 0x24,
	0xa7, 0x68, 0x17, 0x2c, 0x75, 0xc0, 0xb5, 0x7c, 0x7b, 0x3e, 0x59, 0x7f, 0xbf, 0x79, 0x10, 0xe9,
	0x82, 0xf7, 0xd1, 0xc2, 0xd3, 0x5d, 0xa2, 0x2a, 0x05, 0xaf, 0x32, 0xf2, 0x12, 0x4f, 0x12, 0xc1,
	0x25, 0xe3, 0x2a, 0x7b, 0xc5, 0x74, 0xe2, 0x80, 0x6b, 0xfb, 0xb3, 0xf3, 0xbb, 0x41, 0x77, 0xb6,
	0xe0, 0xdf, 0x5c, 0xf0, 0xa0, 0x87, 0x4c, 0xf5, 0x11, 0x97, 0xab, 0xba, 0xdf, 0xf0, 0x38, 0x19,
	0x27, 0xe4, 0x02, 0x67, 0x52, 0xa4, 0x71, 0xdd, 0xcb, 0x2d, 0x17, 0xfc, 0xd9, 0xf9, 0xd5, 0x41,
	0xfe, 0x4c, 0x47, 0x0f, 0x63, 0x19, 0xf7, 0x30, 0x9a, 0xb5, 0x86, 0x3c, 0x7b, 0x8e, 0xe4, 0xef,
	0x4d, 0xc8, 0x15, 0xb4, 0xdf, 0x64, 0xb5, 0x03, 0x2e, 0xf8, 0xd3, 0x48, 0x0f, 0xc9, 0x2d, 0x3c,
	0x7c, 0x1f, 0xbf, 0x55, 0x59, 0xef, 0xbe, 0x36, 0xb8, 0x07, 0x58, 0xeb, 0xa3, 0x6e, 0xc9, 0x3d,
	0xeb, 0x02, 0xbc, 0x15, 0x5e, 0x1a, 0x47, 0xba, 0x69, 0x69, 0x5c, 0x9b, 0xa6, 0x1d, 0x0e, 0x4d,
	0x4b, 0xe3, 0x9a, 0x38, 0x38, 0x91, 0x75, 0xa9, 0xb5, 0xbf, 0x03, 0x53, 0xd1, 0x04, 0x57, 0x85,
	0x63, 0x8f, 0x09, 0xae, 0x0a, 0x4d, 0xb0, 0x44, 0x70, 0x67, 0xe2, 0x5a, 0xfe, 0x74, 0x20, 0x74,
	0xc5, 0x7b, 0x81, 0xd3, 0xed, 0x55, 0xb7, 0x62, 0xd8, 0x27, 0xb6, 0xf6, 0x89, 0xc7, 0x3b, 0x76,
	0xe2, 0xfb, 0x78, 0xdc, 0xfd, 0x9d, 0xff, 0x3c, 0x81, 0xe1, 0x96, 0xd6, 0xce, 0x2d, 0xbd, 0x00,
	0x4f, 0x06, 0x41, 0xff, 0x22, 0x6e, 0xe0, 0x51, 0x25, 0x63, 0xa9, 0xaa, 0x3f, 0x0e, 0xd8, 0xd7,
	0xe6, 0xb7, 0xbf, 0x35, 0xf4, 0x60, 0xd3, 0x50, 0xf8, 0xd1, 0x50, 0xf8, 0xd9, 0x50, 0xf8, 0xd0,
	0x52, 0xf8, 0xd4, 0x52, 0xf8, 0xdc, 0x52, 0xf8, 0xd2, 0x52, 0x58, 0xb7, 0x14, 0xbe, 0xb6, 0x14,
	0x36, 0x2d, 0x85, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x49, 0xaa, 0x67, 0xf2, 0x02, 0x00,
	0x00,
}
