
syntax="proto2";

package RPCProto;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
 
//message CookInfo
//{
//	required uint32 iKey = 1[(gogoproto.nullable) = false];
//	required string iBuf = 2[(gogoproto.nullable) = false]; 
//}
 

//message BGFHead 
//{
//	required int32 uid = 1 [(gogoproto.nullable) = false];
//	required uint32 cmd = 2[(gogoproto.nullable) = false];
//	required int32 trans_types = 3[(gogoproto.nullable) = false];
//废弃	required uint32 msg_type = 4[(gogoproto.nullable) = false];
//	required int32 s_ser_id = 5[(gogoproto.nullable) = false];
//	required int32 s_ser_type = 6[(gogoproto.nullable) = false];
//	required int32 d_ser_id = 7[(gogoproto.nullable) = false];
//	required int32 d_ser_type = 8[(gogoproto.nullable) = false];
//废弃	repeated CookInfo Cooks = 9[(gogoproto.nullable) = false];
//	repeated int64 groupids = 10[(gogoproto.nullable) = false];
//废弃	optional int32 hall_version = 11[(gogoproto.nullable) = false];
//调整到rpc的头部中	optional int32 mt_id = 12[(gogoproto.nullable) = false];
//}


//message RegisterDispatchReq
//{
//	repeated int32 Cooks = 1[(gogoproto.nullable) = false];
//}
 
//message RegisterDispatchResp
//{
//	required int32 ret_code = 1[(gogoproto.nullable) = false];
//}

//message BGFMsg 
//{
//	required BGFHead head =  1[(gogoproto.nullable) = false,(gogoproto.embed) = true];
//	required bytes body = 2[(gogoproto.nullable) = false]; 
//}

//服务类型与id注册 cmd=0x101
message RegisterDispatchReq
{
	optional int32 cant_replace = 1;	//服务是否可被相同svrType,svrId替换，例如GameSer不可以，因为内存有状态 0=可替换，1=不可替换
	repeated int64 groupid 	= 2;	//组id,用于同类型下的组播，例如斗地主所有初级场为一个组
}

//cmd=0x106注册响应，0x104剔除冲突服务
message RegisterDispatchResp
{
	optional int32 ret_code = 1;		//0=成功，8=有相同类型Server用相同Serverid注册
}

//服务名注册 cmd=0x201
message DispatchRegMethodReq
{
	optional string server_name = 1;	//
	optional string service_name = 2;	//
	repeated string method_name = 3;	//所提供的所有方法名
}
//cmd=0x202
message DispatchRegMethodResp
{
	optional int32 result = 1; 		//结果，0为成功，其它为失败
}


message ClientTransMsg
{
	required int32 client_id = 1[(gogoproto.nullable) = false];
	required bytes client_msg = 2[(gogoproto.nullable) = false];
}

message ClientSplitMsg
{
	required int32 client_id = 1[(gogoproto.nullable) = false];
	required int64 unique_key = 2[(gogoproto.nullable) = false];
	required int32 end_flag = 3[(gogoproto.nullable) = false];
	required bytes split_msg = 4[(gogoproto.nullable) = false];
}
