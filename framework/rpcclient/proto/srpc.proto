
syntax="proto2";

package srpc;


import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// RPC消息头定义
message CRpcHead
{
	optional int32	mt_id			= 1[(gogoproto.nullable) = false];	//协程id		  : 用于找回对应协程
    optional uint64 sequence        = 2[(gogoproto.nullable) = false];	// RPC序列号      : 用于检验每个回包正确性
    optional uint32 coloring        = 3[(gogoproto.nullable) = false];	// RPC请求染色标志: 当前请求是否染色
    optional uint64 color_id        = 4[(gogoproto.nullable) = false];	// RPC日志染色ID  : 每个方法一个
    optional int32  err             = 5[(gogoproto.nullable) = false];	// 框架错误码
    optional int32  result          = 6[(gogoproto.nullable) = false];	// 业务接口返回值
    optional bytes  err_msg         = 7[(gogoproto.nullable) = false];	// 错误描述    
    optional bytes  method_name     = 8[(gogoproto.nullable) = false];	// RPC方法名

	//the diff
	//optional int32	mt_id			= 1[(gogoproto.nullable) = false];	//协程id		  : 用于找回对应协程
    //optional uint64 flow_id         = 30[(gogoproto.nullable) = false];   // RPC调用ID      : 每个客户端请求唯一标识
    //optional bytes  caller          = 50[(gogoproto.nullable) = false];   // RPC调用方业务名
    //required string  method_name     = 51[(gogoproto.nullable) = false];   // RPC方法名
    //repeated bytes  caller_stack    = 60[(gogoproto.nullable) = false];   // RPC调用栈信息  : 存放方法名
}