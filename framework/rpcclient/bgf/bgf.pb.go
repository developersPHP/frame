// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bgf.proto

/*
	Package RPCProto is a generated protocol buffer package.

	It is generated from these files:
		bgf.proto

	It has these top-level messages:
		RegisterDispatchReq
		RegisterDispatchResp
		DispatchRegMethodReq
		DispatchRegMethodResp
		ClientTransMsg
		ClientSplitMsg
*/
package RPCProto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 服务类型与id注册 cmd=0x101
type RegisterDispatchReq struct {
	CantReplace      *int32  `protobuf:"varint,1,opt,name=cant_replace" json:"cant_replace,omitempty"`
	Groupid          []int64 `protobuf:"varint,2,rep,name=groupid" json:"groupid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RegisterDispatchReq) Reset()                    { *m = RegisterDispatchReq{} }
func (*RegisterDispatchReq) ProtoMessage()               {}
func (*RegisterDispatchReq) Descriptor() ([]byte, []int) { return fileDescriptorBgf, []int{0} }

func (m *RegisterDispatchReq) GetCantReplace() int32 {
	if m != nil && m.CantReplace != nil {
		return *m.CantReplace
	}
	return 0
}

func (m *RegisterDispatchReq) GetGroupid() []int64 {
	if m != nil {
		return m.Groupid
	}
	return nil
}

// cmd=0x106注册响应，0x104剔除冲突服务
type RegisterDispatchResp struct {
	RetCode          *int32 `protobuf:"varint,1,opt,name=ret_code" json:"ret_code,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RegisterDispatchResp) Reset()                    { *m = RegisterDispatchResp{} }
func (*RegisterDispatchResp) ProtoMessage()               {}
func (*RegisterDispatchResp) Descriptor() ([]byte, []int) { return fileDescriptorBgf, []int{1} }

func (m *RegisterDispatchResp) GetRetCode() int32 {
	if m != nil && m.RetCode != nil {
		return *m.RetCode
	}
	return 0
}

// 服务名注册 cmd=0x201
type DispatchRegMethodReq struct {
	ServerName       *string  `protobuf:"bytes,1,opt,name=server_name" json:"server_name,omitempty"`
	ServiceName      *string  `protobuf:"bytes,2,opt,name=service_name" json:"service_name,omitempty"`
	MethodName       []string `protobuf:"bytes,3,rep,name=method_name" json:"method_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DispatchRegMethodReq) Reset()                    { *m = DispatchRegMethodReq{} }
func (*DispatchRegMethodReq) ProtoMessage()               {}
func (*DispatchRegMethodReq) Descriptor() ([]byte, []int) { return fileDescriptorBgf, []int{2} }

func (m *DispatchRegMethodReq) GetServerName() string {
	if m != nil && m.ServerName != nil {
		return *m.ServerName
	}
	return ""
}

func (m *DispatchRegMethodReq) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *DispatchRegMethodReq) GetMethodName() []string {
	if m != nil {
		return m.MethodName
	}
	return nil
}

// cmd=0x202
type DispatchRegMethodResp struct {
	Result           *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DispatchRegMethodResp) Reset()                    { *m = DispatchRegMethodResp{} }
func (*DispatchRegMethodResp) ProtoMessage()               {}
func (*DispatchRegMethodResp) Descriptor() ([]byte, []int) { return fileDescriptorBgf, []int{3} }

func (m *DispatchRegMethodResp) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

type ClientTransMsg struct {
	ClientId         int32  `protobuf:"varint,1,req,name=client_id" json:"client_id"`
	ClientMsg        []byte `protobuf:"bytes,2,req,name=client_msg" json:"client_msg"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClientTransMsg) Reset()                    { *m = ClientTransMsg{} }
func (*ClientTransMsg) ProtoMessage()               {}
func (*ClientTransMsg) Descriptor() ([]byte, []int) { return fileDescriptorBgf, []int{4} }

func (m *ClientTransMsg) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *ClientTransMsg) GetClientMsg() []byte {
	if m != nil {
		return m.ClientMsg
	}
	return nil
}

type ClientSplitMsg struct {
	ClientId         int32  `protobuf:"varint,1,req,name=client_id" json:"client_id"`
	UniqueKey        int64  `protobuf:"varint,2,req,name=unique_key" json:"unique_key"`
	EndFlag          int32  `protobuf:"varint,3,req,name=end_flag" json:"end_flag"`
	SplitMsg         []byte `protobuf:"bytes,4,req,name=split_msg" json:"split_msg"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ClientSplitMsg) Reset()                    { *m = ClientSplitMsg{} }
func (*ClientSplitMsg) ProtoMessage()               {}
func (*ClientSplitMsg) Descriptor() ([]byte, []int) { return fileDescriptorBgf, []int{5} }

func (m *ClientSplitMsg) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *ClientSplitMsg) GetUniqueKey() int64 {
	if m != nil {
		return m.UniqueKey
	}
	return 0
}

func (m *ClientSplitMsg) GetEndFlag() int32 {
	if m != nil {
		return m.EndFlag
	}
	return 0
}

func (m *ClientSplitMsg) GetSplitMsg() []byte {
	if m != nil {
		return m.SplitMsg
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterDispatchReq)(nil), "RPCProto.RegisterDispatchReq")
	proto.RegisterType((*RegisterDispatchResp)(nil), "RPCProto.RegisterDispatchResp")
	proto.RegisterType((*DispatchRegMethodReq)(nil), "RPCProto.DispatchRegMethodReq")
	proto.RegisterType((*DispatchRegMethodResp)(nil), "RPCProto.DispatchRegMethodResp")
	proto.RegisterType((*ClientTransMsg)(nil), "RPCProto.ClientTransMsg")
	proto.RegisterType((*ClientSplitMsg)(nil), "RPCProto.ClientSplitMsg")
}
func (this *RegisterDispatchReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RegisterDispatchReq)
	if !ok {
		that2, ok := that.(RegisterDispatchReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RegisterDispatchReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RegisterDispatchReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RegisterDispatchReq but is not nil && this == nil")
	}
	if this.CantReplace != nil && that1.CantReplace != nil {
		if *this.CantReplace != *that1.CantReplace {
			return fmt.Errorf("CantReplace this(%v) Not Equal that(%v)", *this.CantReplace, *that1.CantReplace)
		}
	} else if this.CantReplace != nil {
		return fmt.Errorf("this.CantReplace == nil && that.CantReplace != nil")
	} else if that1.CantReplace != nil {
		return fmt.Errorf("CantReplace this(%v) Not Equal that(%v)", this.CantReplace, that1.CantReplace)
	}
	if len(this.Groupid) != len(that1.Groupid) {
		return fmt.Errorf("Groupid this(%v) Not Equal that(%v)", len(this.Groupid), len(that1.Groupid))
	}
	for i := range this.Groupid {
		if this.Groupid[i] != that1.Groupid[i] {
			return fmt.Errorf("Groupid this[%v](%v) Not Equal that[%v](%v)", i, this.Groupid[i], i, that1.Groupid[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RegisterDispatchReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterDispatchReq)
	if !ok {
		that2, ok := that.(RegisterDispatchReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CantReplace != nil && that1.CantReplace != nil {
		if *this.CantReplace != *that1.CantReplace {
			return false
		}
	} else if this.CantReplace != nil {
		return false
	} else if that1.CantReplace != nil {
		return false
	}
	if len(this.Groupid) != len(that1.Groupid) {
		return false
	}
	for i := range this.Groupid {
		if this.Groupid[i] != that1.Groupid[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RegisterDispatchResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RegisterDispatchResp)
	if !ok {
		that2, ok := that.(RegisterDispatchResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RegisterDispatchResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RegisterDispatchResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RegisterDispatchResp but is not nil && this == nil")
	}
	if this.RetCode != nil && that1.RetCode != nil {
		if *this.RetCode != *that1.RetCode {
			return fmt.Errorf("RetCode this(%v) Not Equal that(%v)", *this.RetCode, *that1.RetCode)
		}
	} else if this.RetCode != nil {
		return fmt.Errorf("this.RetCode == nil && that.RetCode != nil")
	} else if that1.RetCode != nil {
		return fmt.Errorf("RetCode this(%v) Not Equal that(%v)", this.RetCode, that1.RetCode)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RegisterDispatchResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterDispatchResp)
	if !ok {
		that2, ok := that.(RegisterDispatchResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RetCode != nil && that1.RetCode != nil {
		if *this.RetCode != *that1.RetCode {
			return false
		}
	} else if this.RetCode != nil {
		return false
	} else if that1.RetCode != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DispatchRegMethodReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DispatchRegMethodReq)
	if !ok {
		that2, ok := that.(DispatchRegMethodReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DispatchRegMethodReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DispatchRegMethodReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DispatchRegMethodReq but is not nil && this == nil")
	}
	if this.ServerName != nil && that1.ServerName != nil {
		if *this.ServerName != *that1.ServerName {
			return fmt.Errorf("ServerName this(%v) Not Equal that(%v)", *this.ServerName, *that1.ServerName)
		}
	} else if this.ServerName != nil {
		return fmt.Errorf("this.ServerName == nil && that.ServerName != nil")
	} else if that1.ServerName != nil {
		return fmt.Errorf("ServerName this(%v) Not Equal that(%v)", this.ServerName, that1.ServerName)
	}
	if this.ServiceName != nil && that1.ServiceName != nil {
		if *this.ServiceName != *that1.ServiceName {
			return fmt.Errorf("ServiceName this(%v) Not Equal that(%v)", *this.ServiceName, *that1.ServiceName)
		}
	} else if this.ServiceName != nil {
		return fmt.Errorf("this.ServiceName == nil && that.ServiceName != nil")
	} else if that1.ServiceName != nil {
		return fmt.Errorf("ServiceName this(%v) Not Equal that(%v)", this.ServiceName, that1.ServiceName)
	}
	if len(this.MethodName) != len(that1.MethodName) {
		return fmt.Errorf("MethodName this(%v) Not Equal that(%v)", len(this.MethodName), len(that1.MethodName))
	}
	for i := range this.MethodName {
		if this.MethodName[i] != that1.MethodName[i] {
			return fmt.Errorf("MethodName this[%v](%v) Not Equal that[%v](%v)", i, this.MethodName[i], i, that1.MethodName[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DispatchRegMethodReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DispatchRegMethodReq)
	if !ok {
		that2, ok := that.(DispatchRegMethodReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != nil && that1.ServerName != nil {
		if *this.ServerName != *that1.ServerName {
			return false
		}
	} else if this.ServerName != nil {
		return false
	} else if that1.ServerName != nil {
		return false
	}
	if this.ServiceName != nil && that1.ServiceName != nil {
		if *this.ServiceName != *that1.ServiceName {
			return false
		}
	} else if this.ServiceName != nil {
		return false
	} else if that1.ServiceName != nil {
		return false
	}
	if len(this.MethodName) != len(that1.MethodName) {
		return false
	}
	for i := range this.MethodName {
		if this.MethodName[i] != that1.MethodName[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DispatchRegMethodResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DispatchRegMethodResp)
	if !ok {
		that2, ok := that.(DispatchRegMethodResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DispatchRegMethodResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DispatchRegMethodResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DispatchRegMethodResp but is not nil && this == nil")
	}
	if this.Result != nil && that1.Result != nil {
		if *this.Result != *that1.Result {
			return fmt.Errorf("Result this(%v) Not Equal that(%v)", *this.Result, *that1.Result)
		}
	} else if this.Result != nil {
		return fmt.Errorf("this.Result == nil && that.Result != nil")
	} else if that1.Result != nil {
		return fmt.Errorf("Result this(%v) Not Equal that(%v)", this.Result, that1.Result)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DispatchRegMethodResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DispatchRegMethodResp)
	if !ok {
		that2, ok := that.(DispatchRegMethodResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != nil && that1.Result != nil {
		if *this.Result != *that1.Result {
			return false
		}
	} else if this.Result != nil {
		return false
	} else if that1.Result != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ClientTransMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ClientTransMsg)
	if !ok {
		that2, ok := that.(ClientTransMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ClientTransMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ClientTransMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ClientTransMsg but is not nil && this == nil")
	}
	if this.ClientId != that1.ClientId {
		return fmt.Errorf("ClientId this(%v) Not Equal that(%v)", this.ClientId, that1.ClientId)
	}
	if !bytes.Equal(this.ClientMsg, that1.ClientMsg) {
		return fmt.Errorf("ClientMsg this(%v) Not Equal that(%v)", this.ClientMsg, that1.ClientMsg)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ClientTransMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientTransMsg)
	if !ok {
		that2, ok := that.(ClientTransMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if !bytes.Equal(this.ClientMsg, that1.ClientMsg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ClientSplitMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ClientSplitMsg)
	if !ok {
		that2, ok := that.(ClientSplitMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ClientSplitMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ClientSplitMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ClientSplitMsg but is not nil && this == nil")
	}
	if this.ClientId != that1.ClientId {
		return fmt.Errorf("ClientId this(%v) Not Equal that(%v)", this.ClientId, that1.ClientId)
	}
	if this.UniqueKey != that1.UniqueKey {
		return fmt.Errorf("UniqueKey this(%v) Not Equal that(%v)", this.UniqueKey, that1.UniqueKey)
	}
	if this.EndFlag != that1.EndFlag {
		return fmt.Errorf("EndFlag this(%v) Not Equal that(%v)", this.EndFlag, that1.EndFlag)
	}
	if !bytes.Equal(this.SplitMsg, that1.SplitMsg) {
		return fmt.Errorf("SplitMsg this(%v) Not Equal that(%v)", this.SplitMsg, that1.SplitMsg)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ClientSplitMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientSplitMsg)
	if !ok {
		that2, ok := that.(ClientSplitMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if this.UniqueKey != that1.UniqueKey {
		return false
	}
	if this.EndFlag != that1.EndFlag {
		return false
	}
	if !bytes.Equal(this.SplitMsg, that1.SplitMsg) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RegisterDispatchReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&RPCProto.RegisterDispatchReq{")
	if this.CantReplace != nil {
		s = append(s, "CantReplace: "+valueToGoStringBgf(this.CantReplace, "int32")+",\n")
	}
	if this.Groupid != nil {
		s = append(s, "Groupid: "+fmt.Sprintf("%#v", this.Groupid)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterDispatchResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&RPCProto.RegisterDispatchResp{")
	if this.RetCode != nil {
		s = append(s, "RetCode: "+valueToGoStringBgf(this.RetCode, "int32")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DispatchRegMethodReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&RPCProto.DispatchRegMethodReq{")
	if this.ServerName != nil {
		s = append(s, "ServerName: "+valueToGoStringBgf(this.ServerName, "string")+",\n")
	}
	if this.ServiceName != nil {
		s = append(s, "ServiceName: "+valueToGoStringBgf(this.ServiceName, "string")+",\n")
	}
	if this.MethodName != nil {
		s = append(s, "MethodName: "+fmt.Sprintf("%#v", this.MethodName)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DispatchRegMethodResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&RPCProto.DispatchRegMethodResp{")
	if this.Result != nil {
		s = append(s, "Result: "+valueToGoStringBgf(this.Result, "int32")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientTransMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&RPCProto.ClientTransMsg{")
	s = append(s, "ClientId: "+fmt.Sprintf("%#v", this.ClientId)+",\n")
	s = append(s, "ClientMsg: "+fmt.Sprintf("%#v", this.ClientMsg)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientSplitMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&RPCProto.ClientSplitMsg{")
	s = append(s, "ClientId: "+fmt.Sprintf("%#v", this.ClientId)+",\n")
	s = append(s, "UniqueKey: "+fmt.Sprintf("%#v", this.UniqueKey)+",\n")
	s = append(s, "EndFlag: "+fmt.Sprintf("%#v", this.EndFlag)+",\n")
	s = append(s, "SplitMsg: "+fmt.Sprintf("%#v", this.SplitMsg)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBgf(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RegisterDispatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterDispatchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CantReplace != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBgf(dAtA, i, uint64(*m.CantReplace))
	}
	if len(m.Groupid) > 0 {
		for _, num := range m.Groupid {
			dAtA[i] = 0x10
			i++
			i = encodeVarintBgf(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegisterDispatchResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterDispatchResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RetCode != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBgf(dAtA, i, uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DispatchRegMethodReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatchRegMethodReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServerName != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBgf(dAtA, i, uint64(len(*m.ServerName)))
		i += copy(dAtA[i:], *m.ServerName)
	}
	if m.ServiceName != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBgf(dAtA, i, uint64(len(*m.ServiceName)))
		i += copy(dAtA[i:], *m.ServiceName)
	}
	if len(m.MethodName) > 0 {
		for _, s := range m.MethodName {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DispatchRegMethodResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatchRegMethodResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBgf(dAtA, i, uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientTransMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientTransMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintBgf(dAtA, i, uint64(m.ClientId))
	if m.ClientMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBgf(dAtA, i, uint64(len(m.ClientMsg)))
		i += copy(dAtA[i:], m.ClientMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientSplitMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSplitMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintBgf(dAtA, i, uint64(m.ClientId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintBgf(dAtA, i, uint64(m.UniqueKey))
	dAtA[i] = 0x18
	i++
	i = encodeVarintBgf(dAtA, i, uint64(m.EndFlag))
	if m.SplitMsg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBgf(dAtA, i, uint64(len(m.SplitMsg)))
		i += copy(dAtA[i:], m.SplitMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBgf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRegisterDispatchReq(r randyBgf, easy bool) *RegisterDispatchReq {
	this := &RegisterDispatchReq{}
	if r.Intn(10) != 0 {
		v1 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.CantReplace = &v1
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Groupid = make([]int64, v2)
		for i := 0; i < v2; i++ {
			this.Groupid[i] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Groupid[i] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBgf(r, 3)
	}
	return this
}

func NewPopulatedRegisterDispatchResp(r randyBgf, easy bool) *RegisterDispatchResp {
	this := &RegisterDispatchResp{}
	if r.Intn(10) != 0 {
		v3 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.RetCode = &v3
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBgf(r, 2)
	}
	return this
}

func NewPopulatedDispatchRegMethodReq(r randyBgf, easy bool) *DispatchRegMethodReq {
	this := &DispatchRegMethodReq{}
	if r.Intn(10) != 0 {
		v4 := string(randStringBgf(r))
		this.ServerName = &v4
	}
	if r.Intn(10) != 0 {
		v5 := string(randStringBgf(r))
		this.ServiceName = &v5
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.MethodName = make([]string, v6)
		for i := 0; i < v6; i++ {
			this.MethodName[i] = string(randStringBgf(r))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBgf(r, 4)
	}
	return this
}

func NewPopulatedDispatchRegMethodResp(r randyBgf, easy bool) *DispatchRegMethodResp {
	this := &DispatchRegMethodResp{}
	if r.Intn(10) != 0 {
		v7 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.Result = &v7
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBgf(r, 2)
	}
	return this
}

func NewPopulatedClientTransMsg(r randyBgf, easy bool) *ClientTransMsg {
	this := &ClientTransMsg{}
	this.ClientId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ClientId *= -1
	}
	v8 := r.Intn(100)
	this.ClientMsg = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.ClientMsg[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBgf(r, 3)
	}
	return this
}

func NewPopulatedClientSplitMsg(r randyBgf, easy bool) *ClientSplitMsg {
	this := &ClientSplitMsg{}
	this.ClientId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ClientId *= -1
	}
	this.UniqueKey = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UniqueKey *= -1
	}
	this.EndFlag = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.EndFlag *= -1
	}
	v9 := r.Intn(100)
	this.SplitMsg = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.SplitMsg[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBgf(r, 5)
	}
	return this
}

type randyBgf interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneBgf(r randyBgf) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringBgf(r randyBgf) string {
	v10 := r.Intn(100)
	tmps := make([]rune, v10)
	for i := 0; i < v10; i++ {
		tmps[i] = randUTF8RuneBgf(r)
	}
	return string(tmps)
}
func randUnrecognizedBgf(r randyBgf, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldBgf(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldBgf(dAtA []byte, r randyBgf, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateBgf(dAtA, uint64(key))
		v11 := r.Int63()
		if r.Intn(2) == 0 {
			v11 *= -1
		}
		dAtA = encodeVarintPopulateBgf(dAtA, uint64(v11))
	case 1:
		dAtA = encodeVarintPopulateBgf(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateBgf(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateBgf(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateBgf(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateBgf(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RegisterDispatchReq) Size() (n int) {
	var l int
	_ = l
	if m.CantReplace != nil {
		n += 1 + sovBgf(uint64(*m.CantReplace))
	}
	if len(m.Groupid) > 0 {
		for _, e := range m.Groupid {
			n += 1 + sovBgf(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterDispatchResp) Size() (n int) {
	var l int
	_ = l
	if m.RetCode != nil {
		n += 1 + sovBgf(uint64(*m.RetCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DispatchRegMethodReq) Size() (n int) {
	var l int
	_ = l
	if m.ServerName != nil {
		l = len(*m.ServerName)
		n += 1 + l + sovBgf(uint64(l))
	}
	if m.ServiceName != nil {
		l = len(*m.ServiceName)
		n += 1 + l + sovBgf(uint64(l))
	}
	if len(m.MethodName) > 0 {
		for _, s := range m.MethodName {
			l = len(s)
			n += 1 + l + sovBgf(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DispatchRegMethodResp) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		n += 1 + sovBgf(uint64(*m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientTransMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovBgf(uint64(m.ClientId))
	if m.ClientMsg != nil {
		l = len(m.ClientMsg)
		n += 1 + l + sovBgf(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientSplitMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovBgf(uint64(m.ClientId))
	n += 1 + sovBgf(uint64(m.UniqueKey))
	n += 1 + sovBgf(uint64(m.EndFlag))
	if m.SplitMsg != nil {
		l = len(m.SplitMsg)
		n += 1 + l + sovBgf(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBgf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBgf(x uint64) (n int) {
	return sovBgf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RegisterDispatchReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterDispatchReq{`,
		`CantReplace:` + valueToStringBgf(this.CantReplace) + `,`,
		`Groupid:` + fmt.Sprintf("%v", this.Groupid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterDispatchResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterDispatchResp{`,
		`RetCode:` + valueToStringBgf(this.RetCode) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DispatchRegMethodReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DispatchRegMethodReq{`,
		`ServerName:` + valueToStringBgf(this.ServerName) + `,`,
		`ServiceName:` + valueToStringBgf(this.ServiceName) + `,`,
		`MethodName:` + fmt.Sprintf("%v", this.MethodName) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DispatchRegMethodResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DispatchRegMethodResp{`,
		`Result:` + valueToStringBgf(this.Result) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientTransMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientTransMsg{`,
		`ClientId:` + fmt.Sprintf("%v", this.ClientId) + `,`,
		`ClientMsg:` + fmt.Sprintf("%v", this.ClientMsg) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientSplitMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientSplitMsg{`,
		`ClientId:` + fmt.Sprintf("%v", this.ClientId) + `,`,
		`UniqueKey:` + fmt.Sprintf("%v", this.UniqueKey) + `,`,
		`EndFlag:` + fmt.Sprintf("%v", this.EndFlag) + `,`,
		`SplitMsg:` + fmt.Sprintf("%v", this.SplitMsg) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBgf(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RegisterDispatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBgf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterDispatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterDispatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CantReplace", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CantReplace = &v
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBgf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Groupid = append(m.Groupid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBgf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBgf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBgf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Groupid = append(m.Groupid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Groupid", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBgf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBgf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterDispatchResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBgf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterDispatchResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterDispatchResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetCode = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBgf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBgf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatchRegMethodReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBgf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchRegMethodReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchRegMethodReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBgf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServerName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBgf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServiceName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBgf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = append(m.MethodName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBgf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBgf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatchRegMethodResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBgf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchRegMethodResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchRegMethodResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBgf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBgf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientTransMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBgf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientTransMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientTransMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBgf
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientMsg = append(m.ClientMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientMsg == nil {
				m.ClientMsg = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipBgf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBgf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("client_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("client_msg")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSplitMsg) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBgf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSplitMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSplitMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueKey", wireType)
			}
			m.UniqueKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueKey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndFlag", wireType)
			}
			m.EndFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndFlag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBgf
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitMsg = append(m.SplitMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.SplitMsg == nil {
				m.SplitMsg = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipBgf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBgf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("client_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("unique_key")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("end_flag")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("split_msg")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBgf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBgf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBgf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBgf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBgf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBgf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBgf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBgf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("bgf.proto", fileDescriptorBgf) }

var fileDescriptorBgf = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8e, 0xbf, 0x6e, 0xda, 0x40,
	0x1c, 0xc7, 0x39, 0x1b, 0x5a, 0xfc, 0x03, 0xd1, 0xca, 0xd0, 0x62, 0x75, 0xb8, 0x5a, 0x5e, 0xea,
	0xa1, 0x85, 0x17, 0xe8, 0x04, 0x5d, 0x91, 0x10, 0xad, 0xba, 0x5a, 0xc6, 0x3e, 0x8e, 0x53, 0x6d,
	0x9f, 0xb9, 0x3b, 0x57, 0xea, 0xd6, 0xc7, 0xc9, 0x23, 0x64, 0xcc, 0xc8, 0x98, 0x31, 0x53, 0x84,
	0xfd, 0x04, 0x19, 0x33, 0x46, 0x3e, 0x3b, 0x22, 0x52, 0x22, 0x65, 0xbb, 0xdf, 0xf7, 0xcf, 0xe7,
	0x7b, 0x60, 0x6d, 0xe9, 0x6e, 0x96, 0x0b, 0xae, 0xb8, 0xdd, 0xdf, 0xac, 0x97, 0xeb, 0xfa, 0xf5,
	0xe9, 0x1b, 0x65, 0x6a, 0x5f, 0x6c, 0x67, 0x11, 0x4f, 0xe7, 0x94, 0x53, 0x3e, 0xd7, 0x81, 0x6d,
	0xb1, 0xd3, 0x97, 0x3e, 0xf4, 0xab, 0x29, 0x7a, 0xdf, 0x61, 0xbc, 0x21, 0x94, 0x49, 0x45, 0xc4,
	0x0f, 0x26, 0xf3, 0x50, 0x45, 0xfb, 0x0d, 0x39, 0xd8, 0x13, 0x18, 0x46, 0x61, 0xa6, 0x02, 0x41,
	0xf2, 0x24, 0x8c, 0x88, 0x83, 0x5c, 0xe4, 0xf7, 0xec, 0x77, 0xf0, 0x96, 0x0a, 0x5e, 0xe4, 0x2c,
	0x76, 0x0c, 0xd7, 0xf4, 0x4d, 0xcf, 0x87, 0xc9, 0xf3, 0xb6, 0xcc, 0xed, 0xf7, 0xd0, 0x17, 0x44,
	0x05, 0x11, 0x8f, 0xdb, 0xaa, 0xf7, 0x1b, 0x26, 0xe7, 0x04, 0x5d, 0x11, 0xb5, 0xe7, 0x71, 0x3d,
	0x34, 0x86, 0x81, 0x24, 0xe2, 0x2f, 0x11, 0x41, 0x16, 0xa6, 0x4d, 0xd8, 0xaa, 0xd7, 0x6b, 0x91,
	0x45, 0xa4, 0x51, 0x0d, 0xad, 0x8e, 0x61, 0x90, 0xea, 0x5e, 0x23, 0x9a, 0xae, 0xe9, 0x5b, 0xde,
	0x17, 0xf8, 0xf0, 0x02, 0x57, 0xe6, 0xf6, 0x08, 0xde, 0x08, 0x22, 0x8b, 0x44, 0xb5, 0x1f, 0x58,
	0xc2, 0x68, 0x99, 0x30, 0x92, 0xa9, 0x5f, 0x22, 0xcc, 0xe4, 0x4a, 0x52, 0x7b, 0x0a, 0x56, 0xa4,
	0x95, 0x80, 0xc5, 0x0e, 0x72, 0x0d, 0xbf, 0xb7, 0xe8, 0x1e, 0x6f, 0x3f, 0x77, 0x6c, 0x07, 0xa0,
	0x35, 0x52, 0x49, 0x1d, 0xc3, 0x35, 0xfc, 0x61, 0xe3, 0x78, 0xea, 0x11, 0xf2, 0x33, 0x4f, 0x98,
	0x7a, 0x0d, 0x52, 0x64, 0xec, 0x50, 0x90, 0xe0, 0x0f, 0xf9, 0xa7, 0x21, 0x66, 0xeb, 0x7c, 0x84,
	0x3e, 0xc9, 0xe2, 0x60, 0x97, 0x84, 0xd4, 0x31, 0x9f, 0x34, 0xa6, 0x60, 0xc9, 0x1a, 0xab, 0x57,
	0xbb, 0xe7, 0xd5, 0xc5, 0xd7, 0x9b, 0x12, 0x77, 0x4e, 0x25, 0x46, 0x77, 0x25, 0x46, 0xf7, 0x25,
	0x46, 0xff, 0x2b, 0x8c, 0x2e, 0x2a, 0x8c, 0x2e, 0x2b, 0x8c, 0xae, 0x2a, 0x8c, 0x8e, 0x15, 0x46,
	0xd7, 0x15, 0x46, 0xa7, 0x0a, 0xa3, 0x87, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x74, 0xb8, 0x2c,
	0x16, 0x02, 0x00, 0x00,
}
