// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: srpc.proto

/*
	Package srpc is a generated protocol buffer package.

	It is generated from these files:
		srpc.proto

	It has these top-level messages:
		CRpcHead
*/
package srpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// RPC消息头定义
type CRpcHead struct {
	MtId             int32  `protobuf:"varint,1,opt,name=mt_id" json:"mt_id"`
	Sequence         uint64 `protobuf:"varint,2,opt,name=sequence" json:"sequence"`
	Coloring         uint32 `protobuf:"varint,3,opt,name=coloring" json:"coloring"`
	ColorId          uint64 `protobuf:"varint,4,opt,name=color_id" json:"color_id"`
	Err              int32  `protobuf:"varint,5,opt,name=err" json:"err"`
	Result           int32  `protobuf:"varint,6,opt,name=result" json:"result"`
	ErrMsg           []byte `protobuf:"bytes,7,opt,name=err_msg" json:"err_msg"`
	MethodName       []byte `protobuf:"bytes,8,opt,name=method_name" json:"method_name"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CRpcHead) Reset()                    { *m = CRpcHead{} }
func (*CRpcHead) ProtoMessage()               {}
func (*CRpcHead) Descriptor() ([]byte, []int) { return fileDescriptorSrpc, []int{0} }

func (m *CRpcHead) GetMtId() int32 {
	if m != nil {
		return m.MtId
	}
	return 0
}

func (m *CRpcHead) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *CRpcHead) GetColoring() uint32 {
	if m != nil {
		return m.Coloring
	}
	return 0
}

func (m *CRpcHead) GetColorId() uint64 {
	if m != nil {
		return m.ColorId
	}
	return 0
}

func (m *CRpcHead) GetErr() int32 {
	if m != nil {
		return m.Err
	}
	return 0
}

func (m *CRpcHead) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *CRpcHead) GetErrMsg() []byte {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *CRpcHead) GetMethodName() []byte {
	if m != nil {
		return m.MethodName
	}
	return nil
}

func init() {
	proto.RegisterType((*CRpcHead)(nil), "srpc.CRpcHead")
}
func (this *CRpcHead) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CRpcHead)
	if !ok {
		that2, ok := that.(CRpcHead)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CRpcHead")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CRpcHead but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CRpcHead but is not nil && this == nil")
	}
	if this.MtId != that1.MtId {
		return fmt.Errorf("MtId this(%v) Not Equal that(%v)", this.MtId, that1.MtId)
	}
	if this.Sequence != that1.Sequence {
		return fmt.Errorf("Sequence this(%v) Not Equal that(%v)", this.Sequence, that1.Sequence)
	}
	if this.Coloring != that1.Coloring {
		return fmt.Errorf("Coloring this(%v) Not Equal that(%v)", this.Coloring, that1.Coloring)
	}
	if this.ColorId != that1.ColorId {
		return fmt.Errorf("ColorId this(%v) Not Equal that(%v)", this.ColorId, that1.ColorId)
	}
	if this.Err != that1.Err {
		return fmt.Errorf("Err this(%v) Not Equal that(%v)", this.Err, that1.Err)
	}
	if this.Result != that1.Result {
		return fmt.Errorf("Result this(%v) Not Equal that(%v)", this.Result, that1.Result)
	}
	if !bytes.Equal(this.ErrMsg, that1.ErrMsg) {
		return fmt.Errorf("ErrMsg this(%v) Not Equal that(%v)", this.ErrMsg, that1.ErrMsg)
	}
	if !bytes.Equal(this.MethodName, that1.MethodName) {
		return fmt.Errorf("MethodName this(%v) Not Equal that(%v)", this.MethodName, that1.MethodName)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CRpcHead) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CRpcHead)
	if !ok {
		that2, ok := that.(CRpcHead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MtId != that1.MtId {
		return false
	}
	if this.Sequence != that1.Sequence {
		return false
	}
	if this.Coloring != that1.Coloring {
		return false
	}
	if this.ColorId != that1.ColorId {
		return false
	}
	if this.Err != that1.Err {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if !bytes.Equal(this.ErrMsg, that1.ErrMsg) {
		return false
	}
	if !bytes.Equal(this.MethodName, that1.MethodName) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CRpcHead) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&srpc.CRpcHead{")
	s = append(s, "MtId: "+fmt.Sprintf("%#v", this.MtId)+",\n")
	s = append(s, "Sequence: "+fmt.Sprintf("%#v", this.Sequence)+",\n")
	s = append(s, "Coloring: "+fmt.Sprintf("%#v", this.Coloring)+",\n")
	s = append(s, "ColorId: "+fmt.Sprintf("%#v", this.ColorId)+",\n")
	s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "ErrMsg: "+fmt.Sprintf("%#v", this.ErrMsg)+",\n")
	s = append(s, "MethodName: "+fmt.Sprintf("%#v", this.MethodName)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSrpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CRpcHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CRpcHead) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSrpc(dAtA, i, uint64(m.MtId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintSrpc(dAtA, i, uint64(m.Sequence))
	dAtA[i] = 0x18
	i++
	i = encodeVarintSrpc(dAtA, i, uint64(m.Coloring))
	dAtA[i] = 0x20
	i++
	i = encodeVarintSrpc(dAtA, i, uint64(m.ColorId))
	dAtA[i] = 0x28
	i++
	i = encodeVarintSrpc(dAtA, i, uint64(m.Err))
	dAtA[i] = 0x30
	i++
	i = encodeVarintSrpc(dAtA, i, uint64(m.Result))
	if m.ErrMsg != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSrpc(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	if m.MethodName != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSrpc(dAtA, i, uint64(len(m.MethodName)))
		i += copy(dAtA[i:], m.MethodName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSrpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedCRpcHead(r randySrpc, easy bool) *CRpcHead {
	this := &CRpcHead{}
	this.MtId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MtId *= -1
	}
	this.Sequence = uint64(uint64(r.Uint32()))
	this.Coloring = uint32(r.Uint32())
	this.ColorId = uint64(uint64(r.Uint32()))
	this.Err = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Err *= -1
	}
	this.Result = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Result *= -1
	}
	v1 := r.Intn(100)
	this.ErrMsg = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.ErrMsg[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.MethodName = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.MethodName[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSrpc(r, 9)
	}
	return this
}

type randySrpc interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSrpc(r randySrpc) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSrpc(r randySrpc) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneSrpc(r)
	}
	return string(tmps)
}
func randUnrecognizedSrpc(r randySrpc, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSrpc(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSrpc(dAtA []byte, r randySrpc, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSrpc(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateSrpc(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateSrpc(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSrpc(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSrpc(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSrpc(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSrpc(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CRpcHead) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSrpc(uint64(m.MtId))
	n += 1 + sovSrpc(uint64(m.Sequence))
	n += 1 + sovSrpc(uint64(m.Coloring))
	n += 1 + sovSrpc(uint64(m.ColorId))
	n += 1 + sovSrpc(uint64(m.Err))
	n += 1 + sovSrpc(uint64(m.Result))
	if m.ErrMsg != nil {
		l = len(m.ErrMsg)
		n += 1 + l + sovSrpc(uint64(l))
	}
	if m.MethodName != nil {
		l = len(m.MethodName)
		n += 1 + l + sovSrpc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSrpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSrpc(x uint64) (n int) {
	return sovSrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CRpcHead) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CRpcHead{`,
		`MtId:` + fmt.Sprintf("%v", this.MtId) + `,`,
		`Sequence:` + fmt.Sprintf("%v", this.Sequence) + `,`,
		`Coloring:` + fmt.Sprintf("%v", this.Coloring) + `,`,
		`ColorId:` + fmt.Sprintf("%v", this.ColorId) + `,`,
		`Err:` + fmt.Sprintf("%v", this.Err) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`ErrMsg:` + fmt.Sprintf("%v", this.ErrMsg) + `,`,
		`MethodName:` + fmt.Sprintf("%v", this.MethodName) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSrpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CRpcHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CRpcHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CRpcHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MtId", wireType)
			}
			m.MtId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MtId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coloring", wireType)
			}
			m.Coloring = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coloring |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorId", wireType)
			}
			m.ColorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColorId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = append(m.ErrMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.ErrMsg == nil {
				m.ErrMsg = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSrpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = append(m.MethodName[:0], dAtA[iNdEx:postIndex]...)
			if m.MethodName == nil {
				m.MethodName = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSrpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSrpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSrpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSrpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSrpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("srpc.proto", fileDescriptorSrpc) }

var fileDescriptorSrpc = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8c, 0x3d, 0x4e, 0xc3, 0x40,
	0x10, 0x85, 0x33, 0xc4, 0x4e, 0xac, 0x01, 0x0a, 0xcc, 0x8f, 0x16, 0x8a, 0xc1, 0xa2, 0x72, 0x01,
	0xc9, 0x1d, 0x42, 0x43, 0xcd, 0x05, 0xac, 0x64, 0x3d, 0x6c, 0x2c, 0x65, 0xbd, 0x66, 0xbd, 0xee,
	0x39, 0x0e, 0x47, 0xa0, 0x44, 0x54, 0x29, 0x29, 0xa9, 0x50, 0xbc, 0x27, 0xa0, 0xa4, 0x44, 0x31,
	0x48, 0xb1, 0xe8, 0xde, 0xfb, 0xde, 0xcc, 0x87, 0x58, 0xdb, 0x4a, 0x4e, 0x2a, 0x6b, 0x9c, 0x89,
	0x83, 0x6d, 0xbe, 0xb8, 0x51, 0x85, 0x5b, 0x36, 0x8b, 0x89, 0x34, 0x7a, 0xaa, 0x8c, 0x32, 0xd3,
	0x6e, 0x5c, 0x34, 0x0f, 0x5d, 0xeb, 0x4a, 0x97, 0x7e, 0x9f, 0xae, 0xde, 0x00, 0xa3, 0xdb, 0xfb,
	0x4a, 0xde, 0xf1, 0x3c, 0x8f, 0x8f, 0x31, 0xd4, 0x2e, 0x2b, 0x72, 0x01, 0x09, 0xa4, 0xe1, 0x2c,
	0x58, 0x7f, 0x5e, 0x0e, 0xe2, 0x33, 0x8c, 0x6a, 0x7e, 0x6c, 0xb8, 0x94, 0x2c, 0xf6, 0x12, 0x48,
	0x83, 0x1d, 0x97, 0x66, 0x65, 0x6c, 0x51, 0x2a, 0x31, 0x4c, 0x20, 0x3d, 0xfc, 0xc7, 0xb7, 0x9e,
	0xa0, 0x77, 0x7f, 0x84, 0x43, 0xb6, 0x56, 0x84, 0x3d, 0xf5, 0x09, 0x8e, 0x2c, 0xd7, 0xcd, 0xca,
	0x89, 0x51, 0x8f, 0x9e, 0xe2, 0x98, 0xad, 0xcd, 0x74, 0xad, 0xc4, 0x38, 0x81, 0xf4, 0xe0, 0x0f,
	0x9f, 0xe3, 0xbe, 0x66, 0xb7, 0x34, 0x79, 0x56, 0xce, 0x35, 0x8b, 0x68, 0x37, 0xcd, 0xae, 0x3f,
	0x5a, 0x1a, 0x6c, 0x5a, 0x82, 0xaf, 0x96, 0xe0, 0xbb, 0x25, 0x78, 0xf2, 0x04, 0xcf, 0x9e, 0xe0,
	0xc5, 0x13, 0xbc, 0x7a, 0x82, 0xb5, 0x27, 0x78, 0xf7, 0x04, 0x1b, 0x4f, 0xf0, 0x13, 0x00, 0x00,
	0xff, 0xff, 0xfb, 0x94, 0xb2, 0xb2, 0x34, 0x01, 0x00, 0x00,
}
