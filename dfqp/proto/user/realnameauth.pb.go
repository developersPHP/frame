// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user/realnameauth.proto

/*
	Package pgUser is a generated protocol buffer package.

	It is generated from these files:
		user/realnameauth.proto

	It has these top-level messages:
		RealNameAuthRequest
		RealNameAuthRespData
		RealNameAuthResponse
*/
package pgUser

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 实名验证
type RealNameAuthRequest struct {
	Mid              int64  `protobuf:"varint,1,opt,name=mid" json:"mid"`
	Idcard           string `protobuf:"bytes,2,opt,name=idcard" json:"idcard"`
	RealName         string `protobuf:"bytes,3,opt,name=real_name,json=realName" json:"real_name"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RealNameAuthRequest) Reset()                    { *m = RealNameAuthRequest{} }
func (*RealNameAuthRequest) ProtoMessage()               {}
func (*RealNameAuthRequest) Descriptor() ([]byte, []int) { return fileDescriptorRealnameauth, []int{0} }

func (m *RealNameAuthRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *RealNameAuthRequest) GetIdcard() string {
	if m != nil {
		return m.Idcard
	}
	return ""
}

func (m *RealNameAuthRequest) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

type RealNameAuthRespData struct {
	LoginType        int32  `protobuf:"varint,1,opt,name=login_type,json=loginType" json:"login_type"`
	Pwd              string `protobuf:"bytes,2,opt,name=pwd" json:"pwd"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RealNameAuthRespData) Reset()                    { *m = RealNameAuthRespData{} }
func (*RealNameAuthRespData) ProtoMessage()               {}
func (*RealNameAuthRespData) Descriptor() ([]byte, []int) { return fileDescriptorRealnameauth, []int{1} }

func (m *RealNameAuthRespData) GetLoginType() int32 {
	if m != nil {
		return m.LoginType
	}
	return 0
}

func (m *RealNameAuthRespData) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

type RealNameAuthResponse struct {
	Status           int32                `protobuf:"varint,1,opt,name=status" json:"status"`
	Data             RealNameAuthRespData `protobuf:"bytes,2,opt,name=data" json:"data"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *RealNameAuthResponse) Reset()                    { *m = RealNameAuthResponse{} }
func (*RealNameAuthResponse) ProtoMessage()               {}
func (*RealNameAuthResponse) Descriptor() ([]byte, []int) { return fileDescriptorRealnameauth, []int{2} }

func (m *RealNameAuthResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RealNameAuthResponse) GetData() RealNameAuthRespData {
	if m != nil {
		return m.Data
	}
	return RealNameAuthRespData{}
}

func init() {
	proto.RegisterType((*RealNameAuthRequest)(nil), "pgUser.RealNameAuthRequest")
	proto.RegisterType((*RealNameAuthRespData)(nil), "pgUser.RealNameAuthRespData")
	proto.RegisterType((*RealNameAuthResponse)(nil), "pgUser.RealNameAuthResponse")
}
func (this *RealNameAuthRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RealNameAuthRequest)
	if !ok {
		that2, ok := that.(RealNameAuthRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RealNameAuthRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RealNameAuthRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RealNameAuthRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.Idcard != that1.Idcard {
		return fmt.Errorf("Idcard this(%v) Not Equal that(%v)", this.Idcard, that1.Idcard)
	}
	if this.RealName != that1.RealName {
		return fmt.Errorf("RealName this(%v) Not Equal that(%v)", this.RealName, that1.RealName)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RealNameAuthRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RealNameAuthRequest)
	if !ok {
		that2, ok := that.(RealNameAuthRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.Idcard != that1.Idcard {
		return false
	}
	if this.RealName != that1.RealName {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RealNameAuthRespData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RealNameAuthRespData)
	if !ok {
		that2, ok := that.(RealNameAuthRespData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RealNameAuthRespData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RealNameAuthRespData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RealNameAuthRespData but is not nil && this == nil")
	}
	if this.LoginType != that1.LoginType {
		return fmt.Errorf("LoginType this(%v) Not Equal that(%v)", this.LoginType, that1.LoginType)
	}
	if this.Pwd != that1.Pwd {
		return fmt.Errorf("Pwd this(%v) Not Equal that(%v)", this.Pwd, that1.Pwd)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RealNameAuthRespData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RealNameAuthRespData)
	if !ok {
		that2, ok := that.(RealNameAuthRespData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LoginType != that1.LoginType {
		return false
	}
	if this.Pwd != that1.Pwd {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RealNameAuthResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RealNameAuthResponse)
	if !ok {
		that2, ok := that.(RealNameAuthResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RealNameAuthResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RealNameAuthResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RealNameAuthResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RealNameAuthResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RealNameAuthResponse)
	if !ok {
		that2, ok := that.(RealNameAuthResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RealNameAuthRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgUser.RealNameAuthRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "Idcard: "+fmt.Sprintf("%#v", this.Idcard)+",\n")
	s = append(s, "RealName: "+fmt.Sprintf("%#v", this.RealName)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RealNameAuthRespData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgUser.RealNameAuthRespData{")
	s = append(s, "LoginType: "+fmt.Sprintf("%#v", this.LoginType)+",\n")
	s = append(s, "Pwd: "+fmt.Sprintf("%#v", this.Pwd)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RealNameAuthResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgUser.RealNameAuthResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRealnameauth(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RealNameAuthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealNameAuthRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRealnameauth(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintRealnameauth(dAtA, i, uint64(len(m.Idcard)))
	i += copy(dAtA[i:], m.Idcard)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRealnameauth(dAtA, i, uint64(len(m.RealName)))
	i += copy(dAtA[i:], m.RealName)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RealNameAuthRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealNameAuthRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRealnameauth(dAtA, i, uint64(m.LoginType))
	dAtA[i] = 0x12
	i++
	i = encodeVarintRealnameauth(dAtA, i, uint64(len(m.Pwd)))
	i += copy(dAtA[i:], m.Pwd)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RealNameAuthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealNameAuthResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRealnameauth(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintRealnameauth(dAtA, i, uint64(m.Data.Size()))
	n1, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRealnameauth(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRealNameAuthRequest(r randyRealnameauth, easy bool) *RealNameAuthRequest {
	this := &RealNameAuthRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.Idcard = string(randStringRealnameauth(r))
	this.RealName = string(randStringRealnameauth(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRealnameauth(r, 4)
	}
	return this
}

func NewPopulatedRealNameAuthRespData(r randyRealnameauth, easy bool) *RealNameAuthRespData {
	this := &RealNameAuthRespData{}
	this.LoginType = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.LoginType *= -1
	}
	this.Pwd = string(randStringRealnameauth(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRealnameauth(r, 3)
	}
	return this
}

func NewPopulatedRealNameAuthResponse(r randyRealnameauth, easy bool) *RealNameAuthResponse {
	this := &RealNameAuthResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	v1 := NewPopulatedRealNameAuthRespData(r, easy)
	this.Data = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRealnameauth(r, 3)
	}
	return this
}

type randyRealnameauth interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRealnameauth(r randyRealnameauth) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRealnameauth(r randyRealnameauth) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneRealnameauth(r)
	}
	return string(tmps)
}
func randUnrecognizedRealnameauth(r randyRealnameauth, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRealnameauth(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRealnameauth(dAtA []byte, r randyRealnameauth, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRealnameauth(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateRealnameauth(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateRealnameauth(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRealnameauth(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRealnameauth(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRealnameauth(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRealnameauth(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RealNameAuthRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRealnameauth(uint64(m.Mid))
	l = len(m.Idcard)
	n += 1 + l + sovRealnameauth(uint64(l))
	l = len(m.RealName)
	n += 1 + l + sovRealnameauth(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RealNameAuthRespData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRealnameauth(uint64(m.LoginType))
	l = len(m.Pwd)
	n += 1 + l + sovRealnameauth(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RealNameAuthResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRealnameauth(uint64(m.Status))
	l = m.Data.Size()
	n += 1 + l + sovRealnameauth(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRealnameauth(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRealnameauth(x uint64) (n int) {
	return sovRealnameauth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RealNameAuthRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RealNameAuthRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`Idcard:` + fmt.Sprintf("%v", this.Idcard) + `,`,
		`RealName:` + fmt.Sprintf("%v", this.RealName) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RealNameAuthRespData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RealNameAuthRespData{`,
		`LoginType:` + fmt.Sprintf("%v", this.LoginType) + `,`,
		`Pwd:` + fmt.Sprintf("%v", this.Pwd) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RealNameAuthResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RealNameAuthResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "RealNameAuthRespData", "RealNameAuthRespData", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRealnameauth(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RealNameAuthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRealnameauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealNameAuthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealNameAuthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRealnameauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idcard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRealnameauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRealnameauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idcard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRealnameauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRealnameauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRealnameauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRealnameauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealNameAuthRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRealnameauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealNameAuthRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealNameAuthRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginType", wireType)
			}
			m.LoginType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRealnameauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRealnameauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRealnameauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRealnameauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRealnameauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealNameAuthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRealnameauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealNameAuthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealNameAuthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRealnameauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRealnameauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRealnameauth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRealnameauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRealnameauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRealnameauth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRealnameauth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRealnameauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRealnameauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRealnameauth
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRealnameauth
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRealnameauth(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRealnameauth = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRealnameauth   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("user/realnameauth.proto", fileDescriptorRealnameauth) }

var fileDescriptorRealnameauth = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0x7b, 0xbe, 0xf6, 0xab, 0xa8, 0xd9, 0x02, 0x82, 0x0a, 0x55, 0xa6, 0x94, 0xa5, 0x03,
	0x4a, 0x24, 0x84, 0xd8, 0xa9, 0x98, 0x19, 0x0a, 0xcc, 0x95, 0xdb, 0x1c, 0xd2, 0x48, 0x49, 0x6c,
	0xfc, 0x03, 0xea, 0xc6, 0xe5, 0x70, 0x09, 0x8c, 0x8c, 0x1d, 0x19, 0x99, 0x50, 0xe3, 0x2b, 0x60,
	0x64, 0x44, 0x76, 0x3d, 0x50, 0xc1, 0x96, 0xf3, 0xe6, 0xfd, 0x79, 0x64, 0xb2, 0x6f, 0x14, 0xca,
	0x44, 0x22, 0x2b, 0x2a, 0x56, 0x22, 0x33, 0x7a, 0x1e, 0x0b, 0xc9, 0x35, 0x8f, 0xda, 0x22, 0xbb,
	0x55, 0x28, 0x0f, 0xce, 0x1e, 0xb0, 0x4a, 0xb9, 0x4c, 0xb2, 0x5c, 0xcf, 0xcd, 0x34, 0x9e, 0xf1,
	0x32, 0xc9, 0x78, 0xc6, 0x13, 0xef, 0x9a, 0x9a, 0x3b, 0x7f, 0xf9, 0xc3, 0x7f, 0xad, 0xd3, 0x83,
	0x8a, 0xec, 0x8c, 0x91, 0x15, 0x57, 0xac, 0xc4, 0x0b, 0xa3, 0xe7, 0x63, 0xbc, 0x37, 0xa8, 0x74,
	0xb4, 0x47, 0x9a, 0x65, 0x9e, 0x76, 0xa1, 0x0f, 0xc3, 0xe6, 0xa8, 0xb5, 0xfc, 0x38, 0x6c, 0x8c,
	0x9d, 0x10, 0xf5, 0x48, 0x3b, 0x4f, 0x67, 0x4c, 0xa6, 0xdd, 0x7f, 0x7d, 0x18, 0x76, 0xc2, 0xaf,
	0xa0, 0x45, 0x47, 0xa4, 0xe3, 0x00, 0x27, 0x8e, 0xb0, 0xdb, 0xfc, 0x61, 0xd8, 0x92, 0x61, 0x63,
	0x70, 0x4d, 0x76, 0x37, 0xf7, 0x94, 0xb8, 0x64, 0x9a, 0x45, 0xc7, 0x84, 0x14, 0x3c, 0xcb, 0xab,
	0x89, 0x5e, 0x08, 0xf4, 0xbb, 0xff, 0x43, 0xb6, 0xe3, 0xf5, 0x9b, 0x85, 0x40, 0x47, 0x25, 0x1e,
	0x37, 0xa7, 0x9d, 0x30, 0x28, 0x7e, 0x97, 0xf2, 0x4a, 0xa1, 0xa3, 0x55, 0x9a, 0x69, 0xa3, 0x36,
	0x0a, 0x83, 0x16, 0x9d, 0x93, 0x56, 0xca, 0x34, 0xf3, 0x75, 0xdb, 0xa7, 0xbd, 0x78, 0xfd, 0x8e,
	0xf1, 0x5f, 0x78, 0x21, 0xe9, 0xfd, 0xa3, 0x93, 0xf7, 0x9a, 0x36, 0x56, 0x35, 0x85, 0xcf, 0x9a,
	0xc2, 0x57, 0x4d, 0xe1, 0xc9, 0x52, 0x78, 0xb6, 0x14, 0x5e, 0x2c, 0x85, 0x57, 0x4b, 0x61, 0x69,
	0x29, 0xbc, 0x59, 0x0a, 0x2b, 0x4b, 0xe1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x14, 0x41, 0x15,
	0xb8, 0x01, 0x00, 0x00,
}
