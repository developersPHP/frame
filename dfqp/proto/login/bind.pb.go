// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: login/bind.proto

/*
	Package pgLogin is a generated protocol buffer package.

	It is generated from these files:
		login/bind.proto

	It has these top-level messages:
		GuestBindWechatRequest
		GuestBindWechatRespData
		GuestBindWechatResponse
		GuestBindPhoneRequest
		GuestBindPhoneRespData
		GuestBindPhoneResponse
		WechatBindPhoneRequest
		WechatBindPhoneRespData
		WechatBindPhoneResponse
*/
package pgLogin

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 游客绑定微信
type GuestBindWechatRequest struct {
	Mid              int64  `protobuf:"varint,1,opt,name=mid" json:"mid"`
	OpenId           string `protobuf:"bytes,2,opt,name=open_id,json=openId" json:"open_id"`
	UnionId          string `protobuf:"bytes,3,opt,name=union_id,json=unionId" json:"union_id"`
	AccessToken      string `protobuf:"bytes,4,opt,name=access_token,json=accessToken" json:"access_token"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GuestBindWechatRequest) Reset()                    { *m = GuestBindWechatRequest{} }
func (*GuestBindWechatRequest) ProtoMessage()               {}
func (*GuestBindWechatRequest) Descriptor() ([]byte, []int) { return fileDescriptorBind, []int{0} }

func (m *GuestBindWechatRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *GuestBindWechatRequest) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *GuestBindWechatRequest) GetUnionId() string {
	if m != nil {
		return m.UnionId
	}
	return ""
}

func (m *GuestBindWechatRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type GuestBindWechatRespData struct {
	LoginType        int32  `protobuf:"varint,1,opt,name=login_type,json=loginType" json:"login_type"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GuestBindWechatRespData) Reset()                    { *m = GuestBindWechatRespData{} }
func (*GuestBindWechatRespData) ProtoMessage()               {}
func (*GuestBindWechatRespData) Descriptor() ([]byte, []int) { return fileDescriptorBind, []int{1} }

func (m *GuestBindWechatRespData) GetLoginType() int32 {
	if m != nil {
		return m.LoginType
	}
	return 0
}

type GuestBindWechatResponse struct {
	Status           int32                   `protobuf:"varint,1,opt,name=status" json:"status"`
	Msg              string                  `protobuf:"bytes,2,opt,name=msg" json:"msg"`
	Data             GuestBindWechatRespData `protobuf:"bytes,3,opt,name=data" json:"data"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *GuestBindWechatResponse) Reset()                    { *m = GuestBindWechatResponse{} }
func (*GuestBindWechatResponse) ProtoMessage()               {}
func (*GuestBindWechatResponse) Descriptor() ([]byte, []int) { return fileDescriptorBind, []int{2} }

func (m *GuestBindWechatResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GuestBindWechatResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GuestBindWechatResponse) GetData() GuestBindWechatRespData {
	if m != nil {
		return m.Data
	}
	return GuestBindWechatRespData{}
}

// 游客绑定手机
type GuestBindPhoneRequest struct {
	Mid              int64  `protobuf:"varint,1,opt,name=mid" json:"mid"`
	Phone            string `protobuf:"bytes,2,opt,name=phone" json:"phone"`
	Captcha          string `protobuf:"bytes,3,opt,name=captcha" json:"captcha"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GuestBindPhoneRequest) Reset()                    { *m = GuestBindPhoneRequest{} }
func (*GuestBindPhoneRequest) ProtoMessage()               {}
func (*GuestBindPhoneRequest) Descriptor() ([]byte, []int) { return fileDescriptorBind, []int{3} }

func (m *GuestBindPhoneRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *GuestBindPhoneRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *GuestBindPhoneRequest) GetCaptcha() string {
	if m != nil {
		return m.Captcha
	}
	return ""
}

type GuestBindPhoneRespData struct {
	LoginType        int32  `protobuf:"varint,1,opt,name=login_type,json=loginType" json:"login_type"`
	Pwd              string `protobuf:"bytes,2,opt,name=pwd" json:"pwd"`
	Bid              string `protobuf:"bytes,3,opt,name=bid" json:"bid"`
	AccessToken      string `protobuf:"bytes,4,opt,name=access_token,json=accessToken" json:"access_token"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GuestBindPhoneRespData) Reset()                    { *m = GuestBindPhoneRespData{} }
func (*GuestBindPhoneRespData) ProtoMessage()               {}
func (*GuestBindPhoneRespData) Descriptor() ([]byte, []int) { return fileDescriptorBind, []int{4} }

func (m *GuestBindPhoneRespData) GetLoginType() int32 {
	if m != nil {
		return m.LoginType
	}
	return 0
}

func (m *GuestBindPhoneRespData) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

func (m *GuestBindPhoneRespData) GetBid() string {
	if m != nil {
		return m.Bid
	}
	return ""
}

func (m *GuestBindPhoneRespData) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type GuestBindPhoneResponse struct {
	Status           int32                  `protobuf:"varint,1,opt,name=status" json:"status"`
	Msg              string                 `protobuf:"bytes,2,opt,name=msg" json:"msg"`
	Data             GuestBindPhoneRespData `protobuf:"bytes,3,opt,name=data" json:"data"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *GuestBindPhoneResponse) Reset()                    { *m = GuestBindPhoneResponse{} }
func (*GuestBindPhoneResponse) ProtoMessage()               {}
func (*GuestBindPhoneResponse) Descriptor() ([]byte, []int) { return fileDescriptorBind, []int{5} }

func (m *GuestBindPhoneResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GuestBindPhoneResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GuestBindPhoneResponse) GetData() GuestBindPhoneRespData {
	if m != nil {
		return m.Data
	}
	return GuestBindPhoneRespData{}
}

// 微信绑定手机
type WechatBindPhoneRequest struct {
	Mid              int64  `protobuf:"varint,1,opt,name=mid" json:"mid"`
	Phone            string `protobuf:"bytes,2,opt,name=phone" json:"phone"`
	Captcha          string `protobuf:"bytes,3,opt,name=captcha" json:"captcha"`
	Pwd              string `protobuf:"bytes,4,opt,name=pwd" json:"pwd"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *WechatBindPhoneRequest) Reset()                    { *m = WechatBindPhoneRequest{} }
func (*WechatBindPhoneRequest) ProtoMessage()               {}
func (*WechatBindPhoneRequest) Descriptor() ([]byte, []int) { return fileDescriptorBind, []int{6} }

func (m *WechatBindPhoneRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *WechatBindPhoneRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *WechatBindPhoneRequest) GetCaptcha() string {
	if m != nil {
		return m.Captcha
	}
	return ""
}

func (m *WechatBindPhoneRequest) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

type WechatBindPhoneRespData struct {
	Pwd              string `protobuf:"bytes,1,opt,name=pwd" json:"pwd"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *WechatBindPhoneRespData) Reset()                    { *m = WechatBindPhoneRespData{} }
func (*WechatBindPhoneRespData) ProtoMessage()               {}
func (*WechatBindPhoneRespData) Descriptor() ([]byte, []int) { return fileDescriptorBind, []int{7} }

func (m *WechatBindPhoneRespData) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

type WechatBindPhoneResponse struct {
	Status           int32                   `protobuf:"varint,1,opt,name=status" json:"status"`
	Msg              string                  `protobuf:"bytes,2,opt,name=msg" json:"msg"`
	Data             WechatBindPhoneRespData `protobuf:"bytes,3,opt,name=data" json:"data"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *WechatBindPhoneResponse) Reset()                    { *m = WechatBindPhoneResponse{} }
func (*WechatBindPhoneResponse) ProtoMessage()               {}
func (*WechatBindPhoneResponse) Descriptor() ([]byte, []int) { return fileDescriptorBind, []int{8} }

func (m *WechatBindPhoneResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WechatBindPhoneResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *WechatBindPhoneResponse) GetData() WechatBindPhoneRespData {
	if m != nil {
		return m.Data
	}
	return WechatBindPhoneRespData{}
}

func init() {
	proto.RegisterType((*GuestBindWechatRequest)(nil), "pgLogin.GuestBindWechatRequest")
	proto.RegisterType((*GuestBindWechatRespData)(nil), "pgLogin.GuestBindWechatRespData")
	proto.RegisterType((*GuestBindWechatResponse)(nil), "pgLogin.GuestBindWechatResponse")
	proto.RegisterType((*GuestBindPhoneRequest)(nil), "pgLogin.GuestBindPhoneRequest")
	proto.RegisterType((*GuestBindPhoneRespData)(nil), "pgLogin.GuestBindPhoneRespData")
	proto.RegisterType((*GuestBindPhoneResponse)(nil), "pgLogin.GuestBindPhoneResponse")
	proto.RegisterType((*WechatBindPhoneRequest)(nil), "pgLogin.WechatBindPhoneRequest")
	proto.RegisterType((*WechatBindPhoneRespData)(nil), "pgLogin.WechatBindPhoneRespData")
	proto.RegisterType((*WechatBindPhoneResponse)(nil), "pgLogin.WechatBindPhoneResponse")
}
func (this *GuestBindWechatRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GuestBindWechatRequest)
	if !ok {
		that2, ok := that.(GuestBindWechatRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GuestBindWechatRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GuestBindWechatRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GuestBindWechatRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.OpenId != that1.OpenId {
		return fmt.Errorf("OpenId this(%v) Not Equal that(%v)", this.OpenId, that1.OpenId)
	}
	if this.UnionId != that1.UnionId {
		return fmt.Errorf("UnionId this(%v) Not Equal that(%v)", this.UnionId, that1.UnionId)
	}
	if this.AccessToken != that1.AccessToken {
		return fmt.Errorf("AccessToken this(%v) Not Equal that(%v)", this.AccessToken, that1.AccessToken)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GuestBindWechatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuestBindWechatRequest)
	if !ok {
		that2, ok := that.(GuestBindWechatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.OpenId != that1.OpenId {
		return false
	}
	if this.UnionId != that1.UnionId {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GuestBindWechatRespData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GuestBindWechatRespData)
	if !ok {
		that2, ok := that.(GuestBindWechatRespData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GuestBindWechatRespData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GuestBindWechatRespData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GuestBindWechatRespData but is not nil && this == nil")
	}
	if this.LoginType != that1.LoginType {
		return fmt.Errorf("LoginType this(%v) Not Equal that(%v)", this.LoginType, that1.LoginType)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GuestBindWechatRespData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuestBindWechatRespData)
	if !ok {
		that2, ok := that.(GuestBindWechatRespData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LoginType != that1.LoginType {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GuestBindWechatResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GuestBindWechatResponse)
	if !ok {
		that2, ok := that.(GuestBindWechatResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GuestBindWechatResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GuestBindWechatResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GuestBindWechatResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GuestBindWechatResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuestBindWechatResponse)
	if !ok {
		that2, ok := that.(GuestBindWechatResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GuestBindPhoneRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GuestBindPhoneRequest)
	if !ok {
		that2, ok := that.(GuestBindPhoneRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GuestBindPhoneRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GuestBindPhoneRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GuestBindPhoneRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.Phone != that1.Phone {
		return fmt.Errorf("Phone this(%v) Not Equal that(%v)", this.Phone, that1.Phone)
	}
	if this.Captcha != that1.Captcha {
		return fmt.Errorf("Captcha this(%v) Not Equal that(%v)", this.Captcha, that1.Captcha)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GuestBindPhoneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuestBindPhoneRequest)
	if !ok {
		that2, ok := that.(GuestBindPhoneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Captcha != that1.Captcha {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GuestBindPhoneRespData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GuestBindPhoneRespData)
	if !ok {
		that2, ok := that.(GuestBindPhoneRespData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GuestBindPhoneRespData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GuestBindPhoneRespData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GuestBindPhoneRespData but is not nil && this == nil")
	}
	if this.LoginType != that1.LoginType {
		return fmt.Errorf("LoginType this(%v) Not Equal that(%v)", this.LoginType, that1.LoginType)
	}
	if this.Pwd != that1.Pwd {
		return fmt.Errorf("Pwd this(%v) Not Equal that(%v)", this.Pwd, that1.Pwd)
	}
	if this.Bid != that1.Bid {
		return fmt.Errorf("Bid this(%v) Not Equal that(%v)", this.Bid, that1.Bid)
	}
	if this.AccessToken != that1.AccessToken {
		return fmt.Errorf("AccessToken this(%v) Not Equal that(%v)", this.AccessToken, that1.AccessToken)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GuestBindPhoneRespData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuestBindPhoneRespData)
	if !ok {
		that2, ok := that.(GuestBindPhoneRespData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LoginType != that1.LoginType {
		return false
	}
	if this.Pwd != that1.Pwd {
		return false
	}
	if this.Bid != that1.Bid {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GuestBindPhoneResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GuestBindPhoneResponse)
	if !ok {
		that2, ok := that.(GuestBindPhoneResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GuestBindPhoneResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GuestBindPhoneResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GuestBindPhoneResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GuestBindPhoneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuestBindPhoneResponse)
	if !ok {
		that2, ok := that.(GuestBindPhoneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *WechatBindPhoneRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*WechatBindPhoneRequest)
	if !ok {
		that2, ok := that.(WechatBindPhoneRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *WechatBindPhoneRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *WechatBindPhoneRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *WechatBindPhoneRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.Phone != that1.Phone {
		return fmt.Errorf("Phone this(%v) Not Equal that(%v)", this.Phone, that1.Phone)
	}
	if this.Captcha != that1.Captcha {
		return fmt.Errorf("Captcha this(%v) Not Equal that(%v)", this.Captcha, that1.Captcha)
	}
	if this.Pwd != that1.Pwd {
		return fmt.Errorf("Pwd this(%v) Not Equal that(%v)", this.Pwd, that1.Pwd)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *WechatBindPhoneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WechatBindPhoneRequest)
	if !ok {
		that2, ok := that.(WechatBindPhoneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Captcha != that1.Captcha {
		return false
	}
	if this.Pwd != that1.Pwd {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *WechatBindPhoneRespData) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*WechatBindPhoneRespData)
	if !ok {
		that2, ok := that.(WechatBindPhoneRespData)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *WechatBindPhoneRespData")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *WechatBindPhoneRespData but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *WechatBindPhoneRespData but is not nil && this == nil")
	}
	if this.Pwd != that1.Pwd {
		return fmt.Errorf("Pwd this(%v) Not Equal that(%v)", this.Pwd, that1.Pwd)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *WechatBindPhoneRespData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WechatBindPhoneRespData)
	if !ok {
		that2, ok := that.(WechatBindPhoneRespData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Pwd != that1.Pwd {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *WechatBindPhoneResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*WechatBindPhoneResponse)
	if !ok {
		that2, ok := that.(WechatBindPhoneResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *WechatBindPhoneResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *WechatBindPhoneResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *WechatBindPhoneResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *WechatBindPhoneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WechatBindPhoneResponse)
	if !ok {
		that2, ok := that.(WechatBindPhoneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GuestBindWechatRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pgLogin.GuestBindWechatRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "OpenId: "+fmt.Sprintf("%#v", this.OpenId)+",\n")
	s = append(s, "UnionId: "+fmt.Sprintf("%#v", this.UnionId)+",\n")
	s = append(s, "AccessToken: "+fmt.Sprintf("%#v", this.AccessToken)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GuestBindWechatRespData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgLogin.GuestBindWechatRespData{")
	s = append(s, "LoginType: "+fmt.Sprintf("%#v", this.LoginType)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GuestBindWechatResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgLogin.GuestBindWechatResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GuestBindPhoneRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgLogin.GuestBindPhoneRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Captcha: "+fmt.Sprintf("%#v", this.Captcha)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GuestBindPhoneRespData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pgLogin.GuestBindPhoneRespData{")
	s = append(s, "LoginType: "+fmt.Sprintf("%#v", this.LoginType)+",\n")
	s = append(s, "Pwd: "+fmt.Sprintf("%#v", this.Pwd)+",\n")
	s = append(s, "Bid: "+fmt.Sprintf("%#v", this.Bid)+",\n")
	s = append(s, "AccessToken: "+fmt.Sprintf("%#v", this.AccessToken)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GuestBindPhoneResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgLogin.GuestBindPhoneResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WechatBindPhoneRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pgLogin.WechatBindPhoneRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Captcha: "+fmt.Sprintf("%#v", this.Captcha)+",\n")
	s = append(s, "Pwd: "+fmt.Sprintf("%#v", this.Pwd)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WechatBindPhoneRespData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgLogin.WechatBindPhoneRespData{")
	s = append(s, "Pwd: "+fmt.Sprintf("%#v", this.Pwd)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WechatBindPhoneResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgLogin.WechatBindPhoneResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBind(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GuestBindWechatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestBindWechatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintBind(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.OpenId)))
	i += copy(dAtA[i:], m.OpenId)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.UnionId)))
	i += copy(dAtA[i:], m.UnionId)
	dAtA[i] = 0x22
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.AccessToken)))
	i += copy(dAtA[i:], m.AccessToken)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GuestBindWechatRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestBindWechatRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintBind(dAtA, i, uint64(m.LoginType))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GuestBindWechatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestBindWechatResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintBind(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintBind(dAtA, i, uint64(m.Data.Size()))
	n1, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GuestBindPhoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestBindPhoneRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintBind(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.Phone)))
	i += copy(dAtA[i:], m.Phone)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.Captcha)))
	i += copy(dAtA[i:], m.Captcha)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GuestBindPhoneRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestBindPhoneRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintBind(dAtA, i, uint64(m.LoginType))
	dAtA[i] = 0x12
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.Pwd)))
	i += copy(dAtA[i:], m.Pwd)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.Bid)))
	i += copy(dAtA[i:], m.Bid)
	dAtA[i] = 0x22
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.AccessToken)))
	i += copy(dAtA[i:], m.AccessToken)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GuestBindPhoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestBindPhoneResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintBind(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintBind(dAtA, i, uint64(m.Data.Size()))
	n2, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WechatBindPhoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WechatBindPhoneRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintBind(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.Phone)))
	i += copy(dAtA[i:], m.Phone)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.Captcha)))
	i += copy(dAtA[i:], m.Captcha)
	dAtA[i] = 0x22
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.Pwd)))
	i += copy(dAtA[i:], m.Pwd)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WechatBindPhoneRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WechatBindPhoneRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.Pwd)))
	i += copy(dAtA[i:], m.Pwd)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WechatBindPhoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WechatBindPhoneResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintBind(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintBind(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintBind(dAtA, i, uint64(m.Data.Size()))
	n3, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBind(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedGuestBindWechatRequest(r randyBind, easy bool) *GuestBindWechatRequest {
	this := &GuestBindWechatRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.OpenId = string(randStringBind(r))
	this.UnionId = string(randStringBind(r))
	this.AccessToken = string(randStringBind(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBind(r, 5)
	}
	return this
}

func NewPopulatedGuestBindWechatRespData(r randyBind, easy bool) *GuestBindWechatRespData {
	this := &GuestBindWechatRespData{}
	this.LoginType = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.LoginType *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBind(r, 2)
	}
	return this
}

func NewPopulatedGuestBindWechatResponse(r randyBind, easy bool) *GuestBindWechatResponse {
	this := &GuestBindWechatResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringBind(r))
	v1 := NewPopulatedGuestBindWechatRespData(r, easy)
	this.Data = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBind(r, 4)
	}
	return this
}

func NewPopulatedGuestBindPhoneRequest(r randyBind, easy bool) *GuestBindPhoneRequest {
	this := &GuestBindPhoneRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.Phone = string(randStringBind(r))
	this.Captcha = string(randStringBind(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBind(r, 4)
	}
	return this
}

func NewPopulatedGuestBindPhoneRespData(r randyBind, easy bool) *GuestBindPhoneRespData {
	this := &GuestBindPhoneRespData{}
	this.LoginType = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.LoginType *= -1
	}
	this.Pwd = string(randStringBind(r))
	this.Bid = string(randStringBind(r))
	this.AccessToken = string(randStringBind(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBind(r, 5)
	}
	return this
}

func NewPopulatedGuestBindPhoneResponse(r randyBind, easy bool) *GuestBindPhoneResponse {
	this := &GuestBindPhoneResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringBind(r))
	v2 := NewPopulatedGuestBindPhoneRespData(r, easy)
	this.Data = *v2
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBind(r, 4)
	}
	return this
}

func NewPopulatedWechatBindPhoneRequest(r randyBind, easy bool) *WechatBindPhoneRequest {
	this := &WechatBindPhoneRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.Phone = string(randStringBind(r))
	this.Captcha = string(randStringBind(r))
	this.Pwd = string(randStringBind(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBind(r, 5)
	}
	return this
}

func NewPopulatedWechatBindPhoneRespData(r randyBind, easy bool) *WechatBindPhoneRespData {
	this := &WechatBindPhoneRespData{}
	this.Pwd = string(randStringBind(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBind(r, 2)
	}
	return this
}

func NewPopulatedWechatBindPhoneResponse(r randyBind, easy bool) *WechatBindPhoneResponse {
	this := &WechatBindPhoneResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringBind(r))
	v3 := NewPopulatedWechatBindPhoneRespData(r, easy)
	this.Data = *v3
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBind(r, 4)
	}
	return this
}

type randyBind interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneBind(r randyBind) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringBind(r randyBind) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneBind(r)
	}
	return string(tmps)
}
func randUnrecognizedBind(r randyBind, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldBind(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldBind(dAtA []byte, r randyBind, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateBind(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateBind(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateBind(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateBind(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateBind(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateBind(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateBind(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GuestBindWechatRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovBind(uint64(m.Mid))
	l = len(m.OpenId)
	n += 1 + l + sovBind(uint64(l))
	l = len(m.UnionId)
	n += 1 + l + sovBind(uint64(l))
	l = len(m.AccessToken)
	n += 1 + l + sovBind(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuestBindWechatRespData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovBind(uint64(m.LoginType))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuestBindWechatResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovBind(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovBind(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovBind(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuestBindPhoneRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovBind(uint64(m.Mid))
	l = len(m.Phone)
	n += 1 + l + sovBind(uint64(l))
	l = len(m.Captcha)
	n += 1 + l + sovBind(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuestBindPhoneRespData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovBind(uint64(m.LoginType))
	l = len(m.Pwd)
	n += 1 + l + sovBind(uint64(l))
	l = len(m.Bid)
	n += 1 + l + sovBind(uint64(l))
	l = len(m.AccessToken)
	n += 1 + l + sovBind(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuestBindPhoneResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovBind(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovBind(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovBind(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WechatBindPhoneRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovBind(uint64(m.Mid))
	l = len(m.Phone)
	n += 1 + l + sovBind(uint64(l))
	l = len(m.Captcha)
	n += 1 + l + sovBind(uint64(l))
	l = len(m.Pwd)
	n += 1 + l + sovBind(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WechatBindPhoneRespData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pwd)
	n += 1 + l + sovBind(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WechatBindPhoneResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovBind(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovBind(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovBind(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBind(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBind(x uint64) (n int) {
	return sovBind(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GuestBindWechatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GuestBindWechatRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`OpenId:` + fmt.Sprintf("%v", this.OpenId) + `,`,
		`UnionId:` + fmt.Sprintf("%v", this.UnionId) + `,`,
		`AccessToken:` + fmt.Sprintf("%v", this.AccessToken) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GuestBindWechatRespData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GuestBindWechatRespData{`,
		`LoginType:` + fmt.Sprintf("%v", this.LoginType) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GuestBindWechatResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GuestBindWechatResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "GuestBindWechatRespData", "GuestBindWechatRespData", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GuestBindPhoneRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GuestBindPhoneRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Captcha:` + fmt.Sprintf("%v", this.Captcha) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GuestBindPhoneRespData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GuestBindPhoneRespData{`,
		`LoginType:` + fmt.Sprintf("%v", this.LoginType) + `,`,
		`Pwd:` + fmt.Sprintf("%v", this.Pwd) + `,`,
		`Bid:` + fmt.Sprintf("%v", this.Bid) + `,`,
		`AccessToken:` + fmt.Sprintf("%v", this.AccessToken) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GuestBindPhoneResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GuestBindPhoneResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "GuestBindPhoneRespData", "GuestBindPhoneRespData", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WechatBindPhoneRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WechatBindPhoneRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Captcha:` + fmt.Sprintf("%v", this.Captcha) + `,`,
		`Pwd:` + fmt.Sprintf("%v", this.Pwd) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WechatBindPhoneRespData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WechatBindPhoneRespData{`,
		`Pwd:` + fmt.Sprintf("%v", this.Pwd) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WechatBindPhoneResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WechatBindPhoneResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "WechatBindPhoneRespData", "WechatBindPhoneRespData", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBind(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GuestBindWechatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestBindWechatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestBindWechatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestBindWechatRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestBindWechatRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestBindWechatRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginType", wireType)
			}
			m.LoginType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestBindWechatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestBindWechatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestBindWechatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestBindPhoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestBindPhoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestBindPhoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captcha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Captcha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestBindPhoneRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestBindPhoneRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestBindPhoneRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginType", wireType)
			}
			m.LoginType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestBindPhoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestBindPhoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestBindPhoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WechatBindPhoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WechatBindPhoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WechatBindPhoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captcha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Captcha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WechatBindPhoneRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WechatBindPhoneRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WechatBindPhoneRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WechatBindPhoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WechatBindPhoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WechatBindPhoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBind
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBind(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBind
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBind
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBind
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBind
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBind
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBind(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBind = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBind   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("login/bind.proto", fileDescriptorBind) }

var fileDescriptorBind = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xbf, 0x6e, 0x14, 0x31,
	0x10, 0xc6, 0x33, 0xdc, 0x25, 0x47, 0x26, 0x14, 0xc8, 0x12, 0x97, 0x53, 0x04, 0xbe, 0xd3, 0x52,
	0x90, 0x02, 0xdd, 0x09, 0x44, 0x03, 0x05, 0xc5, 0x09, 0x09, 0x45, 0xa2, 0x40, 0x51, 0x24, 0xca,
	0x93, 0x6f, 0x6d, 0xf6, 0x56, 0x21, 0xb6, 0x89, 0xbd, 0xa0, 0x74, 0x14, 0x34, 0x88, 0x1e, 0x89,
	0x37, 0xe0, 0x11, 0x28, 0x29, 0x53, 0x52, 0x52, 0xa1, 0xec, 0x3e, 0x01, 0x25, 0x25, 0xb2, 0xd7,
	0xa0, 0xf5, 0xfd, 0x11, 0x20, 0x44, 0xba, 0xf5, 0x6f, 0x66, 0xbc, 0xdf, 0x7c, 0x9f, 0xf1, 0xf2,
	0x33, 0x95, 0xe5, 0x72, 0x34, 0xcd, 0x25, 0x1f, 0xea, 0x63, 0x65, 0x15, 0xe9, 0xe8, 0xec, 0x91,
	0x63, 0x3b, 0x77, 0x5e, 0x08, 0xc9, 0xd5, 0xf1, 0x28, 0xcb, 0xed, 0xac, 0x98, 0x0e, 0x53, 0x75,
	0x34, 0xca, 0x54, 0xa6, 0x46, 0xbe, 0x6d, 0x5a, 0x3c, 0xf5, 0x27, 0x7f, 0xf0, 0x5f, 0xf5, 0x78,
	0xf2, 0x1e, 0xb0, 0xfb, 0xb0, 0x10, 0xc6, 0x8e, 0x73, 0xc9, 0x9f, 0x88, 0x74, 0xc6, 0xec, 0xbe,
	0x78, 0xee, 0x00, 0xe9, 0x62, 0xeb, 0x28, 0xe7, 0x3d, 0x18, 0xc0, 0x6e, 0x6b, 0xdc, 0x3e, 0xfd,
	0xda, 0x5f, 0xdb, 0x77, 0x80, 0x5c, 0xc3, 0x8e, 0xd2, 0x42, 0x4e, 0x72, 0xde, 0xbb, 0x30, 0x80,
	0xdd, 0xcd, 0x50, 0xdb, 0x70, 0x70, 0x8f, 0x93, 0x3e, 0x5e, 0x2c, 0x64, 0xae, 0x7c, 0xbd, 0xd5,
	0xa8, 0x77, 0x3c, 0xdd, 0xe3, 0xe4, 0x06, 0x5e, 0x62, 0x69, 0x2a, 0x8c, 0x99, 0x58, 0x75, 0x28,
	0x64, 0xaf, 0xdd, 0x68, 0xda, 0xaa, 0x2b, 0x07, 0xae, 0x90, 0xdc, 0xc7, 0xed, 0x05, 0x69, 0x46,
	0x3f, 0x60, 0x96, 0x91, 0xeb, 0x88, 0xde, 0x89, 0x89, 0x3d, 0xd1, 0xc2, 0x4b, 0x5c, 0x0f, 0x37,
	0x6c, 0x7a, 0x7e, 0x70, 0xa2, 0x45, 0xf2, 0x16, 0x96, 0x5e, 0xa0, 0xa4, 0x11, 0xe4, 0x2a, 0x6e,
	0x18, 0xcb, 0x6c, 0x61, 0xa2, 0xe1, 0xc0, 0xfc, 0xea, 0x26, 0x8b, 0xd6, 0x73, 0x80, 0xdc, 0xc3,
	0x36, 0x67, 0x96, 0xf9, 0xbd, 0xb6, 0x6e, 0x0f, 0x86, 0xc1, 0xfb, 0xe1, 0x0a, 0x99, 0x61, 0xd4,
	0xcf, 0x24, 0x87, 0x78, 0xe5, 0x57, 0xdb, 0xe3, 0x99, 0x92, 0xe2, 0x77, 0x3e, 0xef, 0xe0, 0xba,
	0x76, 0x7d, 0x91, 0x8c, 0x1a, 0x11, 0x8a, 0x9d, 0x94, 0x69, 0x9b, 0xce, 0x58, 0xec, 0x71, 0x80,
	0xc9, 0xbb, 0x66, 0xac, 0xe1, 0x6f, 0x7f, 0x61, 0x9d, 0xd3, 0xa4, 0x5f, 0xc6, 0xf9, 0x3a, 0xe0,
	0xf8, 0x74, 0x2e, 0x57, 0x07, 0xfe, 0x3c, 0xd3, 0x37, 0x4b, 0x85, 0xfd, 0x43, 0x24, 0x77, 0xa3,
	0x48, 0xfa, 0x8b, 0x91, 0x44, 0xdb, 0x47, 0x89, 0xbc, 0x06, 0xec, 0xd6, 0x81, 0x9d, 0x47, 0x26,
	0x3f, 0x3d, 0x6d, 0xcf, 0x79, 0x9a, 0xdc, 0xc2, 0xed, 0x05, 0x15, 0x21, 0xab, 0x30, 0x02, 0xf3,
	0x23, 0xee, 0x65, 0x2f, 0x99, 0xf9, 0x0f, 0x2f, 0x7b, 0x85, 0xb2, 0xa6, 0x8f, 0xe3, 0x9b, 0x5f,
	0x4a, 0xba, 0x76, 0x56, 0x52, 0xf8, 0x56, 0x52, 0xf8, 0x5e, 0x52, 0x78, 0x55, 0x51, 0xf8, 0x50,
	0x51, 0xf8, 0x58, 0x51, 0xf8, 0x54, 0x51, 0x38, 0xad, 0x28, 0x7c, 0xae, 0x28, 0x9c, 0x55, 0x14,
	0x7e, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x39, 0x13, 0xf5, 0xc3, 0x04, 0x00, 0x00,
}
