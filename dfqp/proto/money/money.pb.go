// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: money/money.proto

/*
	Package pgMoney is a generated protocol buffer package.

	It is generated from these files:
		money/money.proto

	It has these top-level messages:
		UserAttr
		CoinCacheCreateRequest
		CoinCacheCreateResponse
		CoinGetUserInfoRequest
		CoinGetUserInfoResponse
*/
package pgMoney

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EUserAttr int32

const (
	EUserAttr_MONEY            EUserAttr = 1
	EUserAttr_SAFE_BOX         EUserAttr = 2
	EUserAttr_TOTAL_MONEY      EUserAttr = 3
	EUserAttr_EXP              EUserAttr = 4
	EUserAttr_LEVEL            EUserAttr = 5
	EUserAttr_WINTIMES         EUserAttr = 6
	EUserAttr_LOSTTIMES        EUserAttr = 7
	EUserAttr_BLUEDIAMOND      EUserAttr = 8
	EUserAttr_MASTERPOINTS     EUserAttr = 9
	EUserAttr_DIAMONDEXPIRED   EUserAttr = 10
	EUserAttr_SILVER           EUserAttr = 11
	EUserAttr_SILVER_SAFEBOX   EUserAttr = 12
	EUserAttr_TOTAL_SILVER     EUserAttr = 13
	EUserAttr_USERATTRSIZE_END EUserAttr = 14
)

var EUserAttr_name = map[int32]string{
	1:  "MONEY",
	2:  "SAFE_BOX",
	3:  "TOTAL_MONEY",
	4:  "EXP",
	5:  "LEVEL",
	6:  "WINTIMES",
	7:  "LOSTTIMES",
	8:  "BLUEDIAMOND",
	9:  "MASTERPOINTS",
	10: "DIAMONDEXPIRED",
	11: "SILVER",
	12: "SILVER_SAFEBOX",
	13: "TOTAL_SILVER",
	14: "USERATTRSIZE_END",
}
var EUserAttr_value = map[string]int32{
	"MONEY":            1,
	"SAFE_BOX":         2,
	"TOTAL_MONEY":      3,
	"EXP":              4,
	"LEVEL":            5,
	"WINTIMES":         6,
	"LOSTTIMES":        7,
	"BLUEDIAMOND":      8,
	"MASTERPOINTS":     9,
	"DIAMONDEXPIRED":   10,
	"SILVER":           11,
	"SILVER_SAFEBOX":   12,
	"TOTAL_SILVER":     13,
	"USERATTRSIZE_END": 14,
}

func (x EUserAttr) Enum() *EUserAttr {
	p := new(EUserAttr)
	*p = x
	return p
}
func (x EUserAttr) String() string {
	return proto.EnumName(EUserAttr_name, int32(x))
}
func (x *EUserAttr) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EUserAttr_value, data, "EUserAttr")
	if err != nil {
		return err
	}
	*x = EUserAttr(value)
	return nil
}
func (EUserAttr) EnumDescriptor() ([]byte, []int) { return fileDescriptorMoney, []int{0} }

type UserAttr struct {
	Type             int32  `protobuf:"varint,1,opt,name=type" json:"type"`
	Value            int64  `protobuf:"varint,2,opt,name=value" json:"value"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UserAttr) Reset()                    { *m = UserAttr{} }
func (*UserAttr) ProtoMessage()               {}
func (*UserAttr) Descriptor() ([]byte, []int) { return fileDescriptorMoney, []int{0} }

func (m *UserAttr) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UserAttr) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 方法名：userserver.UserServerService.PhpCreateRecord
// 添加用户资产
type CoinCacheCreateRequest struct {
	Uid              int64      `protobuf:"varint,2,opt,name=uid" json:"uid"`
	Userattr         []UserAttr `protobuf:"bytes,3,rep,name=userattr" json:"userattr"`
	Appid            string     `protobuf:"bytes,4,opt,name=appid" json:"appid"`
	Actid            int32      `protobuf:"varint,5,opt,name=actid" json:"actid"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *CoinCacheCreateRequest) Reset()                    { *m = CoinCacheCreateRequest{} }
func (*CoinCacheCreateRequest) ProtoMessage()               {}
func (*CoinCacheCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorMoney, []int{1} }

func (m *CoinCacheCreateRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CoinCacheCreateRequest) GetUserattr() []UserAttr {
	if m != nil {
		return m.Userattr
	}
	return nil
}

func (m *CoinCacheCreateRequest) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *CoinCacheCreateRequest) GetActid() int32 {
	if m != nil {
		return m.Actid
	}
	return 0
}

type CoinCacheCreateResponse struct {
	Retcode          int32      `protobuf:"varint,1,opt,name=retcode" json:"retcode"`
	AllAttrList      []UserAttr `protobuf:"bytes,2,rep,name=all_attr_list,json=allAttrList" json:"all_attr_list"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *CoinCacheCreateResponse) Reset()                    { *m = CoinCacheCreateResponse{} }
func (*CoinCacheCreateResponse) ProtoMessage()               {}
func (*CoinCacheCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorMoney, []int{2} }

func (m *CoinCacheCreateResponse) GetRetcode() int32 {
	if m != nil {
		return m.Retcode
	}
	return 0
}

func (m *CoinCacheCreateResponse) GetAllAttrList() []UserAttr {
	if m != nil {
		return m.AllAttrList
	}
	return nil
}

// 获取用户资产
// 方法名：coincache.CoinCacheService.CoinGetUserInfo
type CoinGetUserInfoRequest struct {
	Uid              int32  `protobuf:"varint,2,opt,name=uid" json:"uid"`
	GameId           int32  `protobuf:"varint,3,opt,name=game_id,json=gameId" json:"game_id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CoinGetUserInfoRequest) Reset()                    { *m = CoinGetUserInfoRequest{} }
func (*CoinGetUserInfoRequest) ProtoMessage()               {}
func (*CoinGetUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorMoney, []int{3} }

func (m *CoinGetUserInfoRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CoinGetUserInfoRequest) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

type CoinGetUserInfoResponse struct {
	Uid              int32      `protobuf:"varint,2,opt,name=uid" json:"uid"`
	GameId           int32      `protobuf:"varint,3,opt,name=game_id,json=gameId" json:"game_id"`
	Result           int32      `protobuf:"varint,4,opt,name=result" json:"result"`
	GameBuff         string     `protobuf:"bytes,6,opt,name=game_buff,json=gameBuff" json:"game_buff"`
	AttrList         []UserAttr `protobuf:"bytes,7,rep,name=attr_list,json=attrList" json:"attr_list"`
	GeneralField     string     `protobuf:"bytes,8,opt,name=general_field,json=generalField" json:"general_field"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *CoinGetUserInfoResponse) Reset()                    { *m = CoinGetUserInfoResponse{} }
func (*CoinGetUserInfoResponse) ProtoMessage()               {}
func (*CoinGetUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorMoney, []int{4} }

func (m *CoinGetUserInfoResponse) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CoinGetUserInfoResponse) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *CoinGetUserInfoResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *CoinGetUserInfoResponse) GetGameBuff() string {
	if m != nil {
		return m.GameBuff
	}
	return ""
}

func (m *CoinGetUserInfoResponse) GetAttrList() []UserAttr {
	if m != nil {
		return m.AttrList
	}
	return nil
}

func (m *CoinGetUserInfoResponse) GetGeneralField() string {
	if m != nil {
		return m.GeneralField
	}
	return ""
}

func init() {
	proto.RegisterType((*UserAttr)(nil), "pgMoney.UserAttr")
	proto.RegisterType((*CoinCacheCreateRequest)(nil), "pgMoney.CoinCacheCreateRequest")
	proto.RegisterType((*CoinCacheCreateResponse)(nil), "pgMoney.CoinCacheCreateResponse")
	proto.RegisterType((*CoinGetUserInfoRequest)(nil), "pgMoney.CoinGetUserInfoRequest")
	proto.RegisterType((*CoinGetUserInfoResponse)(nil), "pgMoney.CoinGetUserInfoResponse")
	proto.RegisterEnum("pgMoney.EUserAttr", EUserAttr_name, EUserAttr_value)
}
func (this *UserAttr) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserAttr)
	if !ok {
		that2, ok := that.(UserAttr)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserAttr")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserAttr but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserAttr but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserAttr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserAttr)
	if !ok {
		that2, ok := that.(UserAttr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CoinCacheCreateRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CoinCacheCreateRequest)
	if !ok {
		that2, ok := that.(CoinCacheCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CoinCacheCreateRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CoinCacheCreateRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CoinCacheCreateRequest but is not nil && this == nil")
	}
	if this.Uid != that1.Uid {
		return fmt.Errorf("Uid this(%v) Not Equal that(%v)", this.Uid, that1.Uid)
	}
	if len(this.Userattr) != len(that1.Userattr) {
		return fmt.Errorf("Userattr this(%v) Not Equal that(%v)", len(this.Userattr), len(that1.Userattr))
	}
	for i := range this.Userattr {
		if !this.Userattr[i].Equal(&that1.Userattr[i]) {
			return fmt.Errorf("Userattr this[%v](%v) Not Equal that[%v](%v)", i, this.Userattr[i], i, that1.Userattr[i])
		}
	}
	if this.Appid != that1.Appid {
		return fmt.Errorf("Appid this(%v) Not Equal that(%v)", this.Appid, that1.Appid)
	}
	if this.Actid != that1.Actid {
		return fmt.Errorf("Actid this(%v) Not Equal that(%v)", this.Actid, that1.Actid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CoinCacheCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoinCacheCreateRequest)
	if !ok {
		that2, ok := that.(CoinCacheCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if len(this.Userattr) != len(that1.Userattr) {
		return false
	}
	for i := range this.Userattr {
		if !this.Userattr[i].Equal(&that1.Userattr[i]) {
			return false
		}
	}
	if this.Appid != that1.Appid {
		return false
	}
	if this.Actid != that1.Actid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CoinCacheCreateResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CoinCacheCreateResponse)
	if !ok {
		that2, ok := that.(CoinCacheCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CoinCacheCreateResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CoinCacheCreateResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CoinCacheCreateResponse but is not nil && this == nil")
	}
	if this.Retcode != that1.Retcode {
		return fmt.Errorf("Retcode this(%v) Not Equal that(%v)", this.Retcode, that1.Retcode)
	}
	if len(this.AllAttrList) != len(that1.AllAttrList) {
		return fmt.Errorf("AllAttrList this(%v) Not Equal that(%v)", len(this.AllAttrList), len(that1.AllAttrList))
	}
	for i := range this.AllAttrList {
		if !this.AllAttrList[i].Equal(&that1.AllAttrList[i]) {
			return fmt.Errorf("AllAttrList this[%v](%v) Not Equal that[%v](%v)", i, this.AllAttrList[i], i, that1.AllAttrList[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CoinCacheCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoinCacheCreateResponse)
	if !ok {
		that2, ok := that.(CoinCacheCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Retcode != that1.Retcode {
		return false
	}
	if len(this.AllAttrList) != len(that1.AllAttrList) {
		return false
	}
	for i := range this.AllAttrList {
		if !this.AllAttrList[i].Equal(&that1.AllAttrList[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CoinGetUserInfoRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CoinGetUserInfoRequest)
	if !ok {
		that2, ok := that.(CoinGetUserInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CoinGetUserInfoRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CoinGetUserInfoRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CoinGetUserInfoRequest but is not nil && this == nil")
	}
	if this.Uid != that1.Uid {
		return fmt.Errorf("Uid this(%v) Not Equal that(%v)", this.Uid, that1.Uid)
	}
	if this.GameId != that1.GameId {
		return fmt.Errorf("GameId this(%v) Not Equal that(%v)", this.GameId, that1.GameId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CoinGetUserInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoinGetUserInfoRequest)
	if !ok {
		that2, ok := that.(CoinGetUserInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CoinGetUserInfoResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CoinGetUserInfoResponse)
	if !ok {
		that2, ok := that.(CoinGetUserInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CoinGetUserInfoResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CoinGetUserInfoResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CoinGetUserInfoResponse but is not nil && this == nil")
	}
	if this.Uid != that1.Uid {
		return fmt.Errorf("Uid this(%v) Not Equal that(%v)", this.Uid, that1.Uid)
	}
	if this.GameId != that1.GameId {
		return fmt.Errorf("GameId this(%v) Not Equal that(%v)", this.GameId, that1.GameId)
	}
	if this.Result != that1.Result {
		return fmt.Errorf("Result this(%v) Not Equal that(%v)", this.Result, that1.Result)
	}
	if this.GameBuff != that1.GameBuff {
		return fmt.Errorf("GameBuff this(%v) Not Equal that(%v)", this.GameBuff, that1.GameBuff)
	}
	if len(this.AttrList) != len(that1.AttrList) {
		return fmt.Errorf("AttrList this(%v) Not Equal that(%v)", len(this.AttrList), len(that1.AttrList))
	}
	for i := range this.AttrList {
		if !this.AttrList[i].Equal(&that1.AttrList[i]) {
			return fmt.Errorf("AttrList this[%v](%v) Not Equal that[%v](%v)", i, this.AttrList[i], i, that1.AttrList[i])
		}
	}
	if this.GeneralField != that1.GeneralField {
		return fmt.Errorf("GeneralField this(%v) Not Equal that(%v)", this.GeneralField, that1.GeneralField)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CoinGetUserInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoinGetUserInfoResponse)
	if !ok {
		that2, ok := that.(CoinGetUserInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.GameBuff != that1.GameBuff {
		return false
	}
	if len(this.AttrList) != len(that1.AttrList) {
		return false
	}
	for i := range this.AttrList {
		if !this.AttrList[i].Equal(&that1.AttrList[i]) {
			return false
		}
	}
	if this.GeneralField != that1.GeneralField {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserAttr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgMoney.UserAttr{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CoinCacheCreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pgMoney.CoinCacheCreateRequest{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Userattr != nil {
		vs := make([]*UserAttr, len(this.Userattr))
		for i := range vs {
			vs[i] = &this.Userattr[i]
		}
		s = append(s, "Userattr: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "Appid: "+fmt.Sprintf("%#v", this.Appid)+",\n")
	s = append(s, "Actid: "+fmt.Sprintf("%#v", this.Actid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CoinCacheCreateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgMoney.CoinCacheCreateResponse{")
	s = append(s, "Retcode: "+fmt.Sprintf("%#v", this.Retcode)+",\n")
	if this.AllAttrList != nil {
		vs := make([]*UserAttr, len(this.AllAttrList))
		for i := range vs {
			vs[i] = &this.AllAttrList[i]
		}
		s = append(s, "AllAttrList: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CoinGetUserInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pgMoney.CoinGetUserInfoRequest{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "GameId: "+fmt.Sprintf("%#v", this.GameId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CoinGetUserInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pgMoney.CoinGetUserInfoResponse{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "GameId: "+fmt.Sprintf("%#v", this.GameId)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "GameBuff: "+fmt.Sprintf("%#v", this.GameBuff)+",\n")
	if this.AttrList != nil {
		vs := make([]*UserAttr, len(this.AttrList))
		for i := range vs {
			vs[i] = &this.AttrList[i]
		}
		s = append(s, "AttrList: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "GeneralField: "+fmt.Sprintf("%#v", this.GeneralField)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMoney(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UserAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAttr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMoney(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	i = encodeVarintMoney(dAtA, i, uint64(m.Value))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinCacheCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinCacheCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x10
	i++
	i = encodeVarintMoney(dAtA, i, uint64(m.Uid))
	if len(m.Userattr) > 0 {
		for _, msg := range m.Userattr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMoney(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintMoney(dAtA, i, uint64(len(m.Appid)))
	i += copy(dAtA[i:], m.Appid)
	dAtA[i] = 0x28
	i++
	i = encodeVarintMoney(dAtA, i, uint64(m.Actid))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinCacheCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinCacheCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintMoney(dAtA, i, uint64(m.Retcode))
	if len(m.AllAttrList) > 0 {
		for _, msg := range m.AllAttrList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMoney(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinGetUserInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinGetUserInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x10
	i++
	i = encodeVarintMoney(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMoney(dAtA, i, uint64(m.GameId))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinGetUserInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinGetUserInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x10
	i++
	i = encodeVarintMoney(dAtA, i, uint64(m.Uid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintMoney(dAtA, i, uint64(m.GameId))
	dAtA[i] = 0x20
	i++
	i = encodeVarintMoney(dAtA, i, uint64(m.Result))
	dAtA[i] = 0x32
	i++
	i = encodeVarintMoney(dAtA, i, uint64(len(m.GameBuff)))
	i += copy(dAtA[i:], m.GameBuff)
	if len(m.AttrList) > 0 {
		for _, msg := range m.AttrList {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintMoney(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintMoney(dAtA, i, uint64(len(m.GeneralField)))
	i += copy(dAtA[i:], m.GeneralField)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMoney(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUserAttr(r randyMoney, easy bool) *UserAttr {
	this := &UserAttr{}
	this.Type = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Type *= -1
	}
	this.Value = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Value *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMoney(r, 3)
	}
	return this
}

func NewPopulatedCoinCacheCreateRequest(r randyMoney, easy bool) *CoinCacheCreateRequest {
	this := &CoinCacheCreateRequest{}
	this.Uid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Uid *= -1
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Userattr = make([]UserAttr, v1)
		for i := 0; i < v1; i++ {
			v2 := NewPopulatedUserAttr(r, easy)
			this.Userattr[i] = *v2
		}
	}
	this.Appid = string(randStringMoney(r))
	this.Actid = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Actid *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMoney(r, 6)
	}
	return this
}

func NewPopulatedCoinCacheCreateResponse(r randyMoney, easy bool) *CoinCacheCreateResponse {
	this := &CoinCacheCreateResponse{}
	this.Retcode = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Retcode *= -1
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.AllAttrList = make([]UserAttr, v3)
		for i := 0; i < v3; i++ {
			v4 := NewPopulatedUserAttr(r, easy)
			this.AllAttrList[i] = *v4
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMoney(r, 3)
	}
	return this
}

func NewPopulatedCoinGetUserInfoRequest(r randyMoney, easy bool) *CoinGetUserInfoRequest {
	this := &CoinGetUserInfoRequest{}
	this.Uid = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Uid *= -1
	}
	this.GameId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.GameId *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMoney(r, 4)
	}
	return this
}

func NewPopulatedCoinGetUserInfoResponse(r randyMoney, easy bool) *CoinGetUserInfoResponse {
	this := &CoinGetUserInfoResponse{}
	this.Uid = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Uid *= -1
	}
	this.GameId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.GameId *= -1
	}
	this.Result = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Result *= -1
	}
	this.GameBuff = string(randStringMoney(r))
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.AttrList = make([]UserAttr, v5)
		for i := 0; i < v5; i++ {
			v6 := NewPopulatedUserAttr(r, easy)
			this.AttrList[i] = *v6
		}
	}
	this.GeneralField = string(randStringMoney(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMoney(r, 9)
	}
	return this
}

type randyMoney interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMoney(r randyMoney) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMoney(r randyMoney) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneMoney(r)
	}
	return string(tmps)
}
func randUnrecognizedMoney(r randyMoney, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMoney(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMoney(dAtA []byte, r randyMoney, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMoney(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateMoney(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateMoney(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMoney(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMoney(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMoney(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMoney(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UserAttr) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMoney(uint64(m.Type))
	n += 1 + sovMoney(uint64(m.Value))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinCacheCreateRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMoney(uint64(m.Uid))
	if len(m.Userattr) > 0 {
		for _, e := range m.Userattr {
			l = e.Size()
			n += 1 + l + sovMoney(uint64(l))
		}
	}
	l = len(m.Appid)
	n += 1 + l + sovMoney(uint64(l))
	n += 1 + sovMoney(uint64(m.Actid))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinCacheCreateResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMoney(uint64(m.Retcode))
	if len(m.AllAttrList) > 0 {
		for _, e := range m.AllAttrList {
			l = e.Size()
			n += 1 + l + sovMoney(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinGetUserInfoRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMoney(uint64(m.Uid))
	n += 1 + sovMoney(uint64(m.GameId))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinGetUserInfoResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMoney(uint64(m.Uid))
	n += 1 + sovMoney(uint64(m.GameId))
	n += 1 + sovMoney(uint64(m.Result))
	l = len(m.GameBuff)
	n += 1 + l + sovMoney(uint64(l))
	if len(m.AttrList) > 0 {
		for _, e := range m.AttrList {
			l = e.Size()
			n += 1 + l + sovMoney(uint64(l))
		}
	}
	l = len(m.GeneralField)
	n += 1 + l + sovMoney(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMoney(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMoney(x uint64) (n int) {
	return sovMoney(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserAttr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserAttr{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CoinCacheCreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CoinCacheCreateRequest{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Userattr:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Userattr), "UserAttr", "UserAttr", 1), `&`, ``, 1) + `,`,
		`Appid:` + fmt.Sprintf("%v", this.Appid) + `,`,
		`Actid:` + fmt.Sprintf("%v", this.Actid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CoinCacheCreateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CoinCacheCreateResponse{`,
		`Retcode:` + fmt.Sprintf("%v", this.Retcode) + `,`,
		`AllAttrList:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.AllAttrList), "UserAttr", "UserAttr", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CoinGetUserInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CoinGetUserInfoRequest{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`GameId:` + fmt.Sprintf("%v", this.GameId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CoinGetUserInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CoinGetUserInfoResponse{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`GameId:` + fmt.Sprintf("%v", this.GameId) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`GameBuff:` + fmt.Sprintf("%v", this.GameBuff) + `,`,
		`AttrList:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.AttrList), "UserAttr", "UserAttr", 1), `&`, ``, 1) + `,`,
		`GeneralField:` + fmt.Sprintf("%v", this.GeneralField) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMoney(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoney
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoney(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoney
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinCacheCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoney
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinCacheCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinCacheCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userattr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoney
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userattr = append(m.Userattr, UserAttr{})
			if err := m.Userattr[len(m.Userattr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMoney
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actid", wireType)
			}
			m.Actid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Actid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoney(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoney
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinCacheCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoney
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinCacheCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinCacheCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retcode", wireType)
			}
			m.Retcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retcode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllAttrList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoney
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllAttrList = append(m.AllAttrList, UserAttr{})
			if err := m.AllAttrList[len(m.AllAttrList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoney(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoney
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinGetUserInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoney
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinGetUserInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinGetUserInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoney(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoney
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinGetUserInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoney
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinGetUserInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinGetUserInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameBuff", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMoney
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameBuff = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoney
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttrList = append(m.AttrList, UserAttr{})
			if err := m.AttrList[len(m.AttrList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneralField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMoney
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeneralField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoney(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoney
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMoney(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMoney
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoney
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMoney
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMoney
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMoney(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMoney = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMoney   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("money/money.proto", fileDescriptorMoney) }

var fileDescriptorMoney = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x3d, 0x6f, 0xd3, 0x50,
	0x14, 0xed, 0xab, 0xf3, 0xe5, 0x9b, 0xa4, 0xb8, 0x4f, 0xa8, 0x58, 0x15, 0x98, 0x90, 0x29, 0x20,
	0x94, 0x48, 0xd0, 0x8d, 0x85, 0xa4, 0x79, 0x45, 0x96, 0x9c, 0xb8, 0xb2, 0xdd, 0x52, 0x58, 0x2c,
	0x37, 0x7e, 0x4e, 0x2d, 0xb9, 0xb1, 0xb1, 0x9f, 0x2b, 0x75, 0xe3, 0x8f, 0xb0, 0xf3, 0x13, 0x18,
	0x19, 0x3b, 0x32, 0x32, 0xa1, 0xc6, 0x12, 0x3b, 0x62, 0x62, 0x44, 0xcf, 0x76, 0x4b, 0x2a, 0x10,
	0x48, 0x2c, 0xd6, 0xbd, 0xe7, 0xdc, 0x7b, 0x7c, 0xee, 0xb1, 0x61, 0xf3, 0x34, 0x5c, 0xd0, 0xf3,
	0x41, 0xfe, 0xec, 0x47, 0x71, 0xc8, 0x42, 0x5c, 0x8f, 0xe6, 0x13, 0xde, 0x6e, 0xef, 0x9c, 0xd1,
	0x85, 0x1b, 0xc6, 0x83, 0xb9, 0xcf, 0x4e, 0xd2, 0xe3, 0xfe, 0x2c, 0x3c, 0x1d, 0xcc, 0xc3, 0x79,
	0x38, 0xc8, 0xc7, 0x8e, 0x53, 0x2f, 0xef, 0xf2, 0x26, 0xaf, 0x8a, 0xf5, 0xee, 0x73, 0x68, 0x1c,
	0x24, 0x34, 0x1e, 0x32, 0x16, 0x63, 0x19, 0x2a, 0xec, 0x3c, 0xa2, 0x32, 0xea, 0xa0, 0x5e, 0x75,
	0x54, 0xb9, 0xf8, 0x72, 0x7f, 0xcd, 0xc8, 0x11, 0xbc, 0x0d, 0xd5, 0x33, 0x27, 0x48, 0xa9, 0xbc,
	0xde, 0x41, 0x3d, 0xa1, 0xa4, 0x0a, 0xa8, 0xfb, 0x0e, 0xc1, 0xd6, 0x6e, 0xe8, 0x2f, 0x76, 0x9d,
	0xd9, 0x09, 0xdd, 0x8d, 0xa9, 0xc3, 0xa8, 0x41, 0xdf, 0xa4, 0x34, 0x61, 0x78, 0x0b, 0x84, 0xd4,
	0x77, 0x6f, 0x2c, 0x71, 0x00, 0x3f, 0x85, 0x46, 0x9a, 0xd0, 0xd8, 0x61, 0x2c, 0x96, 0x85, 0x8e,
	0xd0, 0x6b, 0x3e, 0xd9, 0xec, 0x97, 0x67, 0xf4, 0xaf, 0xdc, 0x94, 0xf3, 0xd7, 0x83, 0xdc, 0x83,
	0x13, 0x45, 0xbe, 0x2b, 0x57, 0x3a, 0xa8, 0x27, 0x5e, 0x79, 0xc8, 0xa1, 0x9c, 0x9b, 0x31, 0xdf,
	0x95, 0xab, 0x2b, 0xd6, 0x0b, 0xa8, 0x7b, 0x06, 0x77, 0x7e, 0xb3, 0x97, 0x44, 0xe1, 0x22, 0xa1,
	0x58, 0x81, 0x7a, 0x4c, 0xd9, 0x2c, 0x74, 0x6f, 0xde, 0x7c, 0x05, 0xe2, 0x67, 0xd0, 0x76, 0x82,
	0xc0, 0xe6, 0xaf, 0xb7, 0x03, 0x3f, 0x61, 0xf2, 0xfa, 0xdf, 0xcd, 0x36, 0x9d, 0x20, 0xe0, 0xad,
	0xe6, 0x27, 0xac, 0xab, 0x17, 0xb1, 0xbc, 0xa0, 0x8c, 0x4f, 0xa9, 0x0b, 0x2f, 0xfc, 0x43, 0x2c,
	0xd5, 0xd5, 0x58, 0xee, 0x41, 0x7d, 0xee, 0x9c, 0x52, 0xdb, 0x77, 0x65, 0x61, 0x85, 0xab, 0x71,
	0x50, 0x75, 0xbb, 0xdf, 0x51, 0x71, 0xc9, 0x0d, 0xc5, 0xf2, 0x92, 0xff, 0x93, 0xc4, 0x77, 0xa1,
	0x16, 0xd3, 0x24, 0x0d, 0x58, 0x1e, 0xea, 0x35, 0x5b, 0x60, 0xf8, 0x01, 0x88, 0xf9, 0xf2, 0x71,
	0xea, 0x79, 0x72, 0x6d, 0x25, 0xf5, 0x06, 0x87, 0x47, 0xa9, 0xe7, 0xe1, 0x1d, 0x10, 0x7f, 0xa5,
	0x53, 0xff, 0xc7, 0xa7, 0x74, 0xca, 0x68, 0xf0, 0x43, 0x68, 0xcf, 0xe9, 0x82, 0xc6, 0x4e, 0x60,
	0x7b, 0x3e, 0x0d, 0x5c, 0xb9, 0xb1, 0x22, 0xde, 0x2a, 0xa9, 0x3d, 0xce, 0x3c, 0xfa, 0x8a, 0x40,
	0x24, 0xd7, 0x7f, 0xa8, 0x08, 0xd5, 0x89, 0x3e, 0x25, 0xaf, 0x24, 0x84, 0x5b, 0xd0, 0x30, 0x87,
	0x7b, 0xc4, 0x1e, 0xe9, 0x47, 0xd2, 0x3a, 0xbe, 0x05, 0x4d, 0x4b, 0xb7, 0x86, 0x9a, 0x5d, 0xd0,
	0x02, 0xae, 0x83, 0x40, 0x8e, 0xf6, 0xa5, 0x0a, 0x5f, 0xd1, 0xc8, 0x21, 0xd1, 0xa4, 0x2a, 0x5f,
	0x79, 0xa9, 0x4e, 0x2d, 0x75, 0x42, 0x4c, 0xa9, 0x86, 0xdb, 0x20, 0x6a, 0xba, 0x69, 0x15, 0x6d,
	0x9d, 0x2b, 0x8c, 0xb4, 0x03, 0x32, 0x56, 0x87, 0x13, 0x7d, 0x3a, 0x96, 0x1a, 0x58, 0x82, 0xd6,
	0x64, 0x68, 0x5a, 0xc4, 0xd8, 0xd7, 0xd5, 0xa9, 0x65, 0x4a, 0x22, 0xc6, 0xb0, 0x51, 0xd2, 0xe4,
	0x68, 0x5f, 0x35, 0xc8, 0x58, 0x02, 0x0c, 0x50, 0x33, 0x55, 0xed, 0x90, 0x18, 0x52, 0x93, 0xf3,
	0x45, 0x6d, 0x73, 0x67, 0xdc, 0x58, 0x8b, 0xab, 0x14, 0xc6, 0xca, 0xa9, 0x36, 0xbe, 0x0d, 0xd2,
	0x81, 0x49, 0x8c, 0xa1, 0x65, 0x19, 0xa6, 0xfa, 0x9a, 0xd8, 0x64, 0x3a, 0x96, 0x36, 0x46, 0x8f,
	0x3f, 0x2f, 0x95, 0xb5, 0xcb, 0xa5, 0x82, 0xbe, 0x2d, 0x15, 0xf4, 0x63, 0xa9, 0xa0, 0xb7, 0x99,
	0x82, 0xde, 0x67, 0x0a, 0xfa, 0x90, 0x29, 0xe8, 0x63, 0xa6, 0xa0, 0x8b, 0x4c, 0x41, 0x9f, 0x32,
	0x05, 0x5d, 0x66, 0x0a, 0xfa, 0x19, 0x00, 0x00, 0xff, 0xff, 0x81, 0x35, 0x46, 0xe7, 0x08, 0x04,
	0x00, 0x00,
}
