// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: devices.proto

/*
	Package Report is a generated protocol buffer package.

	It is generated from these files:
		devices.proto

	It has these top-level messages:
		CommonRequest
		DevicesRequest
		DevicesResponse
*/
package Report

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CommonRequest struct {
	XSpecialFlag_    int32  `protobuf:"varint,1,opt,name=_specialFlag_,json=SpecialFlag" json:"_specialFlag_"`
	XSpecialString_  string `protobuf:"bytes,2,opt,name=_specialString_,json=SpecialString" json:"_specialString_"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CommonRequest) Reset()                    { *m = CommonRequest{} }
func (*CommonRequest) ProtoMessage()               {}
func (*CommonRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevices, []int{0} }

func (m *CommonRequest) GetXSpecialFlag_() int32 {
	if m != nil {
		return m.XSpecialFlag_
	}
	return 0
}

func (m *CommonRequest) GetXSpecialString_() string {
	if m != nil {
		return m.XSpecialString_
	}
	return ""
}

type DevicesRequest struct {
	Platform           string `protobuf:"bytes,1,opt,name=platform" json:"platform"`
	Osversion          string `protobuf:"bytes,2,opt,name=osversion" json:"osversion"`
	DeviceId           string `protobuf:"bytes,3,opt,name=deviceId" json:"deviceId"`
	Identifier         string `protobuf:"bytes,4,opt,name=identifier" json:"identifier"`
	Brand              string `protobuf:"bytes,5,opt,name=brand" json:"brand"`
	BundleVersion      string `protobuf:"bytes,6,opt,name=bundleVersion" json:"bundleVersion"`
	BundleShortVersion string `protobuf:"bytes,7,opt,name=bundleShortVersion" json:"bundleShortVersion"`
	SerialId           string `protobuf:"bytes,8,opt,name=serialId" json:"serialId"`
	DeviceName         string `protobuf:"bytes,9,opt,name=deviceName" json:"deviceName"`
	Model              string `protobuf:"bytes,10,opt,name=model" json:"model"`
	Manufacturer       string `protobuf:"bytes,11,opt,name=manufacturer" json:"manufacturer"`
	Locale             string `protobuf:"bytes,12,opt,name=locale" json:"locale"`
	Countrt            string `protobuf:"bytes,13,opt,name=countrt" json:"countrt"`
	Timezone           string `protobuf:"bytes,14,opt,name=timezone" json:"timezone"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *DevicesRequest) Reset()                    { *m = DevicesRequest{} }
func (*DevicesRequest) ProtoMessage()               {}
func (*DevicesRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevices, []int{1} }

func (m *DevicesRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *DevicesRequest) GetOsversion() string {
	if m != nil {
		return m.Osversion
	}
	return ""
}

func (m *DevicesRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DevicesRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *DevicesRequest) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *DevicesRequest) GetBundleVersion() string {
	if m != nil {
		return m.BundleVersion
	}
	return ""
}

func (m *DevicesRequest) GetBundleShortVersion() string {
	if m != nil {
		return m.BundleShortVersion
	}
	return ""
}

func (m *DevicesRequest) GetSerialId() string {
	if m != nil {
		return m.SerialId
	}
	return ""
}

func (m *DevicesRequest) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *DevicesRequest) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *DevicesRequest) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *DevicesRequest) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *DevicesRequest) GetCountrt() string {
	if m != nil {
		return m.Countrt
	}
	return ""
}

func (m *DevicesRequest) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

type DevicesResponse struct {
	Result           string `protobuf:"bytes,1,opt,name=result" json:"result"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DevicesResponse) Reset()                    { *m = DevicesResponse{} }
func (*DevicesResponse) ProtoMessage()               {}
func (*DevicesResponse) Descriptor() ([]byte, []int) { return fileDescriptorDevices, []int{2} }

func (m *DevicesResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*CommonRequest)(nil), "Report.CommonRequest")
	proto.RegisterType((*DevicesRequest)(nil), "Report.DevicesRequest")
	proto.RegisterType((*DevicesResponse)(nil), "Report.DevicesResponse")
}
func (this *CommonRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CommonRequest)
	if !ok {
		that2, ok := that.(CommonRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CommonRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CommonRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CommonRequest but is not nil && this == nil")
	}
	if this.XSpecialFlag_ != that1.XSpecialFlag_ {
		return fmt.Errorf("XSpecialFlag_ this(%v) Not Equal that(%v)", this.XSpecialFlag_, that1.XSpecialFlag_)
	}
	if this.XSpecialString_ != that1.XSpecialString_ {
		return fmt.Errorf("XSpecialString_ this(%v) Not Equal that(%v)", this.XSpecialString_, that1.XSpecialString_)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CommonRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommonRequest)
	if !ok {
		that2, ok := that.(CommonRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.XSpecialFlag_ != that1.XSpecialFlag_ {
		return false
	}
	if this.XSpecialString_ != that1.XSpecialString_ {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DevicesRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DevicesRequest)
	if !ok {
		that2, ok := that.(DevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DevicesRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DevicesRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DevicesRequest but is not nil && this == nil")
	}
	if this.Platform != that1.Platform {
		return fmt.Errorf("Platform this(%v) Not Equal that(%v)", this.Platform, that1.Platform)
	}
	if this.Osversion != that1.Osversion {
		return fmt.Errorf("Osversion this(%v) Not Equal that(%v)", this.Osversion, that1.Osversion)
	}
	if this.DeviceId != that1.DeviceId {
		return fmt.Errorf("DeviceId this(%v) Not Equal that(%v)", this.DeviceId, that1.DeviceId)
	}
	if this.Identifier != that1.Identifier {
		return fmt.Errorf("Identifier this(%v) Not Equal that(%v)", this.Identifier, that1.Identifier)
	}
	if this.Brand != that1.Brand {
		return fmt.Errorf("Brand this(%v) Not Equal that(%v)", this.Brand, that1.Brand)
	}
	if this.BundleVersion != that1.BundleVersion {
		return fmt.Errorf("BundleVersion this(%v) Not Equal that(%v)", this.BundleVersion, that1.BundleVersion)
	}
	if this.BundleShortVersion != that1.BundleShortVersion {
		return fmt.Errorf("BundleShortVersion this(%v) Not Equal that(%v)", this.BundleShortVersion, that1.BundleShortVersion)
	}
	if this.SerialId != that1.SerialId {
		return fmt.Errorf("SerialId this(%v) Not Equal that(%v)", this.SerialId, that1.SerialId)
	}
	if this.DeviceName != that1.DeviceName {
		return fmt.Errorf("DeviceName this(%v) Not Equal that(%v)", this.DeviceName, that1.DeviceName)
	}
	if this.Model != that1.Model {
		return fmt.Errorf("Model this(%v) Not Equal that(%v)", this.Model, that1.Model)
	}
	if this.Manufacturer != that1.Manufacturer {
		return fmt.Errorf("Manufacturer this(%v) Not Equal that(%v)", this.Manufacturer, that1.Manufacturer)
	}
	if this.Locale != that1.Locale {
		return fmt.Errorf("Locale this(%v) Not Equal that(%v)", this.Locale, that1.Locale)
	}
	if this.Countrt != that1.Countrt {
		return fmt.Errorf("Countrt this(%v) Not Equal that(%v)", this.Countrt, that1.Countrt)
	}
	if this.Timezone != that1.Timezone {
		return fmt.Errorf("Timezone this(%v) Not Equal that(%v)", this.Timezone, that1.Timezone)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DevicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DevicesRequest)
	if !ok {
		that2, ok := that.(DevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.Osversion != that1.Osversion {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if this.Identifier != that1.Identifier {
		return false
	}
	if this.Brand != that1.Brand {
		return false
	}
	if this.BundleVersion != that1.BundleVersion {
		return false
	}
	if this.BundleShortVersion != that1.BundleShortVersion {
		return false
	}
	if this.SerialId != that1.SerialId {
		return false
	}
	if this.DeviceName != that1.DeviceName {
		return false
	}
	if this.Model != that1.Model {
		return false
	}
	if this.Manufacturer != that1.Manufacturer {
		return false
	}
	if this.Locale != that1.Locale {
		return false
	}
	if this.Countrt != that1.Countrt {
		return false
	}
	if this.Timezone != that1.Timezone {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DevicesResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DevicesResponse)
	if !ok {
		that2, ok := that.(DevicesResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DevicesResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DevicesResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DevicesResponse but is not nil && this == nil")
	}
	if this.Result != that1.Result {
		return fmt.Errorf("Result this(%v) Not Equal that(%v)", this.Result, that1.Result)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DevicesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DevicesResponse)
	if !ok {
		that2, ok := that.(DevicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CommonRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&Report.CommonRequest{")
	s = append(s, "XSpecialFlag_: "+fmt.Sprintf("%#v", this.XSpecialFlag_)+",\n")
	s = append(s, "XSpecialString_: "+fmt.Sprintf("%#v", this.XSpecialString_)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DevicesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&Report.DevicesRequest{")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "Osversion: "+fmt.Sprintf("%#v", this.Osversion)+",\n")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	s = append(s, "Brand: "+fmt.Sprintf("%#v", this.Brand)+",\n")
	s = append(s, "BundleVersion: "+fmt.Sprintf("%#v", this.BundleVersion)+",\n")
	s = append(s, "BundleShortVersion: "+fmt.Sprintf("%#v", this.BundleShortVersion)+",\n")
	s = append(s, "SerialId: "+fmt.Sprintf("%#v", this.SerialId)+",\n")
	s = append(s, "DeviceName: "+fmt.Sprintf("%#v", this.DeviceName)+",\n")
	s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	s = append(s, "Manufacturer: "+fmt.Sprintf("%#v", this.Manufacturer)+",\n")
	s = append(s, "Locale: "+fmt.Sprintf("%#v", this.Locale)+",\n")
	s = append(s, "Countrt: "+fmt.Sprintf("%#v", this.Countrt)+",\n")
	s = append(s, "Timezone: "+fmt.Sprintf("%#v", this.Timezone)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DevicesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&Report.DevicesResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDevices(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CommonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintDevices(dAtA, i, uint64(m.XSpecialFlag_))
	dAtA[i] = 0x12
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.XSpecialString_)))
	i += copy(dAtA[i:], m.XSpecialString_)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.Platform)))
	i += copy(dAtA[i:], m.Platform)
	dAtA[i] = 0x12
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.Osversion)))
	i += copy(dAtA[i:], m.Osversion)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceId)))
	i += copy(dAtA[i:], m.DeviceId)
	dAtA[i] = 0x22
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.Identifier)))
	i += copy(dAtA[i:], m.Identifier)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.Brand)))
	i += copy(dAtA[i:], m.Brand)
	dAtA[i] = 0x32
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.BundleVersion)))
	i += copy(dAtA[i:], m.BundleVersion)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.BundleShortVersion)))
	i += copy(dAtA[i:], m.BundleShortVersion)
	dAtA[i] = 0x42
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.SerialId)))
	i += copy(dAtA[i:], m.SerialId)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceName)))
	i += copy(dAtA[i:], m.DeviceName)
	dAtA[i] = 0x52
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.Model)))
	i += copy(dAtA[i:], m.Model)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.Manufacturer)))
	i += copy(dAtA[i:], m.Manufacturer)
	dAtA[i] = 0x62
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.Locale)))
	i += copy(dAtA[i:], m.Locale)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.Countrt)))
	i += copy(dAtA[i:], m.Countrt)
	dAtA[i] = 0x72
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.Timezone)))
	i += copy(dAtA[i:], m.Timezone)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DevicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDevices(dAtA, i, uint64(len(m.Result)))
	i += copy(dAtA[i:], m.Result)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDevices(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedCommonRequest(r randyDevices, easy bool) *CommonRequest {
	this := &CommonRequest{}
	this.XSpecialFlag_ = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.XSpecialFlag_ *= -1
	}
	this.XSpecialString_ = string(randStringDevices(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDevices(r, 3)
	}
	return this
}

func NewPopulatedDevicesRequest(r randyDevices, easy bool) *DevicesRequest {
	this := &DevicesRequest{}
	this.Platform = string(randStringDevices(r))
	this.Osversion = string(randStringDevices(r))
	this.DeviceId = string(randStringDevices(r))
	this.Identifier = string(randStringDevices(r))
	this.Brand = string(randStringDevices(r))
	this.BundleVersion = string(randStringDevices(r))
	this.BundleShortVersion = string(randStringDevices(r))
	this.SerialId = string(randStringDevices(r))
	this.DeviceName = string(randStringDevices(r))
	this.Model = string(randStringDevices(r))
	this.Manufacturer = string(randStringDevices(r))
	this.Locale = string(randStringDevices(r))
	this.Countrt = string(randStringDevices(r))
	this.Timezone = string(randStringDevices(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDevices(r, 15)
	}
	return this
}

func NewPopulatedDevicesResponse(r randyDevices, easy bool) *DevicesResponse {
	this := &DevicesResponse{}
	this.Result = string(randStringDevices(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDevices(r, 2)
	}
	return this
}

type randyDevices interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDevices(r randyDevices) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDevices(r randyDevices) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneDevices(r)
	}
	return string(tmps)
}
func randUnrecognizedDevices(r randyDevices, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDevices(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDevices(dAtA []byte, r randyDevices, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDevices(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateDevices(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateDevices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDevices(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDevices(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDevices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDevices(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CommonRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovDevices(uint64(m.XSpecialFlag_))
	l = len(m.XSpecialString_)
	n += 1 + l + sovDevices(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DevicesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Platform)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.Osversion)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.DeviceId)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.Identifier)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.Brand)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.BundleVersion)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.BundleShortVersion)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.SerialId)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.DeviceName)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.Model)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.Manufacturer)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.Locale)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.Countrt)
	n += 1 + l + sovDevices(uint64(l))
	l = len(m.Timezone)
	n += 1 + l + sovDevices(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DevicesResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	n += 1 + l + sovDevices(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDevices(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDevices(x uint64) (n int) {
	return sovDevices(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CommonRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommonRequest{`,
		`XSpecialFlag_:` + fmt.Sprintf("%v", this.XSpecialFlag_) + `,`,
		`XSpecialString_:` + fmt.Sprintf("%v", this.XSpecialString_) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevicesRequest{`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Osversion:` + fmt.Sprintf("%v", this.Osversion) + `,`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`Brand:` + fmt.Sprintf("%v", this.Brand) + `,`,
		`BundleVersion:` + fmt.Sprintf("%v", this.BundleVersion) + `,`,
		`BundleShortVersion:` + fmt.Sprintf("%v", this.BundleShortVersion) + `,`,
		`SerialId:` + fmt.Sprintf("%v", this.SerialId) + `,`,
		`DeviceName:` + fmt.Sprintf("%v", this.DeviceName) + `,`,
		`Model:` + fmt.Sprintf("%v", this.Model) + `,`,
		`Manufacturer:` + fmt.Sprintf("%v", this.Manufacturer) + `,`,
		`Locale:` + fmt.Sprintf("%v", this.Locale) + `,`,
		`Countrt:` + fmt.Sprintf("%v", this.Countrt) + `,`,
		`Timezone:` + fmt.Sprintf("%v", this.Timezone) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevicesResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDevices(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CommonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XSpecialFlag_", wireType)
			}
			m.XSpecialFlag_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XSpecialFlag_ |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XSpecialString_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XSpecialString_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Osversion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Osversion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleShortVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleShortVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manufacturer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manufacturer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Countrt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Countrt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDevices
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDevices
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDevices(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDevices = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevices   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("devices.proto", fileDescriptorDevices) }

var fileDescriptorDevices = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xb1, 0x6e, 0xdb, 0x3a,
	0x14, 0x86, 0xc3, 0x7b, 0x6d, 0x27, 0x3e, 0x89, 0x12, 0x80, 0x13, 0x11, 0x14, 0xac, 0x61, 0x74,
	0x30, 0x8a, 0x34, 0x5e, 0xfa, 0x04, 0x69, 0x51, 0x20, 0x4b, 0x07, 0x1b, 0xe8, 0x6a, 0xd0, 0xd2,
	0xb1, 0x42, 0x80, 0xe2, 0x51, 0x49, 0x2a, 0x43, 0xa7, 0xce, 0x7d, 0x92, 0x3e, 0x42, 0xc7, 0x8e,
	0x19, 0x3b, 0x76, 0x2a, 0x62, 0x3d, 0x41, 0xc7, 0x8e, 0x85, 0x24, 0x2b, 0xa6, 0x81, 0x6e, 0xe2,
	0xf7, 0xff, 0x87, 0xe4, 0x27, 0x10, 0x92, 0x0c, 0xef, 0x75, 0x8a, 0xfe, 0xba, 0x74, 0x14, 0x88,
	0x8f, 0x16, 0x58, 0x92, 0x0b, 0x97, 0xaf, 0x72, 0x1d, 0xee, 0xaa, 0xf5, 0x75, 0x4a, 0xc5, 0x3c,
	0xa7, 0x9c, 0xe6, 0x6d, 0xbc, 0xae, 0x36, 0xed, 0xaa, 0x5d, 0xb4, 0x5f, 0xdd, 0xd8, 0x34, 0x87,
	0xe4, 0x0d, 0x15, 0x05, 0xd9, 0x05, 0x7e, 0xac, 0xd0, 0x07, 0x3e, 0x83, 0x64, 0xe5, 0x4b, 0x4c,
	0xb5, 0x32, 0xef, 0x8c, 0xca, 0x57, 0x82, 0x4d, 0xd8, 0x6c, 0x78, 0x33, 0x78, 0xf8, 0xf5, 0xfc,
	0x68, 0x71, 0xba, 0xdc, 0x27, 0xfc, 0x0a, 0x2e, 0xfa, 0xe6, 0x32, 0x38, 0x6d, 0xf3, 0x95, 0xf8,
	0x6f, 0xc2, 0x66, 0xe3, 0x5d, 0x37, 0x59, 0xc6, 0xd9, 0xf4, 0xcb, 0x00, 0xce, 0xdf, 0x76, 0x37,
	0xee, 0x8f, 0x9a, 0xc0, 0x49, 0x69, 0x54, 0xd8, 0x90, 0x2b, 0xda, 0x53, 0xfa, 0xc9, 0x27, 0xca,
	0xa7, 0x30, 0x26, 0x7f, 0x8f, 0xce, 0x6b, 0xb2, 0x07, 0x9b, 0xef, 0x71, 0xb3, 0x4b, 0xf7, 0x27,
	0x6e, 0x33, 0xf1, 0x7f, 0xbc, 0x4b, 0x4f, 0xf9, 0x0b, 0x00, 0x9d, 0xa1, 0x0d, 0x7a, 0xa3, 0xd1,
	0x89, 0x41, 0xd4, 0x89, 0x38, 0xbf, 0x84, 0xe1, 0xda, 0x29, 0x9b, 0x89, 0x61, 0x54, 0xe8, 0x10,
	0x7f, 0x09, 0xc9, 0xba, 0xb2, 0x99, 0xc1, 0x0f, 0xbb, 0xbb, 0x8c, 0x62, 0xd1, 0x83, 0x88, 0xbf,
	0x06, 0xde, 0x81, 0xe5, 0x1d, 0xb9, 0xd0, 0x0f, 0x1c, 0x47, 0x03, 0xff, 0xc8, 0x1b, 0x0b, 0x8f,
	0x4e, 0x2b, 0x73, 0x9b, 0x89, 0x93, 0xd8, 0xa2, 0xa7, 0x8d, 0x45, 0x67, 0xf4, 0x5e, 0x15, 0x28,
	0xc6, 0xb1, 0xc5, 0x9e, 0x37, 0x16, 0x05, 0x65, 0x68, 0x04, 0xc4, 0x16, 0x2d, 0xe2, 0x33, 0x38,
	0x2b, 0x94, 0xad, 0x36, 0x2a, 0x0d, 0x95, 0x43, 0x27, 0x4e, 0xa3, 0xca, 0x41, 0xc2, 0x9f, 0xc1,
	0xc8, 0x50, 0xaa, 0x0c, 0x8a, 0xb3, 0xa8, 0xb3, 0x63, 0x5c, 0xc2, 0x71, 0x4a, 0x95, 0x0d, 0x2e,
	0x88, 0x24, 0x8a, 0x7b, 0xd8, 0xb8, 0x04, 0x5d, 0xe0, 0x27, 0xb2, 0x28, 0xce, 0x63, 0x97, 0x9e,
	0x4e, 0xe7, 0x70, 0xf1, 0xf4, 0x16, 0x7c, 0x49, 0xd6, 0x63, 0x73, 0xa4, 0x43, 0x5f, 0x99, 0x70,
	0xf0, 0x14, 0x76, 0xec, 0xe6, 0xea, 0xe7, 0x56, 0x1e, 0x3d, 0x6e, 0x25, 0xfb, 0xbd, 0x95, 0xec,
	0xcf, 0x56, 0xb2, 0xcf, 0xb5, 0x64, 0x5f, 0x6b, 0xc9, 0xbe, 0xd5, 0x92, 0x7d, 0xaf, 0x25, 0x7b,
	0xa8, 0x25, 0xfb, 0x51, 0x4b, 0xf6, 0x58, 0x4b, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xd3,
	0xcb, 0xae, 0x1b, 0x03, 0x00, 0x00,
}
