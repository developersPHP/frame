// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

/*
	Package pgUser is a generated protocol buffer package.

	It is generated from these files:
		user.proto

	It has these top-level messages:
		InsertUserRequest
		InsertUserResponse
		UpdateUserRequest
		UpdateUserResponse
		GetUserInfoRequest
		UserInfo
		GetUserInfoResponse
*/
package pgUser

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InsertUserRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	AppId            int32  `protobuf:"varint,2,req,name=app_id,json=appId" json:"app_id"`
	RegTime          int64  `protobuf:"varint,3,req,name=reg_time,json=regTime" json:"reg_time"`
	PlatformId       string `protobuf:"bytes,4,req,name=platform_id,json=platformId" json:"platform_id"`
	PlatformType     int32  `protobuf:"varint,5,req,name=platform_type,json=platformType" json:"platform_type"`
	Nick             string `protobuf:"bytes,6,req,name=nick" json:"nick"`
	Sex              int32  `protobuf:"varint,7,req,name=sex" json:"sex"`
	Icon             string `protobuf:"bytes,8,req,name=icon" json:"icon"`
	IconBig          string `protobuf:"bytes,9,req,name=icon_big,json=iconBig" json:"icon_big"`
	Phone            string `protobuf:"bytes,10,req,name=phone" json:"phone"`
	LogTime          int64  `protobuf:"varint,11,req,name=log_time,json=logTime" json:"log_time"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *InsertUserRequest) Reset()                    { *m = InsertUserRequest{} }
func (*InsertUserRequest) ProtoMessage()               {}
func (*InsertUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{0} }

func (m *InsertUserRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *InsertUserRequest) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *InsertUserRequest) GetRegTime() int64 {
	if m != nil {
		return m.RegTime
	}
	return 0
}

func (m *InsertUserRequest) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

func (m *InsertUserRequest) GetPlatformType() int32 {
	if m != nil {
		return m.PlatformType
	}
	return 0
}

func (m *InsertUserRequest) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *InsertUserRequest) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *InsertUserRequest) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *InsertUserRequest) GetIconBig() string {
	if m != nil {
		return m.IconBig
	}
	return ""
}

func (m *InsertUserRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *InsertUserRequest) GetLogTime() int64 {
	if m != nil {
		return m.LogTime
	}
	return 0
}

type InsertUserResponse struct {
	Status           bool   `protobuf:"varint,1,req,name=status" json:"status"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *InsertUserResponse) Reset()                    { *m = InsertUserResponse{} }
func (*InsertUserResponse) ProtoMessage()               {}
func (*InsertUserResponse) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{1} }

func (m *InsertUserResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type UpdateUserRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	Nick             string `protobuf:"bytes,6,req,name=nick" json:"nick"`
	Sex              int32  `protobuf:"varint,7,req,name=sex" json:"sex"`
	Icon             string `protobuf:"bytes,8,req,name=icon" json:"icon"`
	IconBig          string `protobuf:"bytes,9,req,name=icon_big,json=iconBig" json:"icon_big"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{2} }

func (m *UpdateUserRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpdateUserRequest) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *UpdateUserRequest) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UpdateUserRequest) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *UpdateUserRequest) GetIconBig() string {
	if m != nil {
		return m.IconBig
	}
	return ""
}

type UpdateUserResponse struct {
	Status           bool   `protobuf:"varint,1,req,name=status" json:"status"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UpdateUserResponse) Reset()                    { *m = UpdateUserResponse{} }
func (*UpdateUserResponse) ProtoMessage()               {}
func (*UpdateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{3} }

func (m *UpdateUserResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetUserInfoRequest struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetUserInfoRequest) Reset()                    { *m = GetUserInfoRequest{} }
func (*GetUserInfoRequest) ProtoMessage()               {}
func (*GetUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{4} }

func (m *GetUserInfoRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type UserInfo struct {
	Mid              int64  `protobuf:"varint,1,req,name=mid" json:"mid"`
	AppId            int32  `protobuf:"varint,2,req,name=app_id,json=appId" json:"app_id"`
	RegTime          int64  `protobuf:"varint,3,req,name=reg_time,json=regTime" json:"reg_time"`
	LoginTime        int64  `protobuf:"varint,4,req,name=login_time,json=loginTime" json:"login_time"`
	Status           int32  `protobuf:"varint,5,req,name=status" json:"status"`
	VipTime          int64  `protobuf:"varint,6,req,name=vip_time,json=vipTime" json:"vip_time"`
	VipLevel         int32  `protobuf:"varint,7,req,name=vip_level,json=vipLevel" json:"vip_level"`
	PlatformId       string `protobuf:"bytes,8,req,name=platform_id,json=platformId" json:"platform_id"`
	PlatformType     int32  `protobuf:"varint,9,req,name=platform_type,json=platformType" json:"platform_type"`
	Nick             string `protobuf:"bytes,10,req,name=Nick" json:"Nick"`
	Sex              int32  `protobuf:"varint,11,req,name=sex" json:"sex"`
	Icon             string `protobuf:"bytes,12,req,name=icon" json:"icon"`
	IconBig          string `protobuf:"bytes,13,req,name=icon_big,json=iconBig" json:"icon_big"`
	Hometown         string `protobuf:"bytes,14,req,name=Hometown" json:"Hometown"`
	City             string `protobuf:"bytes,15,req,name=city" json:"city"`
	Email            string `protobuf:"bytes,16,req,name=email" json:"email"`
	Phone            string `protobuf:"bytes,17,req,name=phone" json:"phone"`
	Realname         string `protobuf:"bytes,18,req,name=realname" json:"realname"`
	Idcard           string `protobuf:"bytes,19,req,name=idcard" json:"idcard"`
	OrgApp           int32  `protobuf:"varint,20,req,name=org_app,json=orgApp" json:"org_app"`
	OrgChannel       int32  `protobuf:"varint,21,req,name=org_channel,json=orgChannel" json:"org_channel"`
	ChannelId        int32  `protobuf:"varint,22,req,name=channel_id,json=channelId" json:"channel_id"`
	Timeout          int64  `protobuf:"varint,23,req,name=timeout" json:"timeout"`
	Bagvol           int64  `protobuf:"varint,24,req,name=bagvol" json:"bagvol"`
	Ispay            int32  `protobuf:"varint,25,req,name=ispay" json:"ispay"`
	FirstMatch       int32  `protobuf:"varint,26,req,name=first_match,json=firstMatch" json:"first_match"`
	FastMatch        int32  `protobuf:"varint,27,req,name=fast_match,json=fastMatch" json:"fast_match"`
	Version          string `protobuf:"bytes,28,req,name=version" json:"version"`
	IsSet            int32  `protobuf:"varint,29,req,name=is_set,json=isSet" json:"is_set"`
	PartnerInfo      int32  `protobuf:"varint,30,req,name=partner_info,json=partnerInfo" json:"partner_info"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{5} }

func (m *UserInfo) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserInfo) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *UserInfo) GetRegTime() int64 {
	if m != nil {
		return m.RegTime
	}
	return 0
}

func (m *UserInfo) GetLoginTime() int64 {
	if m != nil {
		return m.LoginTime
	}
	return 0
}

func (m *UserInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserInfo) GetVipTime() int64 {
	if m != nil {
		return m.VipTime
	}
	return 0
}

func (m *UserInfo) GetVipLevel() int32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

func (m *UserInfo) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

func (m *UserInfo) GetPlatformType() int32 {
	if m != nil {
		return m.PlatformType
	}
	return 0
}

func (m *UserInfo) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *UserInfo) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UserInfo) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *UserInfo) GetIconBig() string {
	if m != nil {
		return m.IconBig
	}
	return ""
}

func (m *UserInfo) GetHometown() string {
	if m != nil {
		return m.Hometown
	}
	return ""
}

func (m *UserInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserInfo) GetRealname() string {
	if m != nil {
		return m.Realname
	}
	return ""
}

func (m *UserInfo) GetIdcard() string {
	if m != nil {
		return m.Idcard
	}
	return ""
}

func (m *UserInfo) GetOrgApp() int32 {
	if m != nil {
		return m.OrgApp
	}
	return 0
}

func (m *UserInfo) GetOrgChannel() int32 {
	if m != nil {
		return m.OrgChannel
	}
	return 0
}

func (m *UserInfo) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *UserInfo) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *UserInfo) GetBagvol() int64 {
	if m != nil {
		return m.Bagvol
	}
	return 0
}

func (m *UserInfo) GetIspay() int32 {
	if m != nil {
		return m.Ispay
	}
	return 0
}

func (m *UserInfo) GetFirstMatch() int32 {
	if m != nil {
		return m.FirstMatch
	}
	return 0
}

func (m *UserInfo) GetFastMatch() int32 {
	if m != nil {
		return m.FastMatch
	}
	return 0
}

func (m *UserInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *UserInfo) GetIsSet() int32 {
	if m != nil {
		return m.IsSet
	}
	return 0
}

func (m *UserInfo) GetPartnerInfo() int32 {
	if m != nil {
		return m.PartnerInfo
	}
	return 0
}

type GetUserInfoResponse struct {
	Status           int32    `protobuf:"varint,1,req,name=status" json:"status"`
	Msg              string   `protobuf:"bytes,2,req,name=msg" json:"msg"`
	Data             UserInfo `protobuf:"bytes,3,req,name=data" json:"data"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GetUserInfoResponse) Reset()                    { *m = GetUserInfoResponse{} }
func (*GetUserInfoResponse) ProtoMessage()               {}
func (*GetUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{6} }

func (m *GetUserInfoResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetUserInfoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetUserInfoResponse) GetData() UserInfo {
	if m != nil {
		return m.Data
	}
	return UserInfo{}
}

func init() {
	proto.RegisterType((*InsertUserRequest)(nil), "pgUser.InsertUserRequest")
	proto.RegisterType((*InsertUserResponse)(nil), "pgUser.InsertUserResponse")
	proto.RegisterType((*UpdateUserRequest)(nil), "pgUser.updateUserRequest")
	proto.RegisterType((*UpdateUserResponse)(nil), "pgUser.updateUserResponse")
	proto.RegisterType((*GetUserInfoRequest)(nil), "pgUser.getUserInfoRequest")
	proto.RegisterType((*UserInfo)(nil), "pgUser.UserInfo")
	proto.RegisterType((*GetUserInfoResponse)(nil), "pgUser.getUserInfoResponse")
}
func (this *InsertUserRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*InsertUserRequest)
	if !ok {
		that2, ok := that.(InsertUserRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *InsertUserRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *InsertUserRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *InsertUserRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.AppId != that1.AppId {
		return fmt.Errorf("AppId this(%v) Not Equal that(%v)", this.AppId, that1.AppId)
	}
	if this.RegTime != that1.RegTime {
		return fmt.Errorf("RegTime this(%v) Not Equal that(%v)", this.RegTime, that1.RegTime)
	}
	if this.PlatformId != that1.PlatformId {
		return fmt.Errorf("PlatformId this(%v) Not Equal that(%v)", this.PlatformId, that1.PlatformId)
	}
	if this.PlatformType != that1.PlatformType {
		return fmt.Errorf("PlatformType this(%v) Not Equal that(%v)", this.PlatformType, that1.PlatformType)
	}
	if this.Nick != that1.Nick {
		return fmt.Errorf("Nick this(%v) Not Equal that(%v)", this.Nick, that1.Nick)
	}
	if this.Sex != that1.Sex {
		return fmt.Errorf("Sex this(%v) Not Equal that(%v)", this.Sex, that1.Sex)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if this.IconBig != that1.IconBig {
		return fmt.Errorf("IconBig this(%v) Not Equal that(%v)", this.IconBig, that1.IconBig)
	}
	if this.Phone != that1.Phone {
		return fmt.Errorf("Phone this(%v) Not Equal that(%v)", this.Phone, that1.Phone)
	}
	if this.LogTime != that1.LogTime {
		return fmt.Errorf("LogTime this(%v) Not Equal that(%v)", this.LogTime, that1.LogTime)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *InsertUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertUserRequest)
	if !ok {
		that2, ok := that.(InsertUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.RegTime != that1.RegTime {
		return false
	}
	if this.PlatformId != that1.PlatformId {
		return false
	}
	if this.PlatformType != that1.PlatformType {
		return false
	}
	if this.Nick != that1.Nick {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.IconBig != that1.IconBig {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.LogTime != that1.LogTime {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InsertUserResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*InsertUserResponse)
	if !ok {
		that2, ok := that.(InsertUserResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *InsertUserResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *InsertUserResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *InsertUserResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *InsertUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertUserResponse)
	if !ok {
		that2, ok := that.(InsertUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateUserRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateUserRequest)
	if !ok {
		that2, ok := that.(UpdateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateUserRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateUserRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateUserRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.Nick != that1.Nick {
		return fmt.Errorf("Nick this(%v) Not Equal that(%v)", this.Nick, that1.Nick)
	}
	if this.Sex != that1.Sex {
		return fmt.Errorf("Sex this(%v) Not Equal that(%v)", this.Sex, that1.Sex)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if this.IconBig != that1.IconBig {
		return fmt.Errorf("IconBig this(%v) Not Equal that(%v)", this.IconBig, that1.IconBig)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UpdateUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserRequest)
	if !ok {
		that2, ok := that.(UpdateUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.Nick != that1.Nick {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.IconBig != that1.IconBig {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateUserResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateUserResponse)
	if !ok {
		that2, ok := that.(UpdateUserResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateUserResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateUserResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateUserResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UpdateUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserResponse)
	if !ok {
		that2, ok := that.(UpdateUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetUserInfoRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetUserInfoRequest)
	if !ok {
		that2, ok := that.(GetUserInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetUserInfoRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetUserInfoRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetUserInfoRequest but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetUserInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserInfoRequest)
	if !ok {
		that2, ok := that.(GetUserInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UserInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserInfo)
	if !ok {
		that2, ok := that.(UserInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UserInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UserInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UserInfo but is not nil && this == nil")
	}
	if this.Mid != that1.Mid {
		return fmt.Errorf("Mid this(%v) Not Equal that(%v)", this.Mid, that1.Mid)
	}
	if this.AppId != that1.AppId {
		return fmt.Errorf("AppId this(%v) Not Equal that(%v)", this.AppId, that1.AppId)
	}
	if this.RegTime != that1.RegTime {
		return fmt.Errorf("RegTime this(%v) Not Equal that(%v)", this.RegTime, that1.RegTime)
	}
	if this.LoginTime != that1.LoginTime {
		return fmt.Errorf("LoginTime this(%v) Not Equal that(%v)", this.LoginTime, that1.LoginTime)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.VipTime != that1.VipTime {
		return fmt.Errorf("VipTime this(%v) Not Equal that(%v)", this.VipTime, that1.VipTime)
	}
	if this.VipLevel != that1.VipLevel {
		return fmt.Errorf("VipLevel this(%v) Not Equal that(%v)", this.VipLevel, that1.VipLevel)
	}
	if this.PlatformId != that1.PlatformId {
		return fmt.Errorf("PlatformId this(%v) Not Equal that(%v)", this.PlatformId, that1.PlatformId)
	}
	if this.PlatformType != that1.PlatformType {
		return fmt.Errorf("PlatformType this(%v) Not Equal that(%v)", this.PlatformType, that1.PlatformType)
	}
	if this.Nick != that1.Nick {
		return fmt.Errorf("Nick this(%v) Not Equal that(%v)", this.Nick, that1.Nick)
	}
	if this.Sex != that1.Sex {
		return fmt.Errorf("Sex this(%v) Not Equal that(%v)", this.Sex, that1.Sex)
	}
	if this.Icon != that1.Icon {
		return fmt.Errorf("Icon this(%v) Not Equal that(%v)", this.Icon, that1.Icon)
	}
	if this.IconBig != that1.IconBig {
		return fmt.Errorf("IconBig this(%v) Not Equal that(%v)", this.IconBig, that1.IconBig)
	}
	if this.Hometown != that1.Hometown {
		return fmt.Errorf("Hometown this(%v) Not Equal that(%v)", this.Hometown, that1.Hometown)
	}
	if this.City != that1.City {
		return fmt.Errorf("City this(%v) Not Equal that(%v)", this.City, that1.City)
	}
	if this.Email != that1.Email {
		return fmt.Errorf("Email this(%v) Not Equal that(%v)", this.Email, that1.Email)
	}
	if this.Phone != that1.Phone {
		return fmt.Errorf("Phone this(%v) Not Equal that(%v)", this.Phone, that1.Phone)
	}
	if this.Realname != that1.Realname {
		return fmt.Errorf("Realname this(%v) Not Equal that(%v)", this.Realname, that1.Realname)
	}
	if this.Idcard != that1.Idcard {
		return fmt.Errorf("Idcard this(%v) Not Equal that(%v)", this.Idcard, that1.Idcard)
	}
	if this.OrgApp != that1.OrgApp {
		return fmt.Errorf("OrgApp this(%v) Not Equal that(%v)", this.OrgApp, that1.OrgApp)
	}
	if this.OrgChannel != that1.OrgChannel {
		return fmt.Errorf("OrgChannel this(%v) Not Equal that(%v)", this.OrgChannel, that1.OrgChannel)
	}
	if this.ChannelId != that1.ChannelId {
		return fmt.Errorf("ChannelId this(%v) Not Equal that(%v)", this.ChannelId, that1.ChannelId)
	}
	if this.Timeout != that1.Timeout {
		return fmt.Errorf("Timeout this(%v) Not Equal that(%v)", this.Timeout, that1.Timeout)
	}
	if this.Bagvol != that1.Bagvol {
		return fmt.Errorf("Bagvol this(%v) Not Equal that(%v)", this.Bagvol, that1.Bagvol)
	}
	if this.Ispay != that1.Ispay {
		return fmt.Errorf("Ispay this(%v) Not Equal that(%v)", this.Ispay, that1.Ispay)
	}
	if this.FirstMatch != that1.FirstMatch {
		return fmt.Errorf("FirstMatch this(%v) Not Equal that(%v)", this.FirstMatch, that1.FirstMatch)
	}
	if this.FastMatch != that1.FastMatch {
		return fmt.Errorf("FastMatch this(%v) Not Equal that(%v)", this.FastMatch, that1.FastMatch)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if this.IsSet != that1.IsSet {
		return fmt.Errorf("IsSet this(%v) Not Equal that(%v)", this.IsSet, that1.IsSet)
	}
	if this.PartnerInfo != that1.PartnerInfo {
		return fmt.Errorf("PartnerInfo this(%v) Not Equal that(%v)", this.PartnerInfo, that1.PartnerInfo)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserInfo)
	if !ok {
		that2, ok := that.(UserInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Mid != that1.Mid {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.RegTime != that1.RegTime {
		return false
	}
	if this.LoginTime != that1.LoginTime {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.VipTime != that1.VipTime {
		return false
	}
	if this.VipLevel != that1.VipLevel {
		return false
	}
	if this.PlatformId != that1.PlatformId {
		return false
	}
	if this.PlatformType != that1.PlatformType {
		return false
	}
	if this.Nick != that1.Nick {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.IconBig != that1.IconBig {
		return false
	}
	if this.Hometown != that1.Hometown {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Realname != that1.Realname {
		return false
	}
	if this.Idcard != that1.Idcard {
		return false
	}
	if this.OrgApp != that1.OrgApp {
		return false
	}
	if this.OrgChannel != that1.OrgChannel {
		return false
	}
	if this.ChannelId != that1.ChannelId {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.Bagvol != that1.Bagvol {
		return false
	}
	if this.Ispay != that1.Ispay {
		return false
	}
	if this.FirstMatch != that1.FirstMatch {
		return false
	}
	if this.FastMatch != that1.FastMatch {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.IsSet != that1.IsSet {
		return false
	}
	if this.PartnerInfo != that1.PartnerInfo {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetUserInfoResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetUserInfoResponse)
	if !ok {
		that2, ok := that.(GetUserInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetUserInfoResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetUserInfoResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetUserInfoResponse but is not nil && this == nil")
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !this.Data.Equal(&that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", this.Data, that1.Data)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetUserInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserInfoResponse)
	if !ok {
		that2, ok := that.(GetUserInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InsertUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&pgUser.InsertUserRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "RegTime: "+fmt.Sprintf("%#v", this.RegTime)+",\n")
	s = append(s, "PlatformId: "+fmt.Sprintf("%#v", this.PlatformId)+",\n")
	s = append(s, "PlatformType: "+fmt.Sprintf("%#v", this.PlatformType)+",\n")
	s = append(s, "Nick: "+fmt.Sprintf("%#v", this.Nick)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "IconBig: "+fmt.Sprintf("%#v", this.IconBig)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "LogTime: "+fmt.Sprintf("%#v", this.LogTime)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InsertUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgUser.InsertUserResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pgUser.UpdateUserRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "Nick: "+fmt.Sprintf("%#v", this.Nick)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "IconBig: "+fmt.Sprintf("%#v", this.IconBig)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgUser.UpdateUserResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pgUser.GetUserInfoRequest{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 34)
	s = append(s, "&pgUser.UserInfo{")
	s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "RegTime: "+fmt.Sprintf("%#v", this.RegTime)+",\n")
	s = append(s, "LoginTime: "+fmt.Sprintf("%#v", this.LoginTime)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "VipTime: "+fmt.Sprintf("%#v", this.VipTime)+",\n")
	s = append(s, "VipLevel: "+fmt.Sprintf("%#v", this.VipLevel)+",\n")
	s = append(s, "PlatformId: "+fmt.Sprintf("%#v", this.PlatformId)+",\n")
	s = append(s, "PlatformType: "+fmt.Sprintf("%#v", this.PlatformType)+",\n")
	s = append(s, "Nick: "+fmt.Sprintf("%#v", this.Nick)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "IconBig: "+fmt.Sprintf("%#v", this.IconBig)+",\n")
	s = append(s, "Hometown: "+fmt.Sprintf("%#v", this.Hometown)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Realname: "+fmt.Sprintf("%#v", this.Realname)+",\n")
	s = append(s, "Idcard: "+fmt.Sprintf("%#v", this.Idcard)+",\n")
	s = append(s, "OrgApp: "+fmt.Sprintf("%#v", this.OrgApp)+",\n")
	s = append(s, "OrgChannel: "+fmt.Sprintf("%#v", this.OrgChannel)+",\n")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "Bagvol: "+fmt.Sprintf("%#v", this.Bagvol)+",\n")
	s = append(s, "Ispay: "+fmt.Sprintf("%#v", this.Ispay)+",\n")
	s = append(s, "FirstMatch: "+fmt.Sprintf("%#v", this.FirstMatch)+",\n")
	s = append(s, "FastMatch: "+fmt.Sprintf("%#v", this.FastMatch)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "IsSet: "+fmt.Sprintf("%#v", this.IsSet)+",\n")
	s = append(s, "PartnerInfo: "+fmt.Sprintf("%#v", this.PartnerInfo)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pgUser.GetUserInfoResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Data: "+strings.Replace(this.Data.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUser(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *InsertUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.AppId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.RegTime))
	dAtA[i] = 0x22
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.PlatformId)))
	i += copy(dAtA[i:], m.PlatformId)
	dAtA[i] = 0x28
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.PlatformType))
	dAtA[i] = 0x32
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Nick)))
	i += copy(dAtA[i:], m.Nick)
	dAtA[i] = 0x38
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x42
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Icon)))
	i += copy(dAtA[i:], m.Icon)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.IconBig)))
	i += copy(dAtA[i:], m.IconBig)
	dAtA[i] = 0x52
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Phone)))
	i += copy(dAtA[i:], m.Phone)
	dAtA[i] = 0x58
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.LogTime))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InsertUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Status {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x32
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Nick)))
	i += copy(dAtA[i:], m.Nick)
	dAtA[i] = 0x38
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x42
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Icon)))
	i += copy(dAtA[i:], m.Icon)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.IconBig)))
	i += copy(dAtA[i:], m.IconBig)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Status {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUserInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Mid))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Mid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.AppId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.RegTime))
	dAtA[i] = 0x20
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.LoginTime))
	dAtA[i] = 0x28
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x30
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.VipTime))
	dAtA[i] = 0x38
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.VipLevel))
	dAtA[i] = 0x42
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.PlatformId)))
	i += copy(dAtA[i:], m.PlatformId)
	dAtA[i] = 0x48
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.PlatformType))
	dAtA[i] = 0x52
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Nick)))
	i += copy(dAtA[i:], m.Nick)
	dAtA[i] = 0x58
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Sex))
	dAtA[i] = 0x62
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Icon)))
	i += copy(dAtA[i:], m.Icon)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.IconBig)))
	i += copy(dAtA[i:], m.IconBig)
	dAtA[i] = 0x72
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Hometown)))
	i += copy(dAtA[i:], m.Hometown)
	dAtA[i] = 0x7a
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.City)))
	i += copy(dAtA[i:], m.City)
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
	i += copy(dAtA[i:], m.Email)
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Phone)))
	i += copy(dAtA[i:], m.Phone)
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Realname)))
	i += copy(dAtA[i:], m.Realname)
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Idcard)))
	i += copy(dAtA[i:], m.Idcard)
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.OrgApp))
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.OrgChannel))
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.ChannelId))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Timeout))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Bagvol))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Ispay))
	dAtA[i] = 0xd0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.FirstMatch))
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.FastMatch))
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Version)))
	i += copy(dAtA[i:], m.Version)
	dAtA[i] = 0xe8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.IsSet))
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.PartnerInfo))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUserInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintUser(dAtA, i, uint64(len(m.Msg)))
	i += copy(dAtA[i:], m.Msg)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintUser(dAtA, i, uint64(m.Data.Size()))
	n1, err := m.Data.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedInsertUserRequest(r randyUser, easy bool) *InsertUserRequest {
	this := &InsertUserRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.AppId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.AppId *= -1
	}
	this.RegTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.RegTime *= -1
	}
	this.PlatformId = string(randStringUser(r))
	this.PlatformType = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PlatformType *= -1
	}
	this.Nick = string(randStringUser(r))
	this.Sex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sex *= -1
	}
	this.Icon = string(randStringUser(r))
	this.IconBig = string(randStringUser(r))
	this.Phone = string(randStringUser(r))
	this.LogTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LogTime *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUser(r, 12)
	}
	return this
}

func NewPopulatedInsertUserResponse(r randyUser, easy bool) *InsertUserResponse {
	this := &InsertUserResponse{}
	this.Status = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUser(r, 2)
	}
	return this
}

func NewPopulatedUpdateUserRequest(r randyUser, easy bool) *UpdateUserRequest {
	this := &UpdateUserRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.Nick = string(randStringUser(r))
	this.Sex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sex *= -1
	}
	this.Icon = string(randStringUser(r))
	this.IconBig = string(randStringUser(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUser(r, 10)
	}
	return this
}

func NewPopulatedUpdateUserResponse(r randyUser, easy bool) *UpdateUserResponse {
	this := &UpdateUserResponse{}
	this.Status = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUser(r, 2)
	}
	return this
}

func NewPopulatedGetUserInfoRequest(r randyUser, easy bool) *GetUserInfoRequest {
	this := &GetUserInfoRequest{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUser(r, 2)
	}
	return this
}

func NewPopulatedUserInfo(r randyUser, easy bool) *UserInfo {
	this := &UserInfo{}
	this.Mid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Mid *= -1
	}
	this.AppId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.AppId *= -1
	}
	this.RegTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.RegTime *= -1
	}
	this.LoginTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LoginTime *= -1
	}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.VipTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.VipTime *= -1
	}
	this.VipLevel = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.VipLevel *= -1
	}
	this.PlatformId = string(randStringUser(r))
	this.PlatformType = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PlatformType *= -1
	}
	this.Nick = string(randStringUser(r))
	this.Sex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sex *= -1
	}
	this.Icon = string(randStringUser(r))
	this.IconBig = string(randStringUser(r))
	this.Hometown = string(randStringUser(r))
	this.City = string(randStringUser(r))
	this.Email = string(randStringUser(r))
	this.Phone = string(randStringUser(r))
	this.Realname = string(randStringUser(r))
	this.Idcard = string(randStringUser(r))
	this.OrgApp = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.OrgApp *= -1
	}
	this.OrgChannel = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.OrgChannel *= -1
	}
	this.ChannelId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ChannelId *= -1
	}
	this.Timeout = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timeout *= -1
	}
	this.Bagvol = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Bagvol *= -1
	}
	this.Ispay = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Ispay *= -1
	}
	this.FirstMatch = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.FirstMatch *= -1
	}
	this.FastMatch = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.FastMatch *= -1
	}
	this.Version = string(randStringUser(r))
	this.IsSet = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.IsSet *= -1
	}
	this.PartnerInfo = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PartnerInfo *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUser(r, 31)
	}
	return this
}

func NewPopulatedGetUserInfoResponse(r randyUser, easy bool) *GetUserInfoResponse {
	this := &GetUserInfoResponse{}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.Msg = string(randStringUser(r))
	v1 := NewPopulatedUserInfo(r, easy)
	this.Data = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUser(r, 4)
	}
	return this
}

type randyUser interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUser(r randyUser) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUser(r randyUser) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneUser(r)
	}
	return string(tmps)
}
func randUnrecognizedUser(r randyUser, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldUser(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldUser(dAtA []byte, r randyUser, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateUser(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateUser(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateUser(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateUser(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateUser(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateUser(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateUser(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *InsertUserRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUser(uint64(m.Mid))
	n += 1 + sovUser(uint64(m.AppId))
	n += 1 + sovUser(uint64(m.RegTime))
	l = len(m.PlatformId)
	n += 1 + l + sovUser(uint64(l))
	n += 1 + sovUser(uint64(m.PlatformType))
	l = len(m.Nick)
	n += 1 + l + sovUser(uint64(l))
	n += 1 + sovUser(uint64(m.Sex))
	l = len(m.Icon)
	n += 1 + l + sovUser(uint64(l))
	l = len(m.IconBig)
	n += 1 + l + sovUser(uint64(l))
	l = len(m.Phone)
	n += 1 + l + sovUser(uint64(l))
	n += 1 + sovUser(uint64(m.LogTime))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InsertUserResponse) Size() (n int) {
	var l int
	_ = l
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateUserRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUser(uint64(m.Mid))
	l = len(m.Nick)
	n += 1 + l + sovUser(uint64(l))
	n += 1 + sovUser(uint64(m.Sex))
	l = len(m.Icon)
	n += 1 + l + sovUser(uint64(l))
	l = len(m.IconBig)
	n += 1 + l + sovUser(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateUserResponse) Size() (n int) {
	var l int
	_ = l
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserInfoRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUser(uint64(m.Mid))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUser(uint64(m.Mid))
	n += 1 + sovUser(uint64(m.AppId))
	n += 1 + sovUser(uint64(m.RegTime))
	n += 1 + sovUser(uint64(m.LoginTime))
	n += 1 + sovUser(uint64(m.Status))
	n += 1 + sovUser(uint64(m.VipTime))
	n += 1 + sovUser(uint64(m.VipLevel))
	l = len(m.PlatformId)
	n += 1 + l + sovUser(uint64(l))
	n += 1 + sovUser(uint64(m.PlatformType))
	l = len(m.Nick)
	n += 1 + l + sovUser(uint64(l))
	n += 1 + sovUser(uint64(m.Sex))
	l = len(m.Icon)
	n += 1 + l + sovUser(uint64(l))
	l = len(m.IconBig)
	n += 1 + l + sovUser(uint64(l))
	l = len(m.Hometown)
	n += 1 + l + sovUser(uint64(l))
	l = len(m.City)
	n += 1 + l + sovUser(uint64(l))
	l = len(m.Email)
	n += 2 + l + sovUser(uint64(l))
	l = len(m.Phone)
	n += 2 + l + sovUser(uint64(l))
	l = len(m.Realname)
	n += 2 + l + sovUser(uint64(l))
	l = len(m.Idcard)
	n += 2 + l + sovUser(uint64(l))
	n += 2 + sovUser(uint64(m.OrgApp))
	n += 2 + sovUser(uint64(m.OrgChannel))
	n += 2 + sovUser(uint64(m.ChannelId))
	n += 2 + sovUser(uint64(m.Timeout))
	n += 2 + sovUser(uint64(m.Bagvol))
	n += 2 + sovUser(uint64(m.Ispay))
	n += 2 + sovUser(uint64(m.FirstMatch))
	n += 2 + sovUser(uint64(m.FastMatch))
	l = len(m.Version)
	n += 2 + l + sovUser(uint64(l))
	n += 2 + sovUser(uint64(m.IsSet))
	n += 2 + sovUser(uint64(m.PartnerInfo))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserInfoResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovUser(uint64(m.Status))
	l = len(m.Msg)
	n += 1 + l + sovUser(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovUser(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InsertUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InsertUserRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`RegTime:` + fmt.Sprintf("%v", this.RegTime) + `,`,
		`PlatformId:` + fmt.Sprintf("%v", this.PlatformId) + `,`,
		`PlatformType:` + fmt.Sprintf("%v", this.PlatformType) + `,`,
		`Nick:` + fmt.Sprintf("%v", this.Nick) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`IconBig:` + fmt.Sprintf("%v", this.IconBig) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`LogTime:` + fmt.Sprintf("%v", this.LogTime) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InsertUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InsertUserResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`Nick:` + fmt.Sprintf("%v", this.Nick) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`IconBig:` + fmt.Sprintf("%v", this.IconBig) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserInfoRequest{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserInfo{`,
		`Mid:` + fmt.Sprintf("%v", this.Mid) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`RegTime:` + fmt.Sprintf("%v", this.RegTime) + `,`,
		`LoginTime:` + fmt.Sprintf("%v", this.LoginTime) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`VipTime:` + fmt.Sprintf("%v", this.VipTime) + `,`,
		`VipLevel:` + fmt.Sprintf("%v", this.VipLevel) + `,`,
		`PlatformId:` + fmt.Sprintf("%v", this.PlatformId) + `,`,
		`PlatformType:` + fmt.Sprintf("%v", this.PlatformType) + `,`,
		`Nick:` + fmt.Sprintf("%v", this.Nick) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`IconBig:` + fmt.Sprintf("%v", this.IconBig) + `,`,
		`Hometown:` + fmt.Sprintf("%v", this.Hometown) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Realname:` + fmt.Sprintf("%v", this.Realname) + `,`,
		`Idcard:` + fmt.Sprintf("%v", this.Idcard) + `,`,
		`OrgApp:` + fmt.Sprintf("%v", this.OrgApp) + `,`,
		`OrgChannel:` + fmt.Sprintf("%v", this.OrgChannel) + `,`,
		`ChannelId:` + fmt.Sprintf("%v", this.ChannelId) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`Bagvol:` + fmt.Sprintf("%v", this.Bagvol) + `,`,
		`Ispay:` + fmt.Sprintf("%v", this.Ispay) + `,`,
		`FirstMatch:` + fmt.Sprintf("%v", this.FirstMatch) + `,`,
		`FastMatch:` + fmt.Sprintf("%v", this.FastMatch) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`IsSet:` + fmt.Sprintf("%v", this.IsSet) + `,`,
		`PartnerInfo:` + fmt.Sprintf("%v", this.PartnerInfo) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserInfoResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Data:` + strings.Replace(strings.Replace(this.Data.String(), "UserInfo", "UserInfo", 1), `&`, ``, 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUser(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InsertUserRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegTime", wireType)
			}
			m.RegTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformType", wireType)
			}
			m.PlatformType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatformType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconBig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconBig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogTime", wireType)
			}
			m.LogTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000400)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("app_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("reg_time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("platform_id")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("platform_type")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("nick")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("sex")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return proto.NewRequiredNotSetError("icon")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return proto.NewRequiredNotSetError("icon_big")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return proto.NewRequiredNotSetError("phone")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return proto.NewRequiredNotSetError("log_time")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertUserResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconBig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconBig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("nick")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("sex")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("icon")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("icon_big")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: updateUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: updateUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getUserInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getUserInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegTime", wireType)
			}
			m.RegTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTime", wireType)
			}
			m.LoginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipTime", wireType)
			}
			m.VipTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformType", wireType)
			}
			m.PlatformType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatformType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000800)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconBig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconBig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00001000)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hometown", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hometown = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00002000)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00004000)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00008000)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00010000)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Realname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00020000)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idcard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idcard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00040000)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgApp", wireType)
			}
			m.OrgApp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgApp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00080000)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgChannel", wireType)
			}
			m.OrgChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgChannel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00100000)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00200000)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00400000)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bagvol", wireType)
			}
			m.Bagvol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bagvol |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00800000)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ispay", wireType)
			}
			m.Ispay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ispay |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x01000000)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstMatch", wireType)
			}
			m.FirstMatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstMatch |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x02000000)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastMatch", wireType)
			}
			m.FastMatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FastMatch |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x04000000)
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x08000000)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSet", wireType)
			}
			m.IsSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x10000000)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerInfo", wireType)
			}
			m.PartnerInfo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartnerInfo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x20000000)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("mid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("app_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("reg_time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("login_time")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("vip_time")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("vip_level")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return proto.NewRequiredNotSetError("platform_id")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return proto.NewRequiredNotSetError("platform_type")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return proto.NewRequiredNotSetError("Nick")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return proto.NewRequiredNotSetError("sex")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return proto.NewRequiredNotSetError("icon")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return proto.NewRequiredNotSetError("icon_big")
	}
	if hasFields[0]&uint64(0x00002000) == 0 {
		return proto.NewRequiredNotSetError("Hometown")
	}
	if hasFields[0]&uint64(0x00004000) == 0 {
		return proto.NewRequiredNotSetError("city")
	}
	if hasFields[0]&uint64(0x00008000) == 0 {
		return proto.NewRequiredNotSetError("email")
	}
	if hasFields[0]&uint64(0x00010000) == 0 {
		return proto.NewRequiredNotSetError("phone")
	}
	if hasFields[0]&uint64(0x00020000) == 0 {
		return proto.NewRequiredNotSetError("realname")
	}
	if hasFields[0]&uint64(0x00040000) == 0 {
		return proto.NewRequiredNotSetError("idcard")
	}
	if hasFields[0]&uint64(0x00080000) == 0 {
		return proto.NewRequiredNotSetError("org_app")
	}
	if hasFields[0]&uint64(0x00100000) == 0 {
		return proto.NewRequiredNotSetError("org_channel")
	}
	if hasFields[0]&uint64(0x00200000) == 0 {
		return proto.NewRequiredNotSetError("channel_id")
	}
	if hasFields[0]&uint64(0x00400000) == 0 {
		return proto.NewRequiredNotSetError("timeout")
	}
	if hasFields[0]&uint64(0x00800000) == 0 {
		return proto.NewRequiredNotSetError("bagvol")
	}
	if hasFields[0]&uint64(0x01000000) == 0 {
		return proto.NewRequiredNotSetError("ispay")
	}
	if hasFields[0]&uint64(0x02000000) == 0 {
		return proto.NewRequiredNotSetError("first_match")
	}
	if hasFields[0]&uint64(0x04000000) == 0 {
		return proto.NewRequiredNotSetError("fast_match")
	}
	if hasFields[0]&uint64(0x08000000) == 0 {
		return proto.NewRequiredNotSetError("version")
	}
	if hasFields[0]&uint64(0x10000000) == 0 {
		return proto.NewRequiredNotSetError("is_set")
	}
	if hasFields[0]&uint64(0x20000000) == 0 {
		return proto.NewRequiredNotSetError("partner_info")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getUserInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getUserInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("msg")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("user.proto", fileDescriptorUser) }

var fileDescriptorUser = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xbd, 0x72, 0x13, 0x31,
	0x10, 0xce, 0x39, 0xfe, 0x95, 0x13, 0x48, 0x14, 0x08, 0x22, 0x3f, 0x17, 0x63, 0x86, 0x21, 0x30,
	0xc1, 0x99, 0xc9, 0x1b, 0x10, 0x1a, 0x3c, 0x03, 0x14, 0x21, 0xd4, 0x1e, 0xd9, 0x27, 0xcb, 0x1a,
	0xee, 0x4e, 0x42, 0x92, 0x1d, 0xdc, 0xf1, 0x18, 0x3c, 0x02, 0x8f, 0x40, 0x49, 0x99, 0x12, 0x3a,
	0x2a, 0x26, 0xf6, 0x0c, 0x3d, 0x25, 0x25, 0xb3, 0xf2, 0xd9, 0x51, 0x42, 0x08, 0x69, 0xa0, 0xb2,
	0xef, 0xdb, 0x6f, 0x57, 0xbb, 0xda, 0xef, 0xbb, 0x43, 0xa8, 0x6f, 0x98, 0x6e, 0x28, 0x2d, 0xad,
	0xc4, 0x45, 0xc5, 0x5f, 0x19, 0xa6, 0xd7, 0x1e, 0x71, 0x61, 0x7b, 0xfd, 0x76, 0xa3, 0x23, 0x93,
	0x5d, 0x2e, 0xb9, 0xdc, 0x75, 0xe1, 0x76, 0xbf, 0xeb, 0x9e, 0xdc, 0x83, 0xfb, 0x37, 0x49, 0xab,
	0x7f, 0xcf, 0xa1, 0xe5, 0x66, 0x6a, 0x98, 0xb6, 0x90, 0x7d, 0xc0, 0xde, 0xf4, 0x99, 0xb1, 0x78,
	0x15, 0xcd, 0x27, 0x22, 0x22, 0x41, 0x2d, 0xb7, 0x3d, 0xbf, 0x9f, 0x3f, 0xfe, 0xb6, 0x35, 0x77,
	0x00, 0x00, 0x5e, 0x47, 0x45, 0xaa, 0x54, 0x4b, 0x44, 0x24, 0x57, 0xcb, 0x6d, 0x17, 0xb2, 0x50,
	0x81, 0x2a, 0xd5, 0x8c, 0xf0, 0x16, 0x2a, 0x6b, 0xc6, 0x5b, 0x56, 0x24, 0x8c, 0xcc, 0x7b, 0x99,
	0x25, 0xcd, 0xf8, 0xa1, 0x48, 0x18, 0xbe, 0x87, 0xaa, 0x2a, 0xa6, 0xb6, 0x2b, 0x75, 0x02, 0x25,
	0xf2, 0xb5, 0xdc, 0x76, 0x25, 0xe3, 0xa0, 0x69, 0xa0, 0x19, 0xe1, 0x07, 0x68, 0x71, 0x46, 0xb3,
	0x43, 0xc5, 0x48, 0xc1, 0x3b, 0x6b, 0x61, 0x1a, 0x3a, 0x1c, 0x2a, 0x86, 0x09, 0xca, 0xa7, 0xa2,
	0xf3, 0x9a, 0x14, 0xbd, 0x52, 0x0e, 0x81, 0x09, 0x0c, 0x7b, 0x4b, 0x4a, 0x5e, 0x2a, 0x00, 0x90,
	0x21, 0x3a, 0x32, 0x25, 0x65, 0x3f, 0x03, 0x10, 0x68, 0x1f, 0x7e, 0x5b, 0x6d, 0xc1, 0x49, 0xc5,
	0x8b, 0x96, 0x00, 0xdd, 0x17, 0x1c, 0xaf, 0xa1, 0x82, 0xea, 0xc9, 0x94, 0x11, 0xe4, 0x45, 0x27,
	0x10, 0x24, 0xc7, 0x32, 0x9b, 0xbd, 0xea, 0xcf, 0x1e, 0x4b, 0x37, 0x7b, 0x7d, 0x0f, 0x61, 0xff,
	0x9a, 0x8d, 0x92, 0xa9, 0x61, 0x78, 0x03, 0x15, 0x8d, 0xa5, 0xb6, 0x6f, 0xdc, 0x55, 0x97, 0xb3,
	0xa4, 0x0c, 0xab, 0xbf, 0x0f, 0xd0, 0x72, 0x5f, 0x45, 0xd4, 0xb2, 0xab, 0xec, 0xe6, 0x7f, 0xde,
	0x05, 0x8c, 0xe3, 0x77, 0x76, 0xa5, 0x71, 0x76, 0x10, 0xe6, 0xcc, 0xcd, 0xdf, 0x4c, 0xbb, 0xf2,
	0x2f, 0xe3, 0xd4, 0xbf, 0x94, 0x50, 0x79, 0xca, 0xfd, 0x47, 0x7a, 0xbc, 0x8b, 0x50, 0x2c, 0xb9,
	0x48, 0x27, 0x94, 0xbc, 0x47, 0xa9, 0x38, 0xdc, 0x91, 0x4e, 0x67, 0xf2, 0x65, 0x98, 0x61, 0x70,
	0xc6, 0x40, 0xa8, 0x49, 0x81, 0xa2, 0x7f, 0xc6, 0x40, 0x28, 0x97, 0x7e, 0x07, 0x55, 0x80, 0x10,
	0xb3, 0x01, 0x8b, 0xcf, 0x6c, 0x00, 0xf2, 0x9e, 0x01, 0x7a, 0xde, 0x16, 0xe5, 0xab, 0xda, 0xa2,
	0x72, 0x99, 0x2d, 0x5e, 0x80, 0x14, 0x7c, 0xa1, 0x3a, 0x64, 0x2a, 0x85, 0xea, 0x9f, 0xa4, 0xb0,
	0x70, 0xa9, 0x14, 0x16, 0x2f, 0xb2, 0x45, 0x0d, 0x95, 0x9f, 0xca, 0x84, 0x59, 0x79, 0x94, 0x92,
	0x6b, 0x1e, 0x61, 0x86, 0x42, 0xf1, 0x8e, 0xb0, 0x43, 0x72, 0xdd, 0x2f, 0x0e, 0x08, 0x58, 0x8a,
	0x25, 0x54, 0xc4, 0x64, 0xc9, 0xb7, 0x94, 0x83, 0x4e, 0xed, 0xb6, 0xfc, 0xbb, 0xdd, 0x6a, 0xb0,
	0x5a, 0x1a, 0xa7, 0x34, 0x61, 0x04, 0xfb, 0x67, 0x4e, 0x51, 0x58, 0x9b, 0x88, 0x3a, 0x54, 0x47,
	0x64, 0xc5, 0x8b, 0x67, 0x18, 0xde, 0x44, 0x25, 0xa9, 0x79, 0x8b, 0x2a, 0x45, 0x6e, 0xf8, 0x5b,
	0x95, 0x9a, 0x3f, 0x56, 0x0a, 0x36, 0x02, 0xe1, 0x4e, 0x8f, 0xa6, 0x29, 0x8b, 0xc9, 0x4d, 0x8f,
	0x82, 0xa4, 0xe6, 0x4f, 0x26, 0x38, 0xe8, 0x27, 0xa3, 0xc0, 0xde, 0x56, 0x3d, 0x56, 0x25, 0xc3,
	0x9b, 0x11, 0x0e, 0x51, 0x09, 0xd4, 0x21, 0xfb, 0x96, 0xdc, 0xf2, 0x05, 0x92, 0x81, 0xd0, 0x68,
	0x9b, 0xf2, 0x81, 0x8c, 0x09, 0xf1, 0xc2, 0x19, 0x06, 0x97, 0x20, 0x8c, 0xa2, 0x43, 0x72, 0xdb,
	0xd7, 0xb7, 0x83, 0xa0, 0xcb, 0xae, 0xd0, 0xc6, 0xb6, 0x12, 0x6a, 0x3b, 0x3d, 0xb2, 0xe6, 0x77,
	0xe9, 0x02, 0xcf, 0x01, 0x87, 0x2e, 0xbb, 0x74, 0xc6, 0x5a, 0xf7, 0xbb, 0x04, 0x7c, 0x42, 0x0a,
	0x51, 0x69, 0xc0, 0xb4, 0x11, 0x32, 0x25, 0x1b, 0xfe, 0x92, 0x33, 0x10, 0x8c, 0x26, 0x4c, 0xcb,
	0x30, 0x4b, 0x36, 0xcf, 0x36, 0xf2, 0x92, 0x59, 0x7c, 0x1f, 0x2d, 0x28, 0xaa, 0x6d, 0xca, 0x74,
	0x4b, 0xa4, 0x5d, 0x49, 0x42, 0x8f, 0x52, 0xcd, 0x22, 0x60, 0xe3, 0xfa, 0x11, 0x5a, 0x39, 0xf3,
	0x06, 0xb8, 0xf0, 0xb5, 0x71, 0xde, 0x62, 0xe0, 0x7d, 0xc3, 0x9d, 0xc1, 0x2b, 0x33, 0xef, 0x1b,
	0x8e, 0x1f, 0xa2, 0x7c, 0x44, 0x2d, 0x75, 0xd6, 0xae, 0xee, 0x2d, 0x35, 0x26, 0xdf, 0xbf, 0xc6,
	0xb4, 0xfa, 0x54, 0x67, 0xc0, 0xd9, 0xdf, 0xf9, 0x3a, 0x0a, 0xe7, 0x4e, 0x46, 0x61, 0xf0, 0x63,
	0x14, 0x06, 0x3f, 0x47, 0x61, 0xf0, 0x6e, 0x1c, 0x06, 0x1f, 0xc6, 0x61, 0xf0, 0x71, 0x1c, 0x06,
	0x9f, 0xc6, 0x61, 0x70, 0x3c, 0x0e, 0x83, 0xcf, 0xe3, 0x30, 0x38, 0x19, 0x87, 0xc1, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xee, 0xf1, 0xf1, 0x02, 0x57, 0x07, 0x00, 0x00,
}
